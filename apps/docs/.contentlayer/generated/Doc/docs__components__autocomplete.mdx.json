{
  "title": "Autocomplete",
  "description": "An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.",
  "body": {
    "raw": "\nimport {autocompleteContent} from \"@/content/components/autocomplete\";\n\n# Autocomplete\n\nAn autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\n\n<ComponentLinks component=\"autocomplete\" reactAriaHook=\"useComboBox\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add autocomplete\",\n    npm: \"npm install @nextui-org/autocomplete\",\n    yarn: \"yarn add @nextui-org/autocomplete\",\n    pnpm: \"pnpm add @nextui-org/autocomplete\",\n    bun: \"bun add @nextui-org/autocomplete\"\n  }}\n/>\n\n\n## Import\n\nNextUI exports 3 autocomplete-related components:\n\n- **Autocomplete**: The main component, which is a wrapper for the other components.\n- **AutocompleteSection**: The component that contains a group of autocomplete items.\n- **AutocompleteItem**: The component that represents a autocomplete item.\n\n<ImportTabs\n  commands={{\n    main: `import {\n  Autocomplete,\n  AutocompleteSection,\n  AutocompleteItem\n} from \"@nextui-org/react\";`,\n    individual: `import {\n  Autocomplete,\n  AutocompleteSection,\n  AutocompleteItem\n} from \"@nextui-org/autocomplete\";`,\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={autocompleteContent.usage} />\n\n### Dynamic items\n\nAutocomplete follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.\n\n- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\n- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.\n\n<CodeDemo title=\"Dynamic items\" highlightedLines=\"8\" files={autocompleteContent.dynamic} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" highlightedLines=\"8\" files={autocompleteContent.disabled} />\n\n### Disabled Items\n\nYou can disable specific items by using the `disabledKeys` property.\n\n<CodeDemo title=\"Disabled Items\" highlightedLines=\"11\" files={autocompleteContent.disabledItems} />\n\n### Required\n\nIf you pass the `isRequired` property to the autocomplete, it will have a `danger` asterisk at\nthe end of the label and the autocomplete will be required.\n\n<CodeDemo title=\"Required\" highlightedLines=\"8\" files={autocompleteContent.required} />\n\n### Read Only\n\nIf you pass the `isReadOnly` property to the Autocomplete, the Listbox will open to display \nall available options, but users won't be able to select any of the listed options.\n\n<CodeDemo title=\"Read Only\" highlightedLines=\"8\" files={autocompleteContent.readOnly} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" highlightedLines=\"13,21\" files={autocompleteContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" highlightedLines=\"20\" files={autocompleteContent.colors} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" highlightedLines=\"13,21\" files={autocompleteContent.variants} />\n\n### Label Placements\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n<CodeDemo\n  title=\"Label Placements\"\n  highlightedLines=\"20,34\"\n  files={autocompleteContent.labelPlacements}\n/>\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### Start Content\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of\nthe autocomplete.\n\n<CodeDemo title=\"Start Content\" highlightedLines=\"13\" files={autocompleteContent.startContent} />\n\n### Item Start & End Content\n\nSince the `Autocomplete` component uses the [Listbox](/docs/components/listbox) component under the hood, you can\nuse the `startContent` and `endContent` properties of the `AutocompleteItem` component to add content to the start\nand end of the autocomplete item.\n\n<CodeDemo title=\"Item Start Content\" files={autocompleteContent.itemStartContent} />\n\n### Custom Value\n\nBy default, `Autocomplete` doesn't allow users to specify a value that doesn't exist in the list of options and will\nrevert the input value to the current selected value on blur. By specifying `allowsCustomValue`, this behavior is\nsuppressed and the user is free to enter any value within the field.\n\n<CodeDemo title=\"Custom Value\" highlightedLines=\"8\" files={autocompleteContent.customValue} />\n\n### Custom Selector Icon\n\nBy default, `Autocomplete` uses a `chevron-down` icon as the selector icon which rotates when the autocomplete is open. You can\ncustomize this icon by passing a custom one to the `selectorIcon` property.\n\n<CodeDemo\n  title=\"Custom Selector Icon\"\n  highlightedLines=\"15\"\n  files={autocompleteContent.customSelectorIcon}\n/>\n\n> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.\n\n### Without Scroll Shadow\n\nAutocomplete component uses the [ScrollShadow](/docs/components/scroll-shadow) under the hood to show a shadow when the autocomplete content is scrollable.\nYou can disable this shadow by passing using the `scrollShadowProps` property.\n\n<CodeDemo\n  title=\"Without Scroll Shadow\"\n  highlightedLines=\"13-15\"\n  files={autocompleteContent.withoutScrollShadow}\n/>\n\n> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.\n\n### With Description\n\nYou can add a description to the autocomplete by passing the `description` property.\n\n<CodeDemo title=\"With Description\" highlightedLines=\"10\" files={autocompleteContent.description} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid autocomplete.\n\n<CodeDemo\n  title=\"With Error Message\"\n  highlightedLines=\"16-18\"\n  files={autocompleteContent.errorMessage}\n/>\n\n### Events\n\nThe `Autocomplete` component supports selection via mouse, keyboard, and touch. You can handle all of these\nvia the `onSelectionChange` prop. `Autocomplete` will pass the selected key to the onSelectionChange handler.\nAdditionally, ComboBox accepts an `onInputChange` prop which is triggered whenever the value is edited by the user,\nwhether through typing or option selection.\n\nThe example below uses `onSelectionChange` and `onInputChange` to update the selection and input value stored in\nReact state.\n\n<CodeDemo title=\"Events\" highlightedLines=\"25-26\" files={autocompleteContent.events} />\n\n### Controlled\n\nYou can use the `selectedKey` and `onSelectionChange` properties to control the select value.\n\n<CodeDemo\n  title=\"Controlled with onSelectionChange\"\n  highlightedLines=\"15-16\"\n  files={autocompleteContent.controlled}\n/>\n\n### Fully Controlled\n\nBy passing in `inputValue`, `selectedKey`, and `items` to the `Autocomplete` you can control exactly what your `Autocomplete` should display.\n\nThe following example shows how you would create a controlled `Autocomplete`, controlling everything from the selected value\n`selectedKey` to the combobox options `items`.\n\nWe recommend using the `useFilter` hook from [@react-aria/i18n](https://react-spectrum.adobe.com/react-aria/useFilter.html#usefilter) to manage the filtering of the items.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @react-aria/i18n\",\n    yarn: \"yarn add @react-aria/i18n\",\n    pnpm: \"pnpm add @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {useFilter} from \"@react-aria/i18n\";\n```\n\n<Spacer y={4} />\n\n<CodeDemo\n  title=\"Fully Controlled\"\n  showPreview={false}\n  showOpenInCodeSandbox={false}\n  highlightedLines=\"63-64,67,69-71\"\n  files={autocompleteContent.fullyControlled}\n/>\n\n> **Note**: It is important to note that you don't have to control every single aspect of a `Autocomplete`. If you decide to only control a single property of the `Autocomplete`, be sure to provide the change handler for that prop as well e.g. controlling `selectedKey` would require `onSelectionChange`.\n\n### Custom Items\n\nYou can customize the autocomplete items by modifying the `AutocompleteItem` children.\n\n<CodeDemo title=\"Custom Items\" files={autocompleteContent.customItems} />\n\n### Custom Empty Content Message\n\nBy default, a message `No results found.` will be shown if there is no result matching a query with your filter. You can customize the empty content message by modifying the `emptyContent` in `listboxProps`.\n\n<CodeDemo title=\"Custom Empty Content Message\" files={autocompleteContent.customEmptyContentMessage} />\n\n### Custom Filtering\n\nBy default, `Autocomplete` uses a `\"contains\"` function from [useFilter](https://react-spectrum.adobe.com/react-aria/useFilter.html) to filter the\nlist of options. This can be overridden using the `defaultFilter` prop, or by using the `items` prop to control the\nfiltered list. When `items` is provided rather than `defaultItems`, `Autocomplete` does no filtering of its own.\n\nThe following example uses the `defaultFilter` prop to filter the list of options using a custom filter function.\n\n<CodeDemo\n  title=\"Fully Controlled\"\n  highlightedLines=\"22\"\n  files={autocompleteContent.customFiltering}\n/>\n\n### Asynchronous Filtering\n\nAutocomplete supports asynchronous filtering, in the example below we are using the [useAsyncList](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) function\nfrom [react-aria](https://react-spectrum.adobe.com) to handle asynchronous loading and filtering of data from a server.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @react-stately/data\",\n    yarn: \"yarn add @react-stately/data\",\n    pnpm: \"pnpm add @react-stately/data\",\n  }}\n/>\n\n```jsx\nimport {useAsyncList} from \"@react-stately/data\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo\n  typescriptStrict={true}\n  title=\"Asynchronous Filtering\"\n  showPreview={false}\n  showOpenInCodeSandbox={false}\n  highlightedLines=\"27-29,33\"\n  files={autocompleteContent.asyncFiltering}\n/>\n\n### Asynchronous Loading\n\nAutocomplete supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.\n\nThe `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @nextui-org/use-infinite-scroll\",\n    yarn: \"yarn add @nextui-org/use-infinite-scroll\",\n    pnpm: \"pnpm add @nextui-org/use-infinite-scroll\",\n  }}\n/>\n\n```jsx\nimport {useInfiniteScroll} from \"@nextui-org/use-infinite-scroll\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo\n  showPreview={false}\n  showOpenInCodeSandbox={false}\n  typescriptStrict={true}\n  title=\"Asynchronous Loading\"\n  highlightedLines=\"21-22,25,27\"\n  files={autocompleteContent.asyncLoadingItems}\n/>\n\n### With Sections\n\nYou can use the `AutocompleteSection` component to group autocomplete items.\n\n<CodeDemo title=\"With Sections\" files={autocompleteContent.sections} />\n\n### Custom Sections Style\n\nYou can customize the sections style by using the `classNames` property of the `AutocompleteSection` component.\n\n<CodeDemo title=\"Custom Sections Style\" files={autocompleteContent.customSectionsStyle} />\n\n### Customizing the Autocomplete\n\nYou can customize any slot of the autocomplete by using the `classNames` property. Autocomplete\ncomponent also provides the [popoverProps](/docs/components/popover#api), [listboxProps](/docs/components/listbox#api), [inputProps](/docs/components/input#api)\nproperties to customize the popover, listbox and input components.\n\n<CodeDemo title=\"Custom Styles\" files={autocompleteContent.customStyles} />\n\n## Slots\n\n- **base**: The main wrapper of the autocomplete. This wraps the input and popover components.\n- **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.\n- **listbox**: The listbox component. This is the component that wraps the autocomplete items.\n- **popoverContent**: The popover content slot. Use this to modify the popover content styles.\n- **endContentWrapper**: The wrapper of the end content. This wraps the clear button and selector button.\n- **clearButton**: The clear button slot.\n- **selectorButton**: The selector button slot.\n\n## Data Attributes\n\n`Autocomplete` has the following attributes on the `base` element:\n\n- **data-invalid**:\n  When the autocomplete is invalid. Based on `isInvalid` prop.\n- **data-open**:\n  Indicates if the autocomplete's popover is open.\n\n`Autocomplete` has the following attributes on the `selectorButton` element:\n\n- **data-open**:\n  Indicates if the autocomplete's popover is open.\n\n`Autocomplete` has the following attributes on the `clearButton` element:\n\n- **data-visible**:\n  Indicates if the autocomplete's clear button is visible. By default it is visible when hovering the autocomplete and\n  when the autocomplete has a value (desktop), or when the autocomplete has a value (mobile).\n\n`AutocompleteItem` has the following attributes on the `base` element:\n\n- **data-disabled**:\n  When the autocomplete item is disabled. Based on autocomplete `disabledKeys` prop.\n- **data-selected**:\n  When the autocomplete item is selected. Based on autocomplete `selectedKey` prop.\n- **data-hover**:\n  When the autocomplete item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-pressed**:\n  When the autocomplete item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n- **data-focus**:\n  When the autocomplete item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the autocomplete item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Support for filtering a list of options by typing\n- Support for selecting a single option\n- Support for disabled options\n- Support for groups of items in sections\n- Support for custom user input values\n- Support for controlled and uncontrolled options, selection, input value, and open state\n- Support for custom filter functions\n- Async loading and infinite scrolling support\n- Support for virtualized scrolling for performance with long lists\n- Exposed to assistive technology as a combobox with ARIA\n- Labeling support for accessibility\n- Required and invalid states exposed to assistive technology via ARIA\n- Support for mouse, touch, and keyboard interactions\n- Keyboard support for opening the combo box list box using the arrow keys, including automatically focusing the first or last item accordingly\n- Support for opening the list box when typing, on focus, or manually\n- Handles virtual clicks on the input from touch screen readers to toggle the list box\n- Virtual focus management for combo box list box option navigation\n- Hides elements outside the input and list box from assistive technology while the list box is open in a portal\n- Custom localized announcements for option focusing, filtering, and selection using an ARIA live region to work around VoiceOver bugs\n- Support for description and error message help text linked to the input via ARIA\n\n<Spacer y={4} />\n\n## API\n\n### Autocomplete Props\n\n| Attribute                   | Type                                                                                                                                  | Description                                                                                                                                                   | Default                  |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ |\n| children\\*                  | `ReactNode[]`                                                                                                                         | The children to render. Usually a list of `AutocompleteItem` and `AutocompleteSection` elements.                                                              | -                        |\n| label                       | `ReactNode`                                                                                                                           | The content to display as the label.                                                                                                                          | -                        |\n| name                        | `string`                                                                                                                              | The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname). | -                        |\n| variant                     | `flat` \\| `bordered` \\| `faded` \\| `underlined`                                                                                       | The variant of the Autocomplete.                                                                                                                              | `flat`                   |\n| color                       | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                                                           | The color of the Autocomplete.                                                                                                                                | `default`                |\n| size                        | `sm` \\| `md` \\| `lg`                                                                                                                  | The size of the Autocomplete.                                                                                                                                 | `md`                     |\n| radius                      | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                                                                              | The radius of the Autocomplete.                                                                                                                               | -                        |\n| items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items. (controlled)                                                                                                                  | -                        |\n| defaultItems                | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items (uncontrolled).                                                                                                                | -                        |\n| inputValue                  | `string`                                                                                                                              | The value of the Autocomplete input (controlled).                                                                                                             | -                        |\n| defaultInputValue           | `string`                                                                                                                              | The value of the Autocomplete input (uncontrolled).                                                                                                           | -                        |\n| allowsCustomValue           | `boolean`                                                                                                                             | Whether the Autocomplete allows a non-item matching input value to be set.                                                                                    | `false`                  |\n| allowsEmptyCollection       | `boolean`                                                                                                                             | Whether the autocomplete allows the menu to be open when the collection is empty.                                                                             | `true`                   |\n| shouldCloseOnBlur           | `boolean`                                                                                                                             | Whether the Autocomplete should close when the input is blurred.                                                                                              | `true`                   |\n| placeholder                 | `string`                                                                                                                              | Temporary text that occupies the text input when it is empty.                                                                                                 | -                        |\n| description                 | `ReactNode`                                                                                                                           | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                | -                        |\n| menuTrigger                 | `focus` \\| `input` \\| `manual`                                                                                                        | The action that causes the menu to open.                                                                                                                      | `focus`                  |\n| labelPlacement              | `inside` \\| `outside` \\| `outside-left`                                                                                               | The position of the label.                                                                                                                                    | `inside`                 |\n| selectedKey                 | `React.Key`                                                                                                                           | The currently selected key in the collection (controlled).                                                                                                    | -                        |\n| defaultSelectedKey          | `React.Key`                                                                                                                           | The initial selected key in the collection (uncontrolled).                                                                                                    | -                        |\n| disabledKeys                | `all` \\| `React.Key[]`                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                                                       | -                        |\n| errorMessage                | `ReactNode` \\| `((v: ValidationResult) => ReactNode)`                                                                                 | An error message to display below the field.                                                                                                                  | -                        |\n| validate                    | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ｜ true ｜ null ｜ undefined`                              | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -                        |\n| validationBehavior          | `native` \\| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                   |\n| startContent                | `ReactNode`                                                                                                                           | Element to be rendered in the left side of the Autocomplete.                                                                                                  | -                        |\n| endContent                  | `ReactNode`                                                                                                                           | Element to be rendered in the right side of the Autocomplete.                                                                                                 | -                        |\n| autoFocus                   | `boolean`                                                                                                                             | Whether the Autocomplete should be focused on render.                                                                                                         | `false`                  |\n| defaultFilter               | `(textValue: string, inputValue: string) => boolean`                                                                                  | The filter function used to determine if a option should be included in the Autocomplete list.                                                                | -                        |\n| filterOptions               | [Intl.CollatorOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator)            | The options used to create the collator used for filtering.                                                                                                   | `{ sensitivity: 'base'}` |\n| isReadOnly                  | `boolean`                                                                                                                             | Whether the Autocomplete is read only.                                                                                                                        | `false`                  |\n| isRequired                  | `boolean`                                                                                                                             | Whether the Autocomplete is required.                                                                                                                         | `false`                  |\n| isInvalid                   | `boolean`                                                                                                                             | Whether the Autocomplete is invalid.                                                                                                                          | `false`                  |\n| isDisabled                  | `boolean`                                                                                                                             | Whether the Autocomplete is disabled.                                                                                                                         | `false`                  |\n| fullWidth                   | `boolean`                                                                                                                             | Whether the input should take up the width of its parent.                                                                                                     | `true`                   |\n| selectorIcon                | `ReactNode`                                                                                                                           | The icon that represents the autocomplete open state. Usually a chevron icon.                                                                                 | -                        |\n| clearIcon                   | `ReactNode`                                                                                                                           | The icon to be used in the clear button. Usually a cross icon.                                                                                                | -                        |\n| showScrollIndicators        | `boolean`                                                                                                                             | Whether the scroll indicators should be shown when the listbox is scrollable.                                                                                 | `true`                   |\n| scrollRef                   | `React.RefObject<HTMLElement>`                                                                                                        | A ref to the scrollable element.                                                                                                                              | -                        |\n| inputProps                  | [InputProps](/docs/components/input#api)                                                                                              | Props to be passed to the Input component.                                                                                                                    | -                        |\n| popoverProps                | [PopoverProps](/docs/components/popover#api)                                                                                          | Props to be passed to the Popover component.                                                                                                                  | -                        |\n| listboxProps                | [ListboxProps](/docs/components/listbox#api)                                                                                          | Props to be passed to the Listbox component.                                                                                                                  | -                        |\n| scrollShadowProps           | [ScrollShadowProps](/docs/components/scroll-shadow#api)                                                                               | Props to be passed to the ScrollShadow component.                                                                                                             | -                        |\n| selectorButtonProps         | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the selector button.                                                                                                                    | -                        |\n| clearButtonProps            | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the clear button.                                                                                                                       | -                        |\n| isClearable                 | `boolean`                                                                                                                             | Whether the clear button should be shown.                                                                                                                     | `true`                   |\n| disableClearable            | `boolean`                                                                                                                             | Whether the clear button should be hidden. (**Deprecated**) Use `isClearable` instead.                                                                        | `false`                  |\n| disableAnimation            | `boolean`                                                                                                                             | Whether the Autocomplete should be animated.                                                                                                                  | `true`                   |\n| disableSelectorIconRotation | `boolean`                                                                                                                             | Whether the select should disable the rotation of the selector icon.                                                                                          | `false`                  |\n| classNames                  | `Record<\"base\"｜ \"listboxWrapper\"｜ \"listbox\"｜ \"popoverContent\" ｜ \"endContentWrapper\"｜ \"clearButton\" ｜ \"selectorButton\", string>` | Allows to set custom class names for the Autocomplete slots.                                                                                                  | -                        |\n\n### Autocomplete Events\n\n| Attribute         | Type                                                         | Description                                                                                                                                   |\n| ----------------- | ------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOpenChange      | `(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void` | Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu. |\n| onInputChange     | `(value: string) => void`                                    | Handler that is called when the Autocomplete input value changes.                                                                             |\n| onSelectionChange | `(key: React.Key) => void`                                   | Handler that is called when the Autocomplete selection changes.                                                                               |\n| onFocus           | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is focused.                                                                                |\n| onBlur            | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is blurred.                                                                                |\n| onFocusChange     | `(isFocused: boolean) => void`                               | Handler that is called when the Autocomplete input focus changes.                                                                             |\n| onKeyDown         | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is pressed.                                                                                                 |\n| onKeyUp           | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is released.                                                                                                |\n| onClose           | `() => void`                                                 | Handler that is called when the Autocomplete's Popover is closed.                                                                             |\n\n---\n\n### AutocompleteItem Props\n\nCheck the [ListboxItem](/docs/components/listbox#listboxitem-props) props.\n\n### AutocompleteItem Events\n\nCheck the [ListboxItem](/docs/components/listbox#listboxitem-events) events.\n\n### AutocompleteSection Props\n\nCheck the [ListboxSection](/docs/components/listbox#listboxsection-props) props.\n\n---\n\n### Types\n\n#### Menu Trigger Action\n\n```ts\ntype MenuTriggerAction = \"focus\" | \"input\" | \"manual\";\n```\n",
    "code": "var Component=(()=>{var U=Object.create;var d=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var Q=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports),X=(o,t)=>{for(var i in t)d(o,i,{get:t[i],enumerable:!0})},p=(o,t,i,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of _(t))!$.call(o,n)&&n!==i&&d(o,n,{get:()=>t[n],enumerable:!(l=Y(t,n))||l.enumerable});return o};var ee=(o,t,i)=>(i=o!=null?U(J(o)):{},p(t||!o||!o.__esModule?d(i,\"default\",{value:o,enumerable:!0}):i,o)),te=o=>p(d({},\"__esModule\",{value:!0}),o);var h=Q((Ht,u)=>{u.exports=_jsx_runtime});var Et={};X(Et,{default:()=>G,frontmatter:()=>Kt});var e=ee(h());var le=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,ae=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <Autocomplete \n        label=\"Select an animal\" \n        className=\"max-w-xs\" \n      >\n        {animals.map((animal) => (\n          <AutocompleteItem key={animal.value} value={animal.value}>\n            {animal.label}\n          </AutocompleteItem>\n        ))}\n      </Autocomplete>\n      <Autocomplete\n        label=\"Favorite Animal\"\n        placeholder=\"Search an animal\"\n        className=\"max-w-xs\"\n        defaultItems={animals}\n      >\n        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n    </div>\n  );\n}`,oe={\"/App.jsx\":ae,\"/data.js\":le},f={...oe};var ie=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,ne=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      defaultItems={animals}\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      className=\"max-w-xs\"\n    >\n      {(animal) => <AutocompleteItem key={animal.value}>{animal.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,re={\"/App.jsx\":ne,\"/data.js\":ie},g={...re};var ce=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,se=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      isDisabled\n      defaultItems={animals}\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      defaultSelectedKey=\"cat\"\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,de={\"/App.jsx\":se,\"/data.js\":ce},b={...de};var me=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,pe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      defaultItems={animals}\n      disabledKeys={[\"zebra\", \"tiger\", \"lion\", \"elephant\", \"crocodile\", \"whale\"]}\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,ue={\"/App.jsx\":pe,\"/data.js\":me},v={...ue};var he=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,fe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      isRequired\n      label=\"Favorite Animal\"\n      defaultItems={animals}\n      placeholder=\"Search an animal\"\n      defaultSelectedKey=\"cat\"\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,ge={\"/App.jsx\":fe,\"/data.js\":he},A={...ge};var be=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,ve=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const sizes = [\"sm\", \"md\", \"lg\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {sizes.map((size) => (\n        <div key={size} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <Autocomplete \n            size={size}\n            defaultItems={animals}\n            label=\"Select an animal\" \n            className=\"max-w-xs\" \n          >\n            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n          </Autocomplete>\n          <Autocomplete\n            size={size}\n            defaultItems={animals}\n            label=\"Favorite Animal\"\n            placeholder=\"Search an animal\"\n            className=\"max-w-xs\"\n          >\n            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n          </Autocomplete>\n        </div>\n      ))}  \n    </div>  \n  );\n}`,Ae={\"/App.jsx\":ve,\"/data.js\":be},y={...Ae};var ye=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,xe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const colors = [\n    \"default\",\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n  ];\n\n  return (\n    <div className=\"w-full flex flex-row flex-wrap gap-4\">\n      {colors.map((color) => (\n        <Autocomplete\n          key={color}\n          color={color}\n          defaultItems={animals}\n          label=\"Favorite Animal\"\n          placeholder=\"Search an animal\"\n          defaultSelectedKey={\"cat\"}\n          className=\"max-w-xs\"\n        >\n          {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n        </Autocomplete>\n      ))}  \n    </div>  \n  );\n}`,we={\"/App.jsx\":xe,\"/data.js\":ye},x={...we};var Ie=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,ke=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <Autocomplete \n            variant={variant}\n            defaultItems={animals}\n            label=\"Select an animal\" \n            className=\"max-w-xs\" \n          >\n            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n          </Autocomplete>\n          <Autocomplete\n            variant={variant}\n            label=\"Favorite Animal\"\n            placeholder=\"Search an animal\"\n            className=\"max-w-xs\"\n          >\n            {animals.map((animal) => (\n              <AutocompleteItem key={animal.value} value={animal.value}>\n                {animal.label}\n              </AutocompleteItem>\n            ))}\n          </Autocomplete>\n        </div>\n      ))}  \n    </div>  \n  );\n}`,Se={\"/App.jsx\":ke,\"/data.js\":Ie},w={...Se};var Te=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Ce=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const placements = [\n    \"inside\",\n    \"outside\",\n    \"outside-left\",\n  ];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-default-500 text-small\">Without placeholder</h3>\n        <div className=\"flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          {placements.map((placement) => (\n            <Autocomplete\n              defaultItems={animals}\n              labelPlacement={placement}\n              label=\"Favorite Animal\"\n              className=\"max-w-xs\"\n            >\n              {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n            </Autocomplete>\n          ))}\n        </div>\n      </div>  \n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-default-500 text-small\">With placeholder</h3>\n        <div className=\"flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          {placements.map((placement) => (\n            <Autocomplete\n              labelPlacement={placement}\n              label=\"Favorite Animal\"\n              placeholder=\"Search an animal\"\n              className=\"max-w-xs\"\n            >\n              {animals.map((animal) => (\n                <AutocompleteItem key={animal.value} value={animal.value}>\n                  {animal.label}\n                </AutocompleteItem>\n              ))}\n            </Autocomplete>\n          ))}\n        </div>\n      </div>  \n    </div>  \n  );\n}`,Le={\"/App.jsx\":Ce,\"/data.js\":Te},I={...Le};var je=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Pe=`export const PetIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M19.0803 15.7203C18.4903 12.1903 15.1003 9.32031 11.5203 9.32031C7.63028 9.32031 4.21028 12.4703 3.88028 16.3503C3.75028 17.8503 4.23028 19.2703 5.22028 20.3403C6.20028 21.4103 7.58028 22.0003 9.08028 22.0003H13.7603C15.4503 22.0003 16.9303 21.3403 17.9403 20.1503C18.9503 18.9603 19.3503 17.3803 19.0803 15.7203Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M10.2796 7.86C11.8978 7.86 13.2096 6.54819 13.2096 4.93C13.2096 3.31181 11.8978 2 10.2796 2C8.66141 2 7.34961 3.31181 7.34961 4.93C7.34961 6.54819 8.66141 7.86 10.2796 7.86Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M16.94 9.02844C18.2876 9.02844 19.38 7.93601 19.38 6.58844C19.38 5.24086 18.2876 4.14844 16.94 4.14844C15.5924 4.14844 14.5 5.24086 14.5 6.58844C14.5 7.93601 15.5924 9.02844 16.94 9.02844Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M20.5496 12.9313C21.6266 12.9313 22.4996 12.0582 22.4996 10.9812C22.4996 9.90429 21.6266 9.03125 20.5496 9.03125C19.4727 9.03125 18.5996 9.90429 18.5996 10.9812C18.5996 12.0582 19.4727 12.9313 20.5496 12.9313Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M3.94 10.9816C5.28757 10.9816 6.38 9.88914 6.38 8.54156C6.38 7.19399 5.28757 6.10156 3.94 6.10156C2.59243 6.10156 1.5 7.19399 1.5 8.54156C1.5 9.88914 2.59243 10.9816 3.94 10.9816Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);`,qe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {PetIcon} from \"./PetIcon\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      variant=\"bordered\"\n      defaultItems={animals}\n      startContent={<PetIcon className=\"text-xl\" />}\n      defaultSelectedKey=\"cat\"\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Ne={\"/App.jsx\":qe,\"/PetIcon.jsx\":Pe,\"/data.js\":je},k={...Ne};var De=`import {Autocomplete, AutocompleteItem, Avatar} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      label=\"Select country\"\n    >\n      <AutocompleteItem\n        key=\"argentina\"\n        startContent={<Avatar alt=\"Argentina\" className=\"w-6 h-6\" src=\"https://flagcdn.com/ar.svg\" />}\n      >\n        Argentina\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"venezuela\"\n        startContent={<Avatar alt=\"Venezuela\" className=\"w-6 h-6\" src=\"https://flagcdn.com/ve.svg\" />}\n      >\n        Venezuela\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"brazil\"\n        startContent={<Avatar alt=\"Brazil\" className=\"w-6 h-6\" src=\"https://flagcdn.com/br.svg\" />}\n      >\n        Brazil\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"switzerland\"\n        startContent={\n          <Avatar alt=\"Switzerland\" className=\"w-6 h-6\" src=\"https://flagcdn.com/ch.svg\" />\n        }\n      >\n        Switzerland\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"germany\"\n        startContent={<Avatar alt=\"Germany\" className=\"w-6 h-6\" src=\"https://flagcdn.com/de.svg\" />}\n      >\n        Germany\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"spain\"\n        startContent={<Avatar alt=\"Spain\" className=\"w-6 h-6\" src=\"https://flagcdn.com/es.svg\" />}\n      >\n        Spain\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"france\"\n        startContent={<Avatar alt=\"France\" className=\"w-6 h-6\" src=\"https://flagcdn.com/fr.svg\" />}\n      >\n        France\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"italy\"\n        startContent={<Avatar alt=\"Italy\" className=\"w-6 h-6\" src=\"https://flagcdn.com/it.svg\" />}\n      >\n        Italy\n      </AutocompleteItem>\n      <AutocompleteItem\n        key=\"mexico\"\n        startContent={<Avatar alt=\"Mexico\" className=\"w-6 h-6\" src=\"https://flagcdn.com/mx.svg\" />}\n      >\n        Mexico\n      </AutocompleteItem>\n    </Autocomplete>\n  );\n}`,ze={\"/App.jsx\":De},S={...ze};var Fe=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Me=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete \n      allowsCustomValue\n      label=\"Search an animal\" \n      variant=\"bordered\"\n      className=\"max-w-xs\" \n      defaultItems={animals}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Re={\"/App.jsx\":Me,\"/data.js\":Fe},T={...Re};var We=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Oe=`export const SelectorIcon = (props) => (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"1.5\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" stroke=\"none\" />\n      <path d=\"M8 9l4 -4l4 4\" />\n      <path d=\"M16 15l-4 4l-4 -4\" />\n    </svg>\n);`,Ve=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {SelectorIcon} from \"./SelectorIcon\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      defaultItems={animals}\n      labelPlacement=\"outside\"\n      className=\"max-w-xs\"\n      disableSelectorIconRotation\n      selectorIcon={<SelectorIcon />}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Ke={\"/App.jsx\":Ve,\"/data.js\":We,\"/SelectorIcon.jsx\":Oe},C={...Ke};var Ee=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Be=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      defaultSelectedKey=\"cat\"\n      defaultItems={animals}\n      className=\"max-w-xs\"\n      scrollShadowProps={{\n        isEnabled: false\n      }}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,He={\"/App.jsx\":Be,\"/data.js\":Ee},L={...He};var Ze=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Ge=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      description=\"The second most popular pet in the world\"\n      defaultItems={animals}\n      defaultSelectedKey=\"cat\"\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Ue={\"/App.jsx\":Ge,\"/data.js\":Ze},j={...Ue};var Ye=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,_e=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n  const [touched, setTouched] = React.useState(false);\n\n  const isValid = value === \"cat\";\n\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      variant=\"bordered\"\n      placeholder=\"Search an animal\"\n      description=\"The second most popular pet in the world\"\n      errorMessage={isValid || !touched ? \"\" : \"You must select a cat\"}\n      isInvalid={isValid || !touched ? false : true}\n      defaultItems={animals}\n      selectedKey={value}\n      className=\"max-w-xs\"\n      onSelectionChange={setValue}\n      onClose={() => setTouched(true)}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Je={\"/App.jsx\":_e,\"/data.js\":Ye},P={...Je};var $e=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Qe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\n\nexport default function App() {\n  const [value, setValue] = React.useState('');\n  const [selectedKey, setSelectedKey] = React.useState(null);\n\n  const onSelectionChange = (id) => {\n    setSelectedKey(id);\n  };\n  \n  const onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <div className=\"flex w-full flex-col\">\n      <Autocomplete \n        label=\"Search an animal\" \n        variant=\"bordered\"\n        defaultItems={animals}\n        className=\"max-w-xs\" \n        allowsCustomValue={true}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n      <p className=\"mt-1 text-small text-default-500\">Current selected animal: {selectedKey}</p>\n      <p className=\"text-small text-default-500\">Current input text: {value}</p>\n    </div>\n  );\n}`,Xe=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<string>('');\n  const [selectedKey, setSelectedKey] = React.useState<React.Key | null>(null);\n\n  const onSelectionChange = (key: React.Key) => {\n    setSelectedKey(key);\n  };\n  \n  const onInputChange = (value: string) => {\n    setValue(value)\n  };\n\n  return (\n    <div className=\"flex w-full flex-col\">\n      <Autocomplete \n        label=\"Search an animal\" \n        variant=\"underlined\"\n        defaultItems={animals}\n        className=\"max-w-xs\" \n        allowsCustomValue={true}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n      <p className=\"mt-1 text-small text-default-500\">Current selected animal: {selectedKey}</p>\n      <p className=\"text-small text-default-500\">Current input text: {value}</p>\n    </div>\n  );\n}`,et={\"/App.jsx\":Qe,\"/data.js\":$e},tt={\"/App.tsx\":Xe},q={...et,...tt};var N=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,lt=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<React.Key>(\"cat\");\n\n  return (\n    <div className=\"flex w-full max-w-xs flex-col gap-2\">\n      <Autocomplete\n        label=\"Favorite Animal\"\n        variant=\"bordered\"\n        defaultItems={animals}\n        placeholder=\"Search an animal\"\n        className=\"max-w-xs\"\n        selectedKey={value}\n        onSelectionChange={setValue}\n      >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n      <p className=\"text-default-500 text-small\">Selected: {value}</p>\n    </div>\n  );\n}`,at=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"cat\");\n\n  return (\n    <div className=\"flex w-full max-w-xs flex-col gap-2\">\n      <Autocomplete\n        label=\"Favorite Animal\"\n        variant=\"bordered\"\n        defaultItems={animals}\n        placeholder=\"Search an animal\"\n        className=\"max-w-xs\"\n        selectedKey={value}\n        onSelectionChange={setValue}\n      >\n        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n      <p className=\"text-default-500 text-small\">Selected: {value}</p>\n    </div>\n  );\n}`,ot={\"/App.jsx\":at,\"/data.js\":N},it={\"/App.tsx\":lt,\"/data.js\":N},D={...ot,...it};var nt=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,rt=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {useFilter} from \"@react-aria/i18n\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  // Store Autocomplete input value, selected option, open state, and items\n  // in a state tracker\n  const [fieldState, setFieldState] = React.useState({\n    selectedKey: \"\",\n    inputValue: \"\",\n    items: animals,\n  });\n\n  // Implement custom filtering logic and control what items are\n  // available to the Autocomplete.\n  const {startsWith} = useFilter({sensitivity: \"base\"});\n\n  // Specify how each of the Autocomplete values should change when an\n  // option is selected from the list box\n  const onSelectionChange = (key) => {\n    setFieldState((prevState) => {\n      let selectedItem = prevState.items.find((option) => option.value === key);\n\n      return {\n        inputValue: selectedItem?.label || \"\",\n        selectedKey: key,\n        items: animals.filter((item) => startsWith(item.label, selectedItem?.label || \"\")),\n      };\n    });\n  };\n\n  // Specify how each of the Autocomplete values should change when the input\n  // field is altered by the user\n  const onInputChange = (value) => {\n    setFieldState((prevState) => ({\n      inputValue: value,\n      selectedKey: value === \"\" ? null : prevState.selectedKey,\n      items: animals.filter((item) => startsWith(item.label, value)),\n    }));\n  };\n\n  // Show entire list if user opens the menu manually\n  const onOpenChange = (isOpen, menuTrigger) => {\n    if (menuTrigger === \"manual\" && isOpen) {\n      setFieldState((prevState) => ({\n        inputValue: prevState.inputValue,\n        selectedKey: prevState.selectedKey,\n        items: animals,\n      }));\n    }\n  };\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      inputValue={fieldState.inputValue}\n      items={fieldState.items}\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      selectedKey={fieldState.selectedKey}\n      variant=\"bordered\"\n      onInputChange={onInputChange}\n      onOpenChange={onOpenChange}\n      onSelectionChange={onSelectionChange}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,ct=`import {Autocomplete, AutocompleteItem, MenuTriggerAction} from \"@nextui-org/react\";\nimport {useFilter} from \"@react-aria/i18n\";\nimport {animals} from \"./data\";\n\ntype FieldState = {\n  selectedKey: React.Key | null;\n  inputValue: string;\n  items: typeof animals;\n};\n\nexport default function App() {\n  // Store Autocomplete input value, selected option, open state, and items\n  // in a state tracker\n  const [fieldState, setFieldState] = React.useState<FieldState>({\n    selectedKey: \"\",\n    inputValue: \"\",\n    items: animals,\n  });\n\n  // Implement custom filtering logic and control what items are\n  // available to the Autocomplete.\n  const {startsWith} = useFilter({sensitivity: \"base\"});\n\n  // Specify how each of the Autocomplete values should change when an\n  // option is selected from the list box\n  const onSelectionChange = (key: React.Key) => {\n    setFieldState((prevState) => {\n      let selectedItem = prevState.items.find((option) => option.value === key);\n\n      return {\n        inputValue: selectedItem?.label || \"\",\n        selectedKey: key,\n        items: animals.filter((item) => startsWith(item.label, selectedItem?.label || \"\")),\n      };\n    });\n  };\n\n  // Specify how each of the Autocomplete values should change when the input\n  // field is altered by the user\n  const onInputChange = (value: string) => {\n    setFieldState((prevState) => ({\n      inputValue: value,\n      selectedKey: value === \"\" ? null : prevState.selectedKey,\n      items: animals.filter((item) => startsWith(item.label, value)),\n    }));\n  };\n\n  // Show entire list if user opens the menu manually\n  const onOpenChange = (isOpen: boolean, menuTrigger: MenuTriggerAction) => {\n    if (menuTrigger === \"manual\" && isOpen) {\n      setFieldState((prevState) => ({\n        inputValue: prevState.inputValue,\n        selectedKey: prevState.selectedKey,\n        items: animals,\n      }));\n    }\n  };\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      inputValue={fieldState.inputValue}\n      items={fieldState.items}\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      selectedKey={fieldState.selectedKey}\n      variant=\"bordered\"\n      onInputChange={onInputChange}\n      onOpenChange={onOpenChange}\n      onSelectionChange={onSelectionChange}\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,st={\"/App.jsx\":rt,\"/data.js\":nt},dt={\"/App.tsx\":ct},z={...st,...dt};var mt=`export const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png\",\n    email: \"brian.kim@example.com\",\n    status: \"active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png\",\n    email: \"mia.robinson@example.com\",\n  },\n];`,pt=`import {Autocomplete, AutocompleteItem, Avatar} from \"@nextui-org/react\";\nimport {users} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      defaultItems={users}\n      variant=\"bordered\"\n      label=\"Assigned to\"\n      placeholder=\"Select a user\"\n      labelPlacement=\"inside\"\n      className=\"max-w-xs\"\n    >\n      {(user) => (\n        <AutocompleteItem key={user.id} textValue={user.name}>\n          <div className=\"flex gap-2 items-center\">\n            <Avatar alt={user.name} className=\"flex-shrink-0\" size=\"sm\" src={user.avatar} />\n            <div className=\"flex flex-col\">\n              <span className=\"text-small\">{user.name}</span>\n              <span className=\"text-tiny text-default-400\">{user.email}</span>\n            </div>\n          </div>\n        </AutocompleteItem>\n      )}\n    </Autocomplete>\n  );\n}`,ut={\"/App.jsx\":pt,\"/data.js\":mt},F={...ut};var ht=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,ft=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const myFilter = (textValue, inputValue) => {\n    if (inputValue.length === 0) {\n      return true;\n    }\n\n    // Normalize both strings so we can slice safely\n    // take into account the ignorePunctuation option as well...\n    textValue = textValue.normalize(\"NFC\").toLocaleLowerCase();\n    inputValue = inputValue.normalize(\"NFC\").toLocaleLowerCase();\n\n    return textValue.slice(0, inputValue.length) === inputValue;\n  };\n\n  return (\n    <Autocomplete\n      allowsCustomValue\n      className=\"max-w-xs\"\n      defaultFilter={myFilter}\n      defaultItems={animals}\n      label=\"Search an animal\"\n      variant=\"bordered\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,gt=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  const myFilter = (textValue: string, inputValue: string) => {\n    if (inputValue.length === 0) {\n      return true;\n    }\n\n    // Normalize both strings so we can slice safely\n    // take into account the ignorePunctuation option as well...\n    textValue = textValue.normalize(\"NFC\").toLocaleLowerCase();\n    inputValue = inputValue.normalize(\"NFC\").toLocaleLowerCase();\n\n    return textValue.slice(0, inputValue.length) === inputValue;\n  };\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      defaultFilter={myFilter}\n      defaultItems={animals}\n      label=\"Search an animal\"\n      variant=\"bordered\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,bt={\"/App.jsx\":ft,\"/data.js\":ht},vt={\"/App.tsx\":gt},M={...bt,...vt};var At=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {useAsyncList} from \"@react-stately/data\";\n\nexport default function App() {\n  let list = useAsyncList({\n    async load({signal, filterText}) {\n      let res = await fetch(\\`https://swapi.py4e.com/api/people/?search=\\${filterText}\\`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n      };\n    },\n  });\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      inputValue={list.filterText}\n      isLoading={list.isLoading}\n      items={list.items}\n      label=\"Select a character\"\n      placeholder=\"Type to search...\"\n      variant=\"bordered\"\n      onInputChange={list.setFilterText}\n    >\n      {(item) => (\n        <AutocompleteItem key={item.name} className=\"capitalize\">\n          {item.name}\n        </AutocompleteItem>\n      )}\n    </Autocomplete>\n  );\n}`,yt=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {useAsyncList} from \"@react-stately/data\";\n\ntype SWCharacter = {\n  name: string;\n  height: string;\n  mass: string;\n  birth_year: string;\n};\n\nexport default function App() {\n  let list = useAsyncList<SWCharacter>({\n    async load({signal, filterText}) {\n      let res = await fetch(\\`https://swapi.py4e.com/api/people/?search=\\${filterText}\\`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n      };\n    },\n  });\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      inputValue={list.filterText}\n      isLoading={list.isLoading}\n      items={list.items}\n      label=\"Select a character\"\n      placeholder=\"Type to search...\"\n      variant=\"bordered\"\n      onInputChange={list.setFilterText}\n    >\n      {(item) => (\n        <AutocompleteItem key={item.name} className=\"capitalize\">\n          {item.name}\n        </AutocompleteItem>\n      )}\n    </Autocomplete>\n  );\n}`,xt={\"/App.jsx\":At},wt={\"/App.tsx\":yt},R={...xt,...wt};var It=`export type Pokemon = {\n  name: string;\n  url: string;\n};\n\nexport type UsePokemonListProps = {\n  /** Delay to wait before fetching more items */\n  fetchDelay?: number;\n};\n\nexport function usePokemonList({fetchDelay = 0}: UsePokemonListProps = {}) {\n  const [items, setItems] = React.useState<Pokemon[]>([]);\n  const [hasMore, setHasMore] = React.useState(true);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [offset, setOffset] = React.useState(0);\n  const limit = 10; // Number of items per page, adjust as necessary\n\n  const loadPokemon = async (currentOffset: number) => {\n    const controller = new AbortController();\n    const {signal} = controller;\n\n    try {\n      setIsLoading(true);\n\n      if (offset > 0) {\n        // Delay to simulate network latency\n        await new Promise((resolve) => setTimeout(resolve, fetchDelay));\n      }\n\n      let res = await fetch(\n        \\`https://pokeapi.co/api/v2/pokemon?offset=\\${currentOffset}&limit=\\${limit}\\`,\n        {signal},\n      );\n\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n\n      let json = await res.json();\n\n      setHasMore(json.next !== null);\n      // Append new results to existing ones\n      setItems((prevItems) => [...prevItems, ...json.results]);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"Fetch aborted\");\n      } else {\n        console.error(\"There was an error with the fetch operation:\", error);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadPokemon(offset);\n  }, []);\n\n  const onLoadMore = () => {\n    const newOffset = offset + limit;\n\n    setOffset(newOffset);\n    loadPokemon(newOffset);\n  };\n\n  return {\n    items,\n    hasMore,\n    isLoading,\n    onLoadMore,\n  };\n}\n\n`,kt=`export function usePokemonList({fetchDelay = 0} = {}) {\n  const [items, setItems] = React.useState([]);\n  const [hasMore, setHasMore] = React.useState(true);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [offset, setOffset] = React.useState(0);\n  const limit = 10; // Number of items per page, adjust as necessary\n\n  const loadPokemon = async (currentOffset) => {\n    const controller = new AbortController();\n    const {signal} = controller;\n\n    try {\n      setIsLoading(true);\n\n      if (offset > 0) {\n        // Delay to simulate network latency\n        await new Promise((resolve) => setTimeout(resolve, fetchDelay));\n      }\n\n      let res = await fetch(\n        \\`https://pokeapi.co/api/v2/pokemon?offset=\\${currentOffset}&limit=\\${limit}\\`,\n        {signal},\n      );\n\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n\n      let json = await res.json();\n\n      setHasMore(json.next !== null);\n      // Append new results to existing ones\n      setItems((prevItems) => [...prevItems, ...json.results]);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"Fetch aborted\");\n      } else {\n        console.error(\"There was an error with the fetch operation:\", error);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadPokemon(offset);\n  }, []);\n\n  const onLoadMore = () => {\n    const newOffset = offset + limit;\n\n    setOffset(newOffset);\n    loadPokemon(newOffset);\n  };\n\n  return {\n    items,\n    hasMore,\n    isLoading,\n    onLoadMore,\n  };\n};`,W=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {useInfiniteScroll} from \"@nextui-org/use-infinite-scroll\";\nimport {usePokemonList} from \"./usePokemonList\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const {items, hasMore, isLoading, onLoadMore} = usePokemonList({fetchDelay: 1500});\n\n  const [, scrollerRef] = useInfiniteScroll({\n    hasMore,\n    isEnabled: isOpen,\n    shouldUseLoader: false, // We don't want to show the loader at the bottom of the list\n    onLoadMore,\n  });\n\n  return (\n    <Autocomplete\n      className=\"max-w-xs\"\n      variant=\"bordered\"\n      isLoading={isLoading}\n      defaultItems={items}\n      label=\"Pick a Pokemon\"\n      placeholder=\"Select a Pokemon\"\n      scrollRef={scrollerRef}\n      selectionMode=\"single\"\n      onOpenChange={setIsOpen}\n    >\n      {(item) => (\n        <AutocompleteItem key={item.name} className=\"capitalize\">\n          {item.name}\n        </AutocompleteItem>\n      )}\n    </Autocomplete>\n  );\n}`,St={\"/App.jsx\":W,\"/usePokemonList.js\":kt},Tt={\"/App.tsx\":W,\"/usePokemonList.ts\":It},O={...St,...Tt};var Ct=`import {Autocomplete, AutocompleteItem, AutocompleteSection} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      placeholder=\"Search an animal\"\n      className=\"max-w-xs\"\n    >\n      <AutocompleteSection showDivider title=\"Mammals\">\n        <AutocompleteItem key=\"Lion\">Lion</AutocompleteItem>\n        <AutocompleteItem key=\"Tiger\">Tiger</AutocompleteItem>\n        <AutocompleteItem key=\"Elephant\">Elephant</AutocompleteItem>\n        <AutocompleteItem key=\"Kangaroo\">Kangaroo</AutocompleteItem>\n        <AutocompleteItem key=\"Panda\">Panda</AutocompleteItem>\n        <AutocompleteItem key=\"Giraffe\">Giraffe</AutocompleteItem>\n        <AutocompleteItem key=\"Zebra\">Zebra</AutocompleteItem>\n        <AutocompleteItem key=\"Cheetah\">Cheetah</AutocompleteItem>\n      </AutocompleteSection>\n      <AutocompleteSection title=\"Birds\">\n        <AutocompleteItem key=\"Eagle\">Eagle</AutocompleteItem>\n        <AutocompleteItem key=\"Parrot\">Parrot</AutocompleteItem>\n        <AutocompleteItem key=\"Penguin\">Penguin</AutocompleteItem>\n        <AutocompleteItem key=\"Ostrich\">Ostrich</AutocompleteItem>\n        <AutocompleteItem key=\"Peacock\">Peacock</AutocompleteItem>\n        <AutocompleteItem key=\"Swan\">Swan</AutocompleteItem>\n        <AutocompleteItem key=\"Falcon\">Falcon</AutocompleteItem>\n        <AutocompleteItem key=\"Flamingo\">Flamingo</AutocompleteItem>\n      </AutocompleteSection>\n    </Autocomplete>\n  );\n}`,Lt={\"/App.jsx\":Ct},V={...Lt};var jt=`import {Autocomplete, AutocompleteItem, AutocompleteSection} from \"@nextui-org/react\";\n\nexport default function App() {\n  const headingClasses = \"flex w-full sticky top-1 z-20 py-1.5 px-2 bg-default-100 shadow-small rounded-small\";\n\n  return (\n    <Autocomplete\n      label=\"Favorite Animal\"\n      variant=\"bordered\"\n      placeholder=\"Search an animal\"\n      className=\"max-w-xs\"\n      scrollShadowProps={{\n        isEnabled: false,\n      }}\n    >\n      <AutocompleteSection \n        title=\"Mammals\"\n        classNames={{\n          heading: headingClasses,\n        }}\n      >\n        <AutocompleteItem key=\"Lion\">Lion</AutocompleteItem>\n        <AutocompleteItem key=\"Tiger\">Tiger</AutocompleteItem>\n        <AutocompleteItem key=\"Elephant\">Elephant</AutocompleteItem>\n        <AutocompleteItem key=\"Kangaroo\">Kangaroo</AutocompleteItem>\n        <AutocompleteItem key=\"Panda\">Panda</AutocompleteItem>\n        <AutocompleteItem key=\"Giraffe\">Giraffe</AutocompleteItem>\n        <AutocompleteItem key=\"Zebra\">Zebra</AutocompleteItem>\n        <AutocompleteItem key=\"Cheetah\">Cheetah</AutocompleteItem>\n      </AutocompleteSection>\n      <AutocompleteSection \n        title=\"Birds\"\n        classNames={{\n          heading: headingClasses,\n        }}\n      >\n        <AutocompleteItem key=\"Eagle\">Eagle</AutocompleteItem>\n        <AutocompleteItem key=\"Parrot\">Parrot</AutocompleteItem>\n        <AutocompleteItem key=\"Penguin\">Penguin</AutocompleteItem>\n        <AutocompleteItem key=\"Ostrich\">Ostrich</AutocompleteItem>\n        <AutocompleteItem key=\"Peacock\">Peacock</AutocompleteItem>\n        <AutocompleteItem key=\"Swan\">Swan</AutocompleteItem>\n        <AutocompleteItem key=\"Falcon\">Falcon</AutocompleteItem>\n        <AutocompleteItem key=\"Flamingo\">Flamingo</AutocompleteItem>\n      </AutocompleteSection>\n    </Autocomplete>\n  );\n}`,Pt={\"/App.jsx\":jt},K={...Pt};var qt=`export const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png\",\n    email: \"brian.kim@example.com\",\n    status: \"active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png\",\n    email: \"mia.robinson@example.com\",\n  },\n];`,Nt=`export const SearchIcon = ({\n  size = 24,\n  strokeWidth = 1.5,\n  width,\n  height,\n  ...props\n}) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height={height || size}\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width={width || size}\n    {...props}\n  >\n    <path\n      d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={strokeWidth}\n    />\n    <path\n      d=\"M22 22L20 20\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={strokeWidth}\n    />\n  </svg>\n);`,Dt=`import {Autocomplete, AutocompleteItem, Avatar, Button} from \"@nextui-org/react\";\nimport {SearchIcon} from \"./SearchIcon\";\nimport {users} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      classNames={{\n        base: \"max-w-xs\",\n        listboxWrapper: \"max-h-[320px]\",\n        selectorButton: \"text-default-500\"\n      }}\n      defaultItems={users}\n      inputProps={{\n        classNames: {\n          input: \"ml-1\",\n          inputWrapper: \"h-[48px]\",\n        },\n      }}\n      listboxProps={{\n        hideSelectedIcon: true,\n        itemClasses: {\n          base: [\n            \"rounded-medium\",\n            \"text-default-500\",\n            \"transition-opacity\",\n            \"data-[hover=true]:text-foreground\",\n            \"dark:data-[hover=true]:bg-default-50\",\n            \"data-[pressed=true]:opacity-70\",\n            \"data-[hover=true]:bg-default-200\",\n            \"data-[selectable=true]:focus:bg-default-100\",\n            \"data-[focus-visible=true]:ring-default-500\",\n          ],\n        },\n      }}\n      aria-label=\"Select an employee\"\n      placeholder=\"Enter employee name\"\n      popoverProps={{\n        offset: 10,\n        classNames: {\n          base: \"rounded-large\",\n          content: \"p-1 border-small border-default-100 bg-background\",\n        },\n      }}\n      startContent={<SearchIcon className=\"text-default-400\" strokeWidth={2.5} size={20} />}\n      radius=\"full\"\n      variant=\"bordered\"\n    >\n      {(item) => (\n        <AutocompleteItem key={item.id} textValue={item.name}>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-2 items-center\">\n              <Avatar alt={item.name} className=\"flex-shrink-0\" size=\"sm\" src={item.avatar} />\n              <div className=\"flex flex-col\">\n                <span className=\"text-small\">{item.name}</span>\n                <span className=\"text-tiny text-default-400\">{item.team}</span>\n              </div>\n            </div>\n            <Button\n              className=\"border-small mr-0.5 font-medium shadow-small\"\n              radius=\"full\"\n              size=\"sm\"\n              variant=\"bordered\"\n            >\n              Add\n            </Button>\n          </div>\n        </AutocompleteItem>\n      )}\n    </Autocomplete>\n  );\n}`,zt={\"/App.jsx\":Dt,\"/SearchIcon.jsx\":Nt,\"/data.js\":qt},E={...zt};var Ft=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Mt=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <Autocomplete\n        label=\"Favorite Animal\"\n        placeholder=\"Search an animal\"\n        className=\"max-w-xs\"\n        defaultItems={animals}\n        listboxProps={{\n            emptyContent: 'Your own empty content text.'\n        }}\n      >\n        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n      </Autocomplete>\n    </div>\n  );\n}`,Rt={\"/App.jsx\":Mt,\"/data.js\":Ft},B={...Rt};var Wt=`export const animals = [\n  {label: \"Cat\", value: \"cat\", description: \"The second most popular pet in the world\"},\n  {label: \"Dog\", value: \"dog\", description: \"The most popular pet in the world\"},\n  {label: \"Elephant\", value: \"elephant\", description: \"The largest land animal\"},\n  {label: \"Lion\", value: \"lion\", description: \"The king of the jungle\"},\n  {label: \"Tiger\", value: \"tiger\", description: \"The largest cat species\"},\n  {label: \"Giraffe\", value: \"giraffe\", description: \"The tallest land animal\"},\n  {\n    label: \"Dolphin\",\n    value: \"dolphin\",\n    description: \"A widely distributed and diverse group of aquatic mammals\",\n  },\n  {label: \"Penguin\", value: \"penguin\", description: \"A group of aquatic flightless birds\"},\n  {label: \"Zebra\", value: \"zebra\", description: \"A several species of African equids\"},\n  {\n    label: \"Shark\",\n    value: \"shark\",\n    description: \"A group of elasmobranch fish characterized by a cartilaginous skeleton\",\n  },\n  {\n    label: \"Whale\",\n    value: \"whale\",\n    description: \"Diverse group of fully aquatic placental marine mammals\",\n  },\n  {label: \"Otter\", value: \"otter\", description: \"A carnivorous mammal in the subfamily Lutrinae\"},\n  {label: \"Crocodile\", value: \"crocodile\", description: \"A large semiaquatic reptile\"},\n];`,Ot=`import {Autocomplete, AutocompleteItem} from \"@nextui-org/react\";\nimport {animals} from \"./data\";\n\nexport default function App() {\n  return (\n    <Autocomplete\n      isReadOnly\n      label=\"Favorite Animal\"\n      defaultItems={animals}\n      placeholder=\"Search an animal\"\n      defaultSelectedKey=\"cat\"\n      className=\"max-w-xs\"\n    >\n      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}\n    </Autocomplete>\n  );\n}`,Vt={\"/App.jsx\":Ot,\"/data.js\":Wt},H={...Vt};var a={usage:f,dynamic:g,disabled:b,disabledItems:v,required:A,sizes:y,colors:x,variants:w,labelPlacements:I,startContent:k,customValue:T,itemStartContent:S,customSelectorIcon:C,withoutScrollShadow:L,description:j,errorMessage:P,events:q,controlled:D,fullyControlled:z,customItems:F,customFiltering:M,asyncFiltering:R,asyncLoadingItems:O,sections:V,customSectionsStyle:K,customStyles:E,customEmptyContentMessage:B,readOnly:H};var Kt={title:\"Autocomplete\",description:\"An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\"};function Z(o){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...o.components},{CarbonAd:i,CodeDemo:l,ComponentLinks:n,ImportTabs:m,PackageManagers:s,Spacer:r}=t;return i||c(\"CarbonAd\",!0),l||c(\"CodeDemo\",!0),n||c(\"ComponentLinks\",!0),m||c(\"ImportTabs\",!0),s||c(\"PackageManagers\",!0),r||c(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"autocomplete\",children:\"Autocomplete\"}),`\n`,(0,e.jsx)(t.p,{children:\"An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.\"}),`\n`,(0,e.jsx)(n,{component:\"autocomplete\",reactAriaHook:\"useComboBox\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(s,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add autocomplete\",npm:\"npm install @nextui-org/autocomplete\",yarn:\"yarn add @nextui-org/autocomplete\",pnpm:\"pnpm add @nextui-org/autocomplete\",bun:\"bun add @nextui-org/autocomplete\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(t.p,{children:\"NextUI exports 3 autocomplete-related components:\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Autocomplete\"}),\": The main component, which is a wrapper for the other components.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"AutocompleteSection\"}),\": The component that contains a group of autocomplete items.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"AutocompleteItem\"}),\": The component that represents a autocomplete item.\"]}),`\n`]}),`\n`,(0,e.jsx)(m,{commands:{main:`import {\nAutocomplete,\nAutocompleteSection,\nAutocompleteItem\n} from \"@nextui-org/react\";`,individual:`import {\nAutocomplete,\nAutocompleteSection,\nAutocompleteItem\n} from \"@nextui-org/autocomplete\";`}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(l,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"dynamic-items\",children:\"Dynamic items\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Autocomplete follows the \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-stately/collections.html\",children:\"Collection Components API\"}),\", accepting both static and dynamic collections.\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Static\"}),\": The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Dynamic\"}),\": The example below can be used when the options come from an external data source such as an API call, or update over time.\"]}),`\n`]}),`\n`,(0,e.jsx)(l,{title:\"Dynamic items\",highlightedLines:\"8\",files:a.dynamic}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(l,{title:\"Disabled\",highlightedLines:\"8\",files:a.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled-items\",children:\"Disabled Items\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can disable specific items by using the \",(0,e.jsx)(t.code,{children:\"disabledKeys\"}),\" property.\"]}),`\n`,(0,e.jsx)(l,{title:\"Disabled Items\",highlightedLines:\"11\",files:a.disabledItems}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" property to the autocomplete, it will have a \",(0,e.jsx)(t.code,{children:\"danger\"}),` asterisk at\nthe end of the label and the autocomplete will be required.`]}),`\n`,(0,e.jsx)(l,{title:\"Required\",highlightedLines:\"8\",files:a.required}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isReadOnly\"}),` property to the Autocomplete, the Listbox will open to display\nall available options, but users won't be able to select any of the listed options.`]}),`\n`,(0,e.jsx)(l,{title:\"Read Only\",highlightedLines:\"8\",files:a.readOnly}),`\n`,(0,e.jsx)(t.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(l,{title:\"Sizes\",highlightedLines:\"13,21\",files:a.sizes}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(l,{title:\"Colors\",highlightedLines:\"20\",files:a.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(l,{title:\"Variants\",highlightedLines:\"13,21\",files:a.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placements\",children:\"Label Placements\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the label by setting the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"inside\"}),\", \",(0,e.jsx)(t.code,{children:\"outside\"}),\" or \",(0,e.jsx)(t.code,{children:\"outside-left\"}),\".\"]}),`\n`,(0,e.jsx)(l,{title:\"Label Placements\",highlightedLines:\"20,34\",files:a.labelPlacements}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": If the \",(0,e.jsx)(t.code,{children:\"label\"}),\" is not passed, the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property will be \",(0,e.jsx)(t.code,{children:\"outside\"}),\" by default.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"start-content\",children:\"Start Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and \",(0,e.jsx)(t.code,{children:\"endContent\"}),` properties to add content to the start and end of\nthe autocomplete.`]}),`\n`,(0,e.jsx)(l,{title:\"Start Content\",highlightedLines:\"13\",files:a.startContent}),`\n`,(0,e.jsx)(t.h3,{id:\"item-start--end-content\",children:\"Item Start & End Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Since the \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" component uses the \",(0,e.jsx)(t.a,{href:\"/docs/components/listbox\",children:\"Listbox\"}),` component under the hood, you can\nuse the `,(0,e.jsx)(t.code,{children:\"startContent\"}),\" and \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" properties of the \",(0,e.jsx)(t.code,{children:\"AutocompleteItem\"}),` component to add content to the start\nand end of the autocomplete item.`]}),`\n`,(0,e.jsx)(l,{title:\"Item Start Content\",files:a.itemStartContent}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-value\",children:\"Custom Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),` doesn't allow users to specify a value that doesn't exist in the list of options and will\nrevert the input value to the current selected value on blur. By specifying `,(0,e.jsx)(t.code,{children:\"allowsCustomValue\"}),`, this behavior is\nsuppressed and the user is free to enter any value within the field.`]}),`\n`,(0,e.jsx)(l,{title:\"Custom Value\",highlightedLines:\"8\",files:a.customValue}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-selector-icon\",children:\"Custom Selector Icon\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" uses a \",(0,e.jsx)(t.code,{children:\"chevron-down\"}),` icon as the selector icon which rotates when the autocomplete is open. You can\ncustomize this icon by passing a custom one to the `,(0,e.jsx)(t.code,{children:\"selectorIcon\"}),\" property.\"]}),`\n`,(0,e.jsx)(l,{title:\"Custom Selector Icon\",highlightedLines:\"15\",files:a.customSelectorIcon}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": Use the \",(0,e.jsx)(t.code,{children:\"disableSelectorIconRotation\"}),\" property to disable the rotation of the icon.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"without-scroll-shadow\",children:\"Without Scroll Shadow\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Autocomplete component uses the \",(0,e.jsx)(t.a,{href:\"/docs/components/scroll-shadow\",children:\"ScrollShadow\"}),` under the hood to show a shadow when the autocomplete content is scrollable.\nYou can disable this shadow by passing using the `,(0,e.jsx)(t.code,{children:\"scrollShadowProps\"}),\" property.\"]}),`\n`,(0,e.jsx)(l,{title:\"Without Scroll Shadow\",highlightedLines:\"13-15\",files:a.withoutScrollShadow}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": You can also use the \",(0,e.jsx)(t.code,{children:\"showScrollIndicators\"}),\" property to disable the scroll indicators.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a description to the autocomplete by passing the \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(l,{title:\"With Description\",highlightedLines:\"10\",files:a.description}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid autocomplete.\"]}),`\n`,(0,e.jsx)(l,{title:\"With Error Message\",highlightedLines:\"16-18\",files:a.errorMessage}),`\n`,(0,e.jsx)(t.h3,{id:\"events\",children:\"Events\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),` component supports selection via mouse, keyboard, and touch. You can handle all of these\nvia the `,(0,e.jsx)(t.code,{children:\"onSelectionChange\"}),\" prop. \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),` will pass the selected key to the onSelectionChange handler.\nAdditionally, ComboBox accepts an `,(0,e.jsx)(t.code,{children:\"onInputChange\"}),` prop which is triggered whenever the value is edited by the user,\nwhether through typing or option selection.`]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The example below uses \",(0,e.jsx)(t.code,{children:\"onSelectionChange\"}),\" and \",(0,e.jsx)(t.code,{children:\"onInputChange\"}),` to update the selection and input value stored in\nReact state.`]}),`\n`,(0,e.jsx)(l,{title:\"Events\",highlightedLines:\"25-26\",files:a.events}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"selectedKey\"}),\" and \",(0,e.jsx)(t.code,{children:\"onSelectionChange\"}),\" properties to control the select value.\"]}),`\n`,(0,e.jsx)(l,{title:\"Controlled with onSelectionChange\",highlightedLines:\"15-16\",files:a.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"fully-controlled\",children:\"Fully Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By passing in \",(0,e.jsx)(t.code,{children:\"inputValue\"}),\", \",(0,e.jsx)(t.code,{children:\"selectedKey\"}),\", and \",(0,e.jsx)(t.code,{children:\"items\"}),\" to the \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" you can control exactly what your \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" should display.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The following example shows how you would create a controlled \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),`, controlling everything from the selected value\n`,(0,e.jsx)(t.code,{children:\"selectedKey\"}),\" to the combobox options \",(0,e.jsx)(t.code,{children:\"items\"}),\".\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"We recommend using the \",(0,e.jsx)(t.code,{children:\"useFilter\"}),\" hook from \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFilter.html#usefilter\",children:\"@react-aria/i18n\"}),\" to manage the filtering of the items.\"]}),`\n`,(0,e.jsx)(s,{commands:{npm:\"npm install @react-aria/i18n\",yarn:\"yarn add @react-aria/i18n\",pnpm:\"pnpm add @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {useFilter} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(l,{title:\"Fully Controlled\",showPreview:!1,showOpenInCodeSandbox:!1,highlightedLines:\"63-64,67,69-71\",files:a.fullyControlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": It is important to note that you don't have to control every single aspect of a \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\". If you decide to only control a single property of the \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\", be sure to provide the change handler for that prop as well e.g. controlling \",(0,e.jsx)(t.code,{children:\"selectedKey\"}),\" would require \",(0,e.jsx)(t.code,{children:\"onSelectionChange\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-items\",children:\"Custom Items\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the autocomplete items by modifying the \",(0,e.jsx)(t.code,{children:\"AutocompleteItem\"}),\" children.\"]}),`\n`,(0,e.jsx)(l,{title:\"Custom Items\",files:a.customItems}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-empty-content-message\",children:\"Custom Empty Content Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, a message \",(0,e.jsx)(t.code,{children:\"No results found.\"}),\" will be shown if there is no result matching a query with your filter. You can customize the empty content message by modifying the \",(0,e.jsx)(t.code,{children:\"emptyContent\"}),\" in \",(0,e.jsx)(t.code,{children:\"listboxProps\"}),\".\"]}),`\n`,(0,e.jsx)(l,{title:\"Custom Empty Content Message\",files:a.customEmptyContentMessage}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-filtering\",children:\"Custom Filtering\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" uses a \",(0,e.jsx)(t.code,{children:'\"contains\"'}),\" function from \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFilter.html\",children:\"useFilter\"}),` to filter the\nlist of options. This can be overridden using the `,(0,e.jsx)(t.code,{children:\"defaultFilter\"}),\" prop, or by using the \",(0,e.jsx)(t.code,{children:\"items\"}),` prop to control the\nfiltered list. When `,(0,e.jsx)(t.code,{children:\"items\"}),\" is provided rather than \",(0,e.jsx)(t.code,{children:\"defaultItems\"}),\", \",(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" does no filtering of its own.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The following example uses the \",(0,e.jsx)(t.code,{children:\"defaultFilter\"}),\" prop to filter the list of options using a custom filter function.\"]}),`\n`,(0,e.jsx)(l,{title:\"Fully Controlled\",highlightedLines:\"22\",files:a.customFiltering}),`\n`,(0,e.jsx)(t.h3,{id:\"asynchronous-filtering\",children:\"Asynchronous Filtering\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Autocomplete supports asynchronous filtering, in the example below we are using the \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-stately/useAsyncList.html\",children:\"useAsyncList\"}),` function\nfrom `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com\",children:\"react-aria\"}),\" to handle asynchronous loading and filtering of data from a server.\"]}),`\n`,(0,e.jsx)(s,{commands:{npm:\"npm install @react-stately/data\",yarn:\"yarn add @react-stately/data\",pnpm:\"pnpm add @react-stately/data\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {useAsyncList} from \"@react-stately/data\";\n`})}),`\n`,(0,e.jsx)(r,{y:2}),`\n`,(0,e.jsx)(l,{typescriptStrict:!0,title:\"Asynchronous Filtering\",showPreview:!1,showOpenInCodeSandbox:!1,highlightedLines:\"27-29,33\",files:a.asyncFiltering}),`\n`,(0,e.jsx)(t.h3,{id:\"asynchronous-loading\",children:\"Asynchronous Loading\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Autocomplete supports asynchronous loading, in the example below we are using a custom hook to fetch the \",(0,e.jsx)(t.a,{href:\"https://pokeapi.co/api/v2/pokemon\",children:\"Pokemon API\"}),\" data in combination with the \",(0,e.jsx)(t.code,{children:\"useInfiniteScroll\"}),\" hook to load more data when the user reaches the end of the list.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isLoading\"}),\" prop is used to show a loading indicator instead of the selector icon when the data is being fetched.\"]}),`\n`,(0,e.jsx)(s,{commands:{npm:\"npm install @nextui-org/use-infinite-scroll\",yarn:\"yarn add @nextui-org/use-infinite-scroll\",pnpm:\"pnpm add @nextui-org/use-infinite-scroll\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {useInfiniteScroll} from \"@nextui-org/use-infinite-scroll\";\n`})}),`\n`,(0,e.jsx)(r,{y:2}),`\n`,(0,e.jsx)(l,{showPreview:!1,showOpenInCodeSandbox:!1,typescriptStrict:!0,title:\"Asynchronous Loading\",highlightedLines:\"21-22,25,27\",files:a.asyncLoadingItems}),`\n`,(0,e.jsx)(t.h3,{id:\"with-sections\",children:\"With Sections\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"AutocompleteSection\"}),\" component to group autocomplete items.\"]}),`\n`,(0,e.jsx)(l,{title:\"With Sections\",files:a.sections}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-sections-style\",children:\"Custom Sections Style\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the sections style by using the \",(0,e.jsx)(t.code,{children:\"classNames\"}),\" property of the \",(0,e.jsx)(t.code,{children:\"AutocompleteSection\"}),\" component.\"]}),`\n`,(0,e.jsx)(l,{title:\"Custom Sections Style\",files:a.customSectionsStyle}),`\n`,(0,e.jsx)(t.h3,{id:\"customizing-the-autocomplete\",children:\"Customizing the Autocomplete\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize any slot of the autocomplete by using the \",(0,e.jsx)(t.code,{children:\"classNames\"}),` property. Autocomplete\ncomponent also provides the `,(0,e.jsx)(t.a,{href:\"/docs/components/popover#api\",children:\"popoverProps\"}),\", \",(0,e.jsx)(t.a,{href:\"/docs/components/listbox#api\",children:\"listboxProps\"}),\", \",(0,e.jsx)(t.a,{href:\"/docs/components/input#api\",children:\"inputProps\"}),`\nproperties to customize the popover, listbox and input components.`]}),`\n`,(0,e.jsx)(l,{title:\"Custom Styles\",files:a.customStyles}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": The main wrapper of the autocomplete. This wraps the input and popover components.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"listboxWrapper\"}),\": The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"listbox\"}),\": The listbox component. This is the component that wraps the autocomplete items.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"popoverContent\"}),\": The popover content slot. Use this to modify the popover content styles.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"endContentWrapper\"}),\": The wrapper of the end content. This wraps the clear button and selector button.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"clearButton\"}),\": The clear button slot.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"selectorButton\"}),\": The selector button slot.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the autocomplete is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nIndicates if the autocomplete's popover is open.`]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"selectorButton\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nIndicates if the autocomplete's popover is open.`]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Autocomplete\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"clearButton\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-visible\"}),`:\nIndicates if the autocomplete's clear button is visible. By default it is visible when hovering the autocomplete and\nwhen the autocomplete has a value (desktop), or when the autocomplete has a value (mobile).`]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"AutocompleteItem\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the autocomplete item is disabled. Based on autocomplete `,(0,e.jsx)(t.code,{children:\"disabledKeys\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-selected\"}),`:\nWhen the autocomplete item is selected. Based on autocomplete `,(0,e.jsx)(t.code,{children:\"selectedKey\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the autocomplete item is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-pressed\"}),`:\nWhen the autocomplete item is pressed. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the autocomplete item is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the autocomplete item is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Support for filtering a list of options by typing\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for selecting a single option\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for disabled options\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for groups of items in sections\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for custom user input values\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for controlled and uncontrolled options, selection, input value, and open state\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for custom filter functions\"}),`\n`,(0,e.jsx)(t.li,{children:\"Async loading and infinite scrolling support\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for virtualized scrolling for performance with long lists\"}),`\n`,(0,e.jsx)(t.li,{children:\"Exposed to assistive technology as a combobox with ARIA\"}),`\n`,(0,e.jsx)(t.li,{children:\"Labeling support for accessibility\"}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for mouse, touch, and keyboard interactions\"}),`\n`,(0,e.jsx)(t.li,{children:\"Keyboard support for opening the combo box list box using the arrow keys, including automatically focusing the first or last item accordingly\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for opening the list box when typing, on focus, or manually\"}),`\n`,(0,e.jsx)(t.li,{children:\"Handles virtual clicks on the input from touch screen readers to toggle the list box\"}),`\n`,(0,e.jsx)(t.li,{children:\"Virtual focus management for combo box list box option navigation\"}),`\n`,(0,e.jsx)(t.li,{children:\"Hides elements outside the input and list box from assistive technology while the list box is open in a portal\"}),`\n`,(0,e.jsx)(t.li,{children:\"Custom localized announcements for option focusing, filtering, and selection using an ARIA live region to work around VoiceOver bugs\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description and error message help text linked to the input via ARIA\"}),`\n`]}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"autocomplete-props\",children:\"Autocomplete Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children*\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode[]\"})}),(0,e.jsxs)(t.td,{children:[\"The children to render. Usually a list of \",(0,e.jsx)(t.code,{children:\"AutocompleteItem\"}),\" and \",(0,e.jsx)(t.code,{children:\"AutocompleteSection\"}),\" elements.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"label\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content to display as the label.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"name\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsxs)(t.td,{children:[\"The name of the input element, used when submitting an HTML form. See \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname\",children:\"MDN\"}),\".\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"variant\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"flat\"}),\" | \",(0,e.jsx)(t.code,{children:\"bordered\"}),\" | \",(0,e.jsx)(t.code,{children:\"faded\"}),\" | \",(0,e.jsx)(t.code,{children:\"underlined\"})]}),(0,e.jsx)(t.td,{children:\"The variant of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"flat\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The color of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The size of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The radius of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"items\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\",children:(0,e.jsx)(t.code,{children:\"Iterable<T>\"})})}),(0,e.jsx)(t.td,{children:\"The list of Autocomplete items. (controlled)\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultItems\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\",children:(0,e.jsx)(t.code,{children:\"Iterable<T>\"})})}),(0,e.jsx)(t.td,{children:\"The list of Autocomplete items (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"inputValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The value of the Autocomplete input (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultInputValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The value of the Autocomplete input (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"allowsCustomValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete allows a non-item matching input value to be set.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"allowsEmptyCollection\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the autocomplete allows the menu to be open when the collection is empty.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete should close when the input is blurred.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placeholder\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"Temporary text that occupies the text input when it is empty.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"description\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"A description for the field. Provides a hint such as specific requirements for what to choose.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"menuTrigger\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"focus\"}),\" | \",(0,e.jsx)(t.code,{children:\"input\"}),\" | \",(0,e.jsx)(t.code,{children:\"manual\"})]}),(0,e.jsx)(t.td,{children:\"The action that causes the menu to open.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"focus\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"labelPlacement\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"inside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside-left\"})]}),(0,e.jsx)(t.td,{children:\"The position of the label.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"inside\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectedKey\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"React.Key\"})}),(0,e.jsx)(t.td,{children:\"The currently selected key in the collection (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultSelectedKey\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"React.Key\"})}),(0,e.jsx)(t.td,{children:\"The initial selected key in the collection (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disabledKeys\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"all\"}),\" | \",(0,e.jsx)(t.code,{children:\"React.Key[]\"})]}),(0,e.jsx)(t.td,{children:\"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"errorMessage\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"ReactNode\"}),\" | \",(0,e.jsx)(t.code,{children:\"((v: ValidationResult) => ReactNode)\"})]}),(0,e.jsx)(t.td,{children:\"An error message to display below the field.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validate\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: { inputValue: string, selectedKey: React.Key }) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,e.jsx)(t.td,{children:\"Validate input values when committing (e.g. on blur), and return error messages for invalid values.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationBehavior\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"native\"}),\" | \",(0,e.jsx)(t.code,{children:\"aria\"})]}),(0,e.jsx)(t.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"aria\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"startContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the left side of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"endContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the right side of the Autocomplete.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"autoFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete should be focused on render.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultFilter\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(textValue: string, inputValue: string) => boolean\"})}),(0,e.jsx)(t.td,{children:\"The filter function used to determine if a option should be included in the Autocomplete list.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"filterOptions\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator\",children:\"Intl.CollatorOptions\"})}),(0,e.jsx)(t.td,{children:\"The options used to create the collator used for filtering.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"{ sensitivity: 'base'}\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isReadOnly\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete is read only.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isRequired\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete is required.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isInvalid\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete is invalid.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"fullWidth\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the input should take up the width of its parent.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectorIcon\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The icon that represents the autocomplete open state. Usually a chevron icon.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"clearIcon\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The icon to be used in the clear button. Usually a cross icon.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"showScrollIndicators\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the scroll indicators should be shown when the listbox is scrollable.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"scrollRef\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"React.RefObject<HTMLElement>\"})}),(0,e.jsx)(t.td,{children:\"A ref to the scrollable element.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"inputProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/input#api\",children:\"InputProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the Input component.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"popoverProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/popover#api\",children:\"PopoverProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the Popover component.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"listboxProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/listbox#api\",children:\"ListboxProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the Listbox component.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"scrollShadowProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/scroll-shadow#api\",children:\"ScrollShadowProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the ScrollShadow component.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectorButtonProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/button#api\",children:\"ButtonProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the selector button.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"clearButtonProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/button#api\",children:\"ButtonProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the clear button.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isClearable\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the clear button should be shown.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableClearable\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsxs)(t.td,{children:[\"Whether the clear button should be hidden. (\",(0,e.jsx)(t.strong,{children:\"Deprecated\"}),\") Use \",(0,e.jsx)(t.code,{children:\"isClearable\"}),\" instead.\"]}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the Autocomplete should be animated.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableSelectorIconRotation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the select should disable the rotation of the selector icon.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C \"listboxWrapper\"\\uFF5C \"listbox\"\\uFF5C \"popoverContent\" \\uFF5C \"endContentWrapper\"\\uFF5C \"clearButton\" \\uFF5C \"selectorButton\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the Autocomplete slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"autocomplete-events\",children:\"Autocomplete Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onOpenChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void\"})}),(0,e.jsx)(t.td,{children:\"Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onInputChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: string) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete input value changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onSelectionChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(key: React.Key) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete selection changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e:  FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete input is focused.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e:  FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete input is blurred.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocusChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isFocused: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete input focus changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyDown\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is pressed.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyUp\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is released.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onClose\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"() => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the Autocomplete's Popover is closed.\"})]})]})]}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(t.h3,{id:\"autocompleteitem-props\",children:\"AutocompleteItem Props\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Check the \",(0,e.jsx)(t.a,{href:\"/docs/components/listbox#listboxitem-props\",children:\"ListboxItem\"}),\" props.\"]}),`\n`,(0,e.jsx)(t.h3,{id:\"autocompleteitem-events\",children:\"AutocompleteItem Events\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Check the \",(0,e.jsx)(t.a,{href:\"/docs/components/listbox#listboxitem-events\",children:\"ListboxItem\"}),\" events.\"]}),`\n`,(0,e.jsx)(t.h3,{id:\"autocompletesection-props\",children:\"AutocompleteSection Props\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Check the \",(0,e.jsx)(t.a,{href:\"/docs/components/listbox#listboxsection-props\",children:\"ListboxSection\"}),\" props.\"]}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(t.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,e.jsx)(t.h4,{id:\"menu-trigger-action\",children:\"Menu Trigger Action\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`type MenuTriggerAction = \"focus\" | \"input\" | \"manual\";\n`})})]})}function G(o={}){let{wrapper:t}=o.components||{};return t?(0,e.jsx)(t,{...o,children:(0,e.jsx)(Z,{...o})}):Z(o)}function c(o,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return te(Et);})();\n;return Component;"
  },
  "_id": "docs/components/autocomplete.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/autocomplete.mdx",
    "sourceFileName": "autocomplete.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/autocomplete"
  },
  "type": "Doc",
  "slug": "/docs/components/autocomplete",
  "slugAsParams": "components/autocomplete",
  "url": "/docs/components/autocomplete"
}