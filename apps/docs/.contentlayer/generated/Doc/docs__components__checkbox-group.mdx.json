{
  "title": "Checkbox Group",
  "description": "A CheckboxGroup allows users to select one or more items from a list of choices.",
  "body": {
    "raw": "\nimport {checkboxGroupContent} from \"@/content/components/checkbox-group\";\n\n# Checkbox Group\n\nA CheckboxGroup allows users to select one or more items from a list of choices.\n\n<ComponentLinks component=\"checkbox\" storybook=\"checkboxgroup\" reactAriaHook=\"useCheckboxGroup\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add checkbox\",\n    npm: \"npm install @nextui-org/checkbox\",\n    yarn: \"yarn add @nextui-org/checkbox\",\n    pnpm: \"pnpm add @nextui-org/checkbox\",\n    bun: \"bun add @nextui-org/checkbox\"\n  }}\n/>\n\n\n## Import\n\nNextUI exports 2 checkbox-related components:\n\n- **CheckboxGroup**: The root component, it wraps the label and the wrapper.\n- **Checkbox**: The checkbox component.\n\n<ImportTabs\n  commands={{\n    main: 'import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";',\n    individual: 'import {CheckboxGroup, Checkbox} from \"@nextui-org/checkbox\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={checkboxGroupContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={checkboxGroupContent.disabled} />\n\n### Horizontal\n\n<CodeDemo title=\"Horizontal\" files={checkboxGroupContent.horizontal} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the checkbox input value.\n\n<CodeDemo title=\"Controlled\" files={checkboxGroupContent.controlled} />\n\n### Invalid\n\n<CodeDemo title=\"Invalid\" files={checkboxGroupContent.invalid} />\n\n## Slots\n\n- **base**: Checkbox group root wrapper, it wraps the label and the wrapper.\n- **wrapper**: Checkbox group wrapper, it wraps all checkboxes.\n- **label**: Checkbox group label, it is placed before the wrapper.\n- **description**: The description of the checkbox group.\n- **errorMessage**: The error message of the checkbox group.\n\n### Custom Styles\n\nYou can customize the `CheckboxGroup` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={checkboxGroupContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the checkbox even further, you can use the `useCheckboxGroup` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={checkboxGroupContent.customImplementation} />\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n<Spacer y={4} />\n\n## API\n\n### Checkbox Group Props\n\n| Attribute          | Type                                                                        | Description                                                                                                                                                   | Default    |\n| ------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| children           | `ReactNode[]` \\| `ReactNode[]`                                              | The checkboxes items.                                                                                                                                         | -          |\n| orientation        | `vertical` \\| `horizontal`                                                  | The axis the checkbox group items should align with.                                                                                                          | `vertical` |\n| color              | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the checkboxes.                                                                                                                                  | `primary`  |\n| size               | `xs` \\| `sm` \\| `md` \\| `lg` \\| `xl`                                        | The size of the checkboxes.                                                                                                                                   | `md`       |\n| radius             | `none` \\| `base` \\| `xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `full`          | The radius of the checkboxes.                                                                                                                                 | `md`       |\n| name               | `string`                                                                    | The name of the CheckboxGroup, used when submitting an HTML form.                                                                                             | -          |\n| label              | `string`                                                                    | The label of the CheckboxGroup.                                                                                                                               | -          |\n| value              | `string[]`                                                                  | The current selected values. (controlled).                                                                                                                    | -          |\n| lineThrough        | `boolean`                                                                   | Whether the checkboxes label should be crossed out.                                                                                                           | `false`    |\n| defaultValue       | `string[]`                                                                  | The default selected values. (uncontrolled).                                                                                                                  | -          |\n| isInvalid          | `boolean`                                                                   | Whether the checkbox group is invalid.                                                                                                                        | `false`    |\n| validationState    | `valid` \\| `invalid`                                                        | Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead.                                        | -          |\n| description        | `ReactNode`                                                                 | The checkbox group description.                                                                                                                               | -          |\n| errorMessage       | `ReactNode` \\| `((v: ValidationResult) => ReactNode)`                       | The checkbox group error message.                                                                                                                             | -          |\n| validate           | `(value: string[]) => ValidationError ｜ true ｜ null ｜ undefined`          | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -          |\n| validationBehavior | `native` \\| `aria`                                                          | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |\n| isDisabled         | `boolean`                                                                   | Whether the checkbox group is disabled.                                                                                                                       | `false`    |\n| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                     | `false`    |\n| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                           | -          |\n| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                     | `false`    |\n| classNames         | `Record<\"base\"｜ \"wrapper\"｜ \"label\", string>`                              | Allows to set custom class names for the checkbox group slots.                                                                                                | -          |\n\n### Checkbox Group Events\n\n| Attribute | Type                        | Description                                    |\n| --------- | --------------------------- | ---------------------------------------------- |\n| onChange  | `(value: string[]) => void` | Handler that is called when the value changes. |\n",
    "code": "var Component=(()=>{var w=Object.create;var d=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),N=(r,e)=>{for(var t in e)d(r,t,{get:e[t],enumerable:!0})},u=(r,e,t,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of A(e))!T.call(r,c)&&c!==t&&d(r,c,{get:()=>e[c],enumerable:!(n=G(e,c))||n.enumerable});return r};var V=(r,e,t)=>(t=r!=null?w(I(r)):{},u(e||!r||!r.__esModule?d(t,\"default\",{value:r,enumerable:!0}):t,r)),z=r=>u(d({},\"__esModule\",{value:!0}),r);var b=j(($,p)=>{p.exports=_jsx_runtime});var Z={};N(Z,{default:()=>S,frontmatter:()=>K});var o=V(b());var L=`import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup\n      label=\"Select cities\"\n      defaultValue={[\"buenos-aires\", \"london\"]}\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}`,D={\"/App.jsx\":L},x={...D};var R=`import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup\n      isDisabled\n      label=\"Select cities\"\n      defaultValue={[\"buenos-aires\", \"london\"]}\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}`,P={\"/App.jsx\":R},m={...P};var W=`import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup\n      label=\"Select cities\"\n      orientation=\"horizontal\"\n      color=\"secondary\"\n      defaultValue={[\"buenos-aires\", \"san-francisco\"]}\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}`,F={\"/App.jsx\":W},k={...F};var M=`import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState([\"buenos-aires\", \"sydney\"]);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <CheckboxGroup\n        label=\"Select cities\"\n        color=\"warning\"\n        value={selected}\n        onValueChange={setSelected}\n      >\n        <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n        <Checkbox value=\"sydney\">Sydney</Checkbox>\n        <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      </CheckboxGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected.join(\", \")}</p>\n    </div>\n  );\n}`,B={\"/App.jsx\":M},C={...B};var H=`import {Checkbox, Link, User, Chip, cn} from \"@nextui-org/react\";\n\nexport const CustomCheckbox = ({ user, statusColor, value }) => {\n  return (\n    <Checkbox\n      aria-label={user.name}\n      classNames={{\n        base: cn(\n          \"inline-flex max-w-md w-full bg-content1 m-0\",\n          \"hover:bg-content2 items-center justify-start\",\n          \"cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\"\n        ),\n        label: \"w-full\",\n      }}\n      value={value}\n    >\n      <div className=\"w-full flex justify-between gap-2\">\n        <User\n          avatarProps={{ size: \"md\", src: user.avatar }}\n          description={\n            <Link isExternal href={user.url} size=\"sm\">\n              @{user.username}\n            </Link>\n          }\n          name={user.name}\n        />\n        <div className=\"flex flex-col items-end gap-1\">\n          <span className=\"text-tiny text-default-500\">{user.role}</span>\n          <Chip color={statusColor} size=\"sm\" variant=\"flat\">\n            {user.status}\n          </Chip>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};`,_=`import {CheckboxGroup} from \"@nextui-org/react\";\nimport {CustomCheckbox} from \"./CustomCheckbox\";\n\nexport default function App() {\n  const [groupSelected, setGroupSelected] = React.useState([]);\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      <CheckboxGroup\n        label=\"Select employees\"\n        value={groupSelected}\n        onChange={setGroupSelected}\n        classNames={{\n          base: \"w-full\"\n        }}\n      >\n        <CustomCheckbox\n          value=\"junior\"\n          user={{\n            name: \"Junior Garcia\",\n            avatar: \"https://avatars.githubusercontent.com/u/30373425?v=4\",\n            username: \"jrgarciadev\",\n            url: \"https://x.com/jrgarciadev\",\n            role: \"Software Developer\",\n            status: \"Active\",\n          }}\n          statusColor=\"secondary\"\n        />\n        <CustomCheckbox\n          value=\"johndoe\"\n          user={{\n            name: \"John Doe\",\n            avatar: \"https://i.pravatar.cc/300?u=a042581f4e29026707d\",\n            username: \"johndoe\",\n            url: \"#\",\n            role: \"Product Designer\",\n            status: \"Vacation\",\n          }}\n          statusColor=\"warning\"\n        />\n        <CustomCheckbox\n          value=\"zoeylang\"\n          user={{\n            name: \"Zoey Lang\",\n            avatar: \"https://i.pravatar.cc/300?u=a042581f4e29026704d\",\n            username: \"zoeylang\",\n            url: \"#\",\n            role: \"Technical Writer\",\n            status: \"Out of office\",\n          }}\n          statusColor=\"danger\"\n        />\n        <CustomCheckbox\n          value=\"william\"\n          user={{\n            name: \"William Howard\",\n            avatar: \"https://i.pravatar.cc/300?u=a048581f4e29026701d\",\n            username: \"william\",\n            url: \"#\",\n            role: \"Sales Manager\",\n            status: \"Active\",\n          }}\n          statusColor=\"secondary\"\n        />\n      </CheckboxGroup>\n      <p className=\"mt-4 ml-1 text-default-500\">\n        Selected: {groupSelected.join(\", \")}\n      </p>\n    </div>\n  );\n}`,q={\"/App.jsx\":_,\"/CustomCheckbox.jsx\":H},f={...q};var E=`export const CheckIcon = (props) =>\n  (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <polyline points=\"20 6 9 17 4 12\" />\n    </svg>\n  );`,U=`import {useCheckbox, Chip, VisuallyHidden, tv} from \"@nextui-org/react\";\nimport {CheckIcon} from './CheckIcon.jsx'\n\nconst checkbox = tv({\n  slots: {\n    base: \"border-default hover:bg-default-200\",\n    content: \"text-default-500\"\n  },\n  variants: {\n    isSelected: {\n      true: {\n        base: \"border-primary bg-primary hover:bg-primary-500 hover:border-primary-500\",\n        content: \"text-primary-foreground pl-1\"\n      }\n    },\n    isFocusVisible: {\n      true: { \n        base: \"outline-none ring-2 ring-focus ring-offset-2 ring-offset-background\",\n      }\n    }\n  }\n})\n\nexport const CustomCheckbox = (props) => {\n  const {\n    children,\n    isSelected,\n    isFocusVisible,\n    getBaseProps,\n    getLabelProps,\n    getInputProps,\n  } = useCheckbox({\n    ...props\n  })\n\n  const styles = checkbox({ isSelected, isFocusVisible })\n\n  return (\n    <label {...getBaseProps()}>\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <Chip\n        classNames={{\n          base: styles.base(),\n          content: styles.content(),\n        }}\n        color=\"primary\"\n        startContent={isSelected ? <CheckIcon className=\"ml-1\" /> : null}\n        variant=\"faded\"\n        {...getLabelProps()}\n      >\n        {children ? children : isSelected ? \"Enabled\" : \"Disabled\"}\n      </Chip>\n    </label>\n  );\n}`,J=`import {CheckboxGroup} from \"@nextui-org/react\";\nimport {CustomCheckbox} from \"./CustomCheckbox\";\n\nexport default function App() {\n  const [groupSelected, setGroupSelected] = React.useState([]);\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      <CheckboxGroup\n        className=\"gap-1\"\n        label=\"Select amenities\"\n        orientation=\"horizontal\"\n        value={groupSelected}\n        onChange={setGroupSelected}\n      >\n        <CustomCheckbox value=\"wifi\">Wifi</CustomCheckbox>\n        <CustomCheckbox value=\"tv\">TV</CustomCheckbox>\n        <CustomCheckbox value=\"kitchen\">Kitchen</CustomCheckbox>\n        <CustomCheckbox value=\"parking\">Parking</CustomCheckbox>\n        <CustomCheckbox value=\"pool\">Pool</CustomCheckbox>\n        <CustomCheckbox value=\"gym\">Gym</CustomCheckbox>\n      </CheckboxGroup>\n      <p className=\"mt-4 ml-1 text-default-500\">\n        Selected: {groupSelected.join(\", \")}\n      </p>\n    </div>\n  );\n}`,O={\"/App.jsx\":J,\"/CustomCheckbox.jsx\":U,\"/CheckIcon.jsx\":E},g={...O};var X=`import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [isInvalid, setIsInvalid] = React.useState(true);\n\n  return (\n    <CheckboxGroup\n      isRequired\n      description=\"Select the cities you want to visit\"\n      isInvalid={isInvalid}\n      label=\"Select cities\"\n      onValueChange={(value) => {\n        setIsInvalid(value.length < 1);\n      }}\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}`,Y={\"/App.jsx\":X},v={...Y};var i={usage:x,disabled:m,horizontal:k,controlled:C,customStyles:f,invalid:v,customImplementation:g};var K={title:\"Checkbox Group\",description:\"A CheckboxGroup allows users to select one or more items from a list of choices.\"};function y(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...r.components},{CarbonAd:t,CodeDemo:n,ComponentLinks:c,ImportTabs:a,PackageManagers:s,Spacer:h}=e;return t||l(\"CarbonAd\",!0),n||l(\"CodeDemo\",!0),c||l(\"ComponentLinks\",!0),a||l(\"ImportTabs\",!0),s||l(\"PackageManagers\",!0),h||l(\"Spacer\",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:\"checkbox-group\",children:\"Checkbox Group\"}),`\n`,(0,o.jsx)(e.p,{children:\"A CheckboxGroup allows users to select one or more items from a list of choices.\"}),`\n`,(0,o.jsx)(c,{component:\"checkbox\",storybook:\"checkboxgroup\",reactAriaHook:\"useCheckboxGroup\"}),`\n`,(0,o.jsx)(e.hr,{}),`\n`,(0,o.jsx)(t,{}),`\n`,(0,o.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,o.jsx)(s,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add checkbox\",npm:\"npm install @nextui-org/checkbox\",yarn:\"yarn add @nextui-org/checkbox\",pnpm:\"pnpm add @nextui-org/checkbox\",bun:\"bun add @nextui-org/checkbox\"}}),`\n`,(0,o.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,o.jsx)(e.p,{children:\"NextUI exports 2 checkbox-related components:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"CheckboxGroup\"}),\": The root component, it wraps the label and the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"Checkbox\"}),\": The checkbox component.\"]}),`\n`]}),`\n`,(0,o.jsx)(a,{commands:{main:'import {CheckboxGroup, Checkbox} from \"@nextui-org/react\";',individual:'import {CheckboxGroup, Checkbox} from \"@nextui-org/checkbox\";'}}),`\n`,(0,o.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,o.jsx)(n,{title:\"Usage\",files:i.usage}),`\n`,(0,o.jsx)(e.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,o.jsx)(n,{title:\"Disabled\",files:i.disabled}),`\n`,(0,o.jsx)(e.h3,{id:\"horizontal\",children:\"Horizontal\"}),`\n`,(0,o.jsx)(n,{title:\"Horizontal\",files:i.horizontal}),`\n`,(0,o.jsx)(e.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"You can use the \",(0,o.jsx)(e.code,{children:\"value\"}),\" and \",(0,o.jsx)(e.code,{children:\"onValueChange\"}),\" properties to control the checkbox input value.\"]}),`\n`,(0,o.jsx)(n,{title:\"Controlled\",files:i.controlled}),`\n`,(0,o.jsx)(e.h3,{id:\"invalid\",children:\"Invalid\"}),`\n`,(0,o.jsx)(n,{title:\"Invalid\",files:i.invalid}),`\n`,(0,o.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"base\"}),\": Checkbox group root wrapper, it wraps the label and the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"wrapper\"}),\": Checkbox group wrapper, it wraps all checkboxes.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"label\"}),\": Checkbox group label, it is placed before the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"description\"}),\": The description of the checkbox group.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"errorMessage\"}),\": The error message of the checkbox group.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"You can customize the \",(0,o.jsx)(e.code,{children:\"CheckboxGroup\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,o.jsx)(n,{title:\"Custom Styles\",files:i.customStyles}),`\n`,(0,o.jsx)(e.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"In case you need to customize the checkbox even further, you can use the \",(0,o.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook to create your own implementation.\"]}),`\n`,(0,o.jsx)(n,{title:\"Custom Implementation\",files:i.customImplementation}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Note\"}),\": We used \",(0,o.jsx)(e.a,{href:\"https://www.tailwind-variants.org/\",children:\"Tailwind Variants\"}),\" to implement the styles above, you can use any other library such as \",(0,o.jsx)(e.a,{href:\"https://www.npmjs.com/package/clsx\",children:\"clsx\"}),\" to achieve the same result.\"]}),`\n`]}),`\n`,(0,o.jsx)(h,{y:4}),`\n`,(0,o.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,o.jsx)(e.h3,{id:\"checkbox-group-props\",children:\"Checkbox Group Props\"}),`\n`,(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:\"Attribute\"}),(0,o.jsx)(e.th,{children:\"Type\"}),(0,o.jsx)(e.th,{children:\"Description\"}),(0,o.jsx)(e.th,{children:\"Default\"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"children\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"ReactNode[]\"}),\" | \",(0,o.jsx)(e.code,{children:\"ReactNode[]\"})]}),(0,o.jsx)(e.td,{children:\"The checkboxes items.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"orientation\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"vertical\"}),\" | \",(0,o.jsx)(e.code,{children:\"horizontal\"})]}),(0,o.jsx)(e.td,{children:\"The axis the checkbox group items should align with.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"vertical\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"color\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"default\"}),\" | \",(0,o.jsx)(e.code,{children:\"primary\"}),\" | \",(0,o.jsx)(e.code,{children:\"secondary\"}),\" | \",(0,o.jsx)(e.code,{children:\"success\"}),\" | \",(0,o.jsx)(e.code,{children:\"warning\"}),\" | \",(0,o.jsx)(e.code,{children:\"danger\"})]}),(0,o.jsx)(e.td,{children:\"The color of the checkboxes.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"primary\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"size\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"xs\"}),\" | \",(0,o.jsx)(e.code,{children:\"sm\"}),\" | \",(0,o.jsx)(e.code,{children:\"md\"}),\" | \",(0,o.jsx)(e.code,{children:\"lg\"}),\" | \",(0,o.jsx)(e.code,{children:\"xl\"})]}),(0,o.jsx)(e.td,{children:\"The size of the checkboxes.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"md\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"radius\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"none\"}),\" | \",(0,o.jsx)(e.code,{children:\"base\"}),\" | \",(0,o.jsx)(e.code,{children:\"xs\"}),\" | \",(0,o.jsx)(e.code,{children:\"sm\"}),\" | \",(0,o.jsx)(e.code,{children:\"md\"}),\" | \",(0,o.jsx)(e.code,{children:\"lg\"}),\" | \",(0,o.jsx)(e.code,{children:\"xl\"}),\" | \",(0,o.jsx)(e.code,{children:\"full\"})]}),(0,o.jsx)(e.td,{children:\"The radius of the checkboxes.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"md\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"name\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"string\"})}),(0,o.jsx)(e.td,{children:\"The name of the CheckboxGroup, used when submitting an HTML form.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"label\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"string\"})}),(0,o.jsx)(e.td,{children:\"The label of the CheckboxGroup.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"value\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"string[]\"})}),(0,o.jsx)(e.td,{children:\"The current selected values. (controlled).\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"lineThrough\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether the checkboxes label should be crossed out.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"false\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"defaultValue\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"string[]\"})}),(0,o.jsx)(e.td,{children:\"The default selected values. (uncontrolled).\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"isInvalid\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether the checkbox group is invalid.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"false\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"validationState\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"valid\"}),\" | \",(0,o.jsx)(e.code,{children:\"invalid\"})]}),(0,o.jsxs)(e.td,{children:['Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (',(0,o.jsx)(e.strong,{children:\"Deprecated\"}),\") use \",(0,o.jsx)(e.strong,{children:\"isInvalid\"}),\" instead.\"]}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"description\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"ReactNode\"})}),(0,o.jsx)(e.td,{children:\"The checkbox group description.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"errorMessage\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"ReactNode\"}),\" | \",(0,o.jsx)(e.code,{children:\"((v: ValidationResult) => ReactNode)\"})]}),(0,o.jsx)(e.td,{children:\"The checkbox group error message.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"validate\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"(value: string[]) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,o.jsxs)(e.td,{children:[\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if \",(0,o.jsx)(e.code,{children:\"validationBehavior\"}),\" is set to \",(0,o.jsx)(e.code,{children:\"native\"}),\". For real-time validation, use the \",(0,o.jsx)(e.code,{children:\"isInvalid\"}),\" prop.\"]}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"validationBehavior\"}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.code,{children:\"native\"}),\" | \",(0,o.jsx)(e.code,{children:\"aria\"})]}),(0,o.jsx)(e.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"aria\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"isDisabled\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether the checkbox group is disabled.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"false\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"isRequired\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether user checkboxes are required on the input before form submission.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"false\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"isReadOnly\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether the checkboxes can be selected but not changed by the user.\"}),(0,o.jsx)(e.td,{children:\"-\"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"disableAnimation\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"boolean\"})}),(0,o.jsx)(e.td,{children:\"Whether the animation should be disabled.\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"false\"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"classNames\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:'Record<\"base\"\\uFF5C \"wrapper\"\\uFF5C \"label\", string>'})}),(0,o.jsx)(e.td,{children:\"Allows to set custom class names for the checkbox group slots.\"}),(0,o.jsx)(e.td,{children:\"-\"})]})]})]}),`\n`,(0,o.jsx)(e.h3,{id:\"checkbox-group-events\",children:\"Checkbox Group Events\"}),`\n`,(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:\"Attribute\"}),(0,o.jsx)(e.th,{children:\"Type\"}),(0,o.jsx)(e.th,{children:\"Description\"})]})}),(0,o.jsx)(e.tbody,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:\"onChange\"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:\"(value: string[]) => void\"})}),(0,o.jsx)(e.td,{children:\"Handler that is called when the value changes.\"})]})})]})]})}function S(r={}){let{wrapper:e}=r.components||{};return e?(0,o.jsx)(e,{...r,children:(0,o.jsx)(y,{...r})}):y(r)}function l(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return z(Z);})();\n;return Component;"
  },
  "_id": "docs/components/checkbox-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/checkbox-group.mdx",
    "sourceFileName": "checkbox-group.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/checkbox-group"
  },
  "type": "Doc",
  "slug": "/docs/components/checkbox-group",
  "slugAsParams": "components/checkbox-group",
  "url": "/docs/components/checkbox-group"
}