{
  "title": "Routing",
  "description": "Learn how to integrate client side routing into your NextUI application.",
  "body": {
    "raw": "\n# Routing\n\nNextUI Components such as [Tabs](/docs/components/tabs), [Listbox](/docs/components/listbox), [Dropdown](/docs/components/dropdown) and many others offer\nthe flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing.\n\n<CarbonAd/>\n\n## Introduction\n\nBy default, links perform native browser navigation when they are interacted with. However, many apps and\nframeworks use client side routers to avoid a full page reload when navigating between pages. The `NextUIProvider`\ncomponent configures all NextUI components within it to navigate using the client side router you provide.\n\nSet this up once in the root of your app, and any NextUI component with the href prop will automatically navigate\nusing your router.\n\n## NextUIProvider Setup\n\nThe `NextUIProvider` accepts a prop called `navigate`. This should be set to a function received from your\nrouter for performing a client side navigation programmatically. The following example shows the general\npattern. Framework-specific examples are shown below.\n\n```jsx\nimport * as React from \"react\";\n\n// 1. import `NextUIProvider` component\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nfunction App() {\n  const navigate = useNavigateFromYourRouter();\n\n  // 2. Add the `navigate` function to the `NextUIProvider`\n  return (\n    <NextUIProvider navigate={navigate}>\n      <YourApplication />\n    </NextUIProvider>\n  );\n}\n```\n\n<Spacer y={2} />\n\n## Next.js \n\n### App Router\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and add the\n`useRouter` hook from `next/navigation`, it returns a router object that can be used to perform navigation.\n\n<Steps>\n\n#### Add the `useRouter`\n\n```tsx {8}\n// app/providers.tsx\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/navigation'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  const router = useRouter();\n\n  return (\n    <NextUIProvider navigate={router.push}>\n      {children}\n    </NextUIProvider>\n  )\n}\n```\n\n#### Add Provider to Root\n\nNow, Go to your `root` layout page and wrap it with the `NextUIProvider`:\n\n```tsx {6,8,10}\n// app/layout.tsx\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className='dark'>\n      <body>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n> **Note**: Skip this step if you already set up the `NextUIProvider` in your app.\n\n#### Add useHref (Optional)\n\nIf you are using the Next.js [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) setting, you'll need to configure an environment variable to access it. \n\n```js\n// next.config.js\nconst basePath = '...';\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath\n  }\n};\n```\nThen, provide a custom `useHref` function to prepend it to the href for all links.\n\n```tsx {9,12}\n// app/providers.tsx\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/navigation'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  const router = useRouter();\n  const useHref = (href: string) => process.env.BASE_PATH + href;\n\n  return (\n    <NextUIProvider navigate={router.push} useHref={useHref}>\n      {children}\n    </NextUIProvider>\n  )\n}\n```\n\n</Steps>\n\n### Pages Router\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook \nfrom `next/router`, it returns a router object that can be used to perform navigation.\n\n```tsx {7,10}\n// pages/_app.tsx\nimport type { AppProps } from 'next/app';\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/router';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n\n  return (\n    <NextUIProvider navigate={router.push}>\n      <Component {...pageProps} />\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n```\n\nWhen using the [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) configuration option, provide a `useHref` option to the router passed to Provider to prepend it to links automatically.\n\n```tsx {8,11}\n// pages/_app.tsx\nimport type { AppProps } from 'next/app';\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/router';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n  const useHref = (href: string) => router.basePath + href;\n\n  return (\n    <NextUIProvider navigate={router.push} useHref={useHref}>\n      <Component {...pageProps} />\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n```\n\n## React Router\n\nThe `useNavigate` hook from `react-router-dom` returns a `navigate` function that can be used to perform navigation. \n\nThe `useHref` hook can also be provided if you're using React Router's `basename` option. Ensure that the component that calls useNavigate and renders Provider is inside the router component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` element should also be defined inside `<NextUIProvider>` so that links inside the rendered routes have access to the router.\n\nGo to the `App` file commonly called `App.jsx` or `App.tsx`, add the `useNavigate` hook and pass the \n`navigate` function to the `NextUIProvider`:\n\n```jsx {6,9}\n// App.tsx or App.jsx\nimport {BrowserRouter, useNavigate, useHref} from 'react-router-dom';\nimport {NextUIProvider} from '@nextui-org/react';\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <NextUIProvider navigate={navigate} useHref={useHref}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </NextUIProvider>\n  );\n}\n\n\n// main.tsx or main.jsx\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n)\n```\n\nEnsure that the component that calls `useNavigate` and renders `NextUIProvider` is inside the router \ncomponent (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` \nelement should also be defined inside `NextUIProvider` so that links inside the rendered routes have access\nto the router.\n\n## Remix\n\nRemix uses React Router under the hood, so the same `useNavigate` and `useHref` hook described above also works in Remix \napps. `NextUIProvider` should be rendered at the `root` of each page that includes NextUI components, or in \n`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root) \nfor more details.\n\n```jsx {14}\n// app/root.tsx\nimport {useNavigate, useHref, Outlet} from '@remix-run/react';\nimport {NextUIProvider} from '@nextui-org/react';\n\nexport default function App() {\n  const navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* ... */}\n      </head>\n      <body>\n        <NextUIProvider navigate={navigate} useHref={useHref}>\n          <Outlet />\n        </NextUIProvider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n```\n\n## TanStack\n\nTo use [TanStack Router](https://tanstack.com/router/latest) with NextUI, render NextUI's RouterProvider inside your root route. Use `router.navigate` in the `navigate` prop, and `router.buildLocation` in the `useHref` prop. \n\n```tsx {9,10}\n// app/root.tsx\nimport {NextUIProvider} from '@nextui-org/react';\n\nfunction RootRoute() {\n  let router = useRouter();\n\n  return (\n    <NextUIProvider \n      navigate={(to, options) => router.navigate({ to, ...options })}\n      useHref={(to) => router.buildLocation(to).href}\n    >\n      {/* You app here... */}\n    </NextUIProvider>\n  );\n}\n```\n\n## Usage examples\n\nNow that you have set up the `NextUIProvider` in your app, you can use the `href` prop in the `Tabs`, \n`Listbox` and `Dropdown` items to navigate between pages.\n\nThe [Link](/docs/components/link) component will also use the `navigate` function from the\n`NextUIProvider` to navigate between pages.\n\n\n```jsx\nimport {\n  Tabs,\n  Tab,\n  Listbox,\n  ListboxItem,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Button,\n  Link,\n} from \"@nextui-org/react\";\n\nfunction App() {\n  return (\n    <>\n      <Tabs aria-label=\"Navigation\">\n        <Tab key=\"home\" href=\"/home\">Home</Tab>\n        <Tab key=\"about\" href=\"/about\">About</Tab>\n      </Tabs>\n      <Listbox aria-label=\"Navigation\">\n        <ListboxItem key=\"home\" href=\"/home\">Home</ListboxItem>\n        <ListboxItem key=\"about\" href=\"/about\">About</ListboxItem>\n      </Listbox>\n      <Dropdown>\n        <DropdownTrigger>\n          <Button>Open</Button>\n        </DropdownTrigger>\n        <DropdownMenu aria-label=\"Navigation\">\n          <DropdownItem key=\"home\" href=\"/home\">Home</DropdownItem>\n          <DropdownItem key=\"about\" href=\"/about\">About</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Link href=\"/home\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </>\n  );\n}\n```\n",
    "code": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!f.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(i=m(e,o))||i.enumerable});return r};var N=(r,e,t)=>(t=r!=null?l(x(r)):{},c(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),P=r=>c(a({},\"__esModule\",{value:!0}),r);var h=v((y,s)=>{s.exports=_jsx_runtime});var I={};b(I,{default:()=>u,frontmatter:()=>R});var n=N(h()),R={title:\"Routing\",description:\"Learn how to integrate client side routing into your NextUI application.\"};function p(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",p:\"p\",pre:\"pre\",strong:\"strong\",...r.components},{CarbonAd:t,Spacer:i,Steps:o}=e;return t||d(\"CarbonAd\",!0),i||d(\"Spacer\",!0),o||d(\"Steps\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"routing\",children:\"Routing\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"NextUI Components such as \",(0,n.jsx)(e.a,{href:\"/docs/components/tabs\",children:\"Tabs\"}),\", \",(0,n.jsx)(e.a,{href:\"/docs/components/listbox\",children:\"Listbox\"}),\", \",(0,n.jsx)(e.a,{href:\"/docs/components/dropdown\",children:\"Dropdown\"}),` and many others offer\nthe flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing.`]}),`\n`,(0,n.jsx)(t,{}),`\n`,(0,n.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,n.jsxs)(e.p,{children:[`By default, links perform native browser navigation when they are interacted with. However, many apps and\nframeworks use client side routers to avoid a full page reload when navigating between pages. The `,(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),`\ncomponent configures all NextUI components within it to navigate using the client side router you provide.`]}),`\n`,(0,n.jsx)(e.p,{children:`Set this up once in the root of your app, and any NextUI component with the href prop will automatically navigate\nusing your router.`}),`\n`,(0,n.jsx)(e.h2,{id:\"nextuiprovider-setup\",children:\"NextUIProvider Setup\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\" accepts a prop called \",(0,n.jsx)(e.code,{children:\"navigate\"}),`. This should be set to a function received from your\nrouter for performing a client side navigation programmatically. The following example shows the general\npattern. Framework-specific examples are shown below.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import * as React from \"react\";\n\n// 1. import \\`NextUIProvider\\` component\nimport {NextUIProvider} from \"@nextui-org/react\";\n\nfunction App() {\n  const navigate = useNavigateFromYourRouter();\n\n  // 2. Add the \\`navigate\\` function to the \\`NextUIProvider\\`\n  return (\n    <NextUIProvider navigate={navigate}>\n      <YourApplication />\n    </NextUIProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(i,{y:2}),`\n`,(0,n.jsx)(e.h2,{id:\"nextjs\",children:\"Next.js\"}),`\n`,(0,n.jsx)(e.h3,{id:\"app-router\",children:\"App Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to your \",(0,n.jsx)(e.code,{children:\"app/providers.tsx\"}),\" or \",(0,n.jsx)(e.code,{children:\"app/providers.jsx\"}),` (create it if it doesn't exist) and add the\n`,(0,n.jsx)(e.code,{children:\"useRouter\"}),\" hook from \",(0,n.jsx)(e.code,{children:\"next/navigation\"}),\", it returns a router object that can be used to perform navigation.\"]}),`\n`,(0,n.jsxs)(o,{children:[(0,n.jsxs)(e.h4,{id:\"add-the-userouter\",children:[\"Add the \",(0,n.jsx)(e.code,{children:\"useRouter\"})]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{8}\",children:`// app/providers.tsx\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/navigation'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  const router = useRouter();\n\n  return (\n    <NextUIProvider navigate={router.push}>\n      {children}\n    </NextUIProvider>\n  )\n}\n`})}),(0,n.jsx)(e.h4,{id:\"add-provider-to-root\",children:\"Add Provider to Root\"}),(0,n.jsxs)(e.p,{children:[\"Now, Go to your \",(0,n.jsx)(e.code,{children:\"root\"}),\" layout page and wrap it with the \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\":\"]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{6,8,10}\",children:`// app/layout.tsx\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className='dark'>\n      <body>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  );\n}\n`})}),(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": Skip this step if you already set up the \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\" in your app.\"]}),`\n`]}),(0,n.jsx)(e.h4,{id:\"add-usehref-optional\",children:\"Add useHref (Optional)\"}),(0,n.jsxs)(e.p,{children:[\"If you are using the Next.js \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/next-config-js/basePath\",children:\"basePath\"}),\" setting, you'll need to configure an environment variable to access it.\"]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// next.config.js\nconst basePath = '...';\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath\n  }\n};\n`})}),(0,n.jsxs)(e.p,{children:[\"Then, provide a custom \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" function to prepend it to the href for all links.\"]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{9,12}\",children:`// app/providers.tsx\n'use client'\n\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/navigation'\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  const router = useRouter();\n  const useHref = (href: string) => process.env.BASE_PATH + href;\n\n  return (\n    <NextUIProvider navigate={router.push} useHref={useHref}>\n      {children}\n    </NextUIProvider>\n  )\n}\n`})})]}),`\n`,(0,n.jsx)(e.h3,{id:\"pages-router\",children:\"Pages Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to pages\",(0,n.jsx)(e.code,{children:\"/_app.js\"}),\" or \",(0,n.jsx)(e.code,{children:\"pages/_app.tsx\"}),\" (create it if it doesn't exist) and add the\",(0,n.jsx)(e.code,{children:\"useRouter\"}),` hook\nfrom `,(0,n.jsx)(e.code,{children:\"next/router\"}),\", it returns a router object that can be used to perform navigation.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{7,10}\",children:`// pages/_app.tsx\nimport type { AppProps } from 'next/app';\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/router';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n\n  return (\n    <NextUIProvider navigate={router.push}>\n      <Component {...pageProps} />\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/next-config-js/basePath\",children:\"basePath\"}),\" configuration option, provide a \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" option to the router passed to Provider to prepend it to links automatically.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{8,11}\",children:`// pages/_app.tsx\nimport type { AppProps } from 'next/app';\nimport {NextUIProvider} from '@nextui-org/react';\nimport {useRouter} from 'next/router';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n  const useHref = (href: string) => router.basePath + href;\n\n  return (\n    <NextUIProvider navigate={router.push} useHref={useHref}>\n      <Component {...pageProps} />\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"react-router\",children:\"React Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" hook from \",(0,n.jsx)(e.code,{children:\"react-router-dom\"}),\" returns a \",(0,n.jsx)(e.code,{children:\"navigate\"}),\" function that can be used to perform navigation.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" hook can also be provided if you're using React Router's \",(0,n.jsx)(e.code,{children:\"basename\"}),\" option. Ensure that the component that calls useNavigate and renders Provider is inside the router component (e.g. \",(0,n.jsx)(e.code,{children:\"BrowserRouter\"}),\") so that it has access to React Router's internal context. The React Router \",(0,n.jsx)(e.code,{children:\"<Routes>\"}),\" element should also be defined inside \",(0,n.jsx)(e.code,{children:\"<NextUIProvider>\"}),\" so that links inside the rendered routes have access to the router.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to the \",(0,n.jsx)(e.code,{children:\"App\"}),\" file commonly called \",(0,n.jsx)(e.code,{children:\"App.jsx\"}),\" or \",(0,n.jsx)(e.code,{children:\"App.tsx\"}),\", add the \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),` hook and pass the\n`,(0,n.jsx)(e.code,{children:\"navigate\"}),\" function to the \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",meta:\"{6,9}\",children:`// App.tsx or App.jsx\nimport {BrowserRouter, useNavigate, useHref} from 'react-router-dom';\nimport {NextUIProvider} from '@nextui-org/react';\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <NextUIProvider navigate={navigate} useHref={useHref}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </NextUIProvider>\n  );\n}\n\n\n// main.tsx or main.jsx\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Ensure that the component that calls \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" and renders \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),` is inside the router\ncomponent (e.g. `,(0,n.jsx)(e.code,{children:\"BrowserRouter\"}),\") so that it has access to React Router's internal context. The React Router \",(0,n.jsx)(e.code,{children:\"<Routes>\"}),`\nelement should also be defined inside `,(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),` so that links inside the rendered routes have access\nto the router.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"remix\",children:\"Remix\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remix uses React Router under the hood, so the same \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" and \",(0,n.jsx)(e.code,{children:\"useHref\"}),` hook described above also works in Remix\napps. `,(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\" should be rendered at the \",(0,n.jsx)(e.code,{children:\"root\"}),` of each page that includes NextUI components, or in\n`,(0,n.jsx)(e.code,{children:\"app/root.tsx\"}),\" to add it to all pages. See the \",(0,n.jsx)(e.a,{href:\"https://remix.run/docs/en/main/file-conventions/root\",children:\"Remix docs\"}),`\nfor more details.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",meta:\"{14}\",children:`// app/root.tsx\nimport {useNavigate, useHref, Outlet} from '@remix-run/react';\nimport {NextUIProvider} from '@nextui-org/react';\n\nexport default function App() {\n  const navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* ... */}\n      </head>\n      <body>\n        <NextUIProvider navigate={navigate} useHref={useHref}>\n          <Outlet />\n        </NextUIProvider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"tanstack\",children:\"TanStack\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To use \",(0,n.jsx)(e.a,{href:\"https://tanstack.com/router/latest\",children:\"TanStack Router\"}),\" with NextUI, render NextUI's RouterProvider inside your root route. Use \",(0,n.jsx)(e.code,{children:\"router.navigate\"}),\" in the \",(0,n.jsx)(e.code,{children:\"navigate\"}),\" prop, and \",(0,n.jsx)(e.code,{children:\"router.buildLocation\"}),\" in the \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" prop.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{9,10}\",children:`// app/root.tsx\nimport {NextUIProvider} from '@nextui-org/react';\n\nfunction RootRoute() {\n  let router = useRouter();\n\n  return (\n    <NextUIProvider \n      navigate={(to, options) => router.navigate({ to, ...options })}\n      useHref={(to) => router.buildLocation(to).href}\n    >\n      {/* You app here... */}\n    </NextUIProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage-examples\",children:\"Usage examples\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that you have set up the \",(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\" in your app, you can use the \",(0,n.jsx)(e.code,{children:\"href\"}),\" prop in the \",(0,n.jsx)(e.code,{children:\"Tabs\"}),`,\n`,(0,n.jsx)(e.code,{children:\"Listbox\"}),\" and \",(0,n.jsx)(e.code,{children:\"Dropdown\"}),\" items to navigate between pages.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.a,{href:\"/docs/components/link\",children:\"Link\"}),\" component will also use the \",(0,n.jsx)(e.code,{children:\"navigate\"}),` function from the\n`,(0,n.jsx)(e.code,{children:\"NextUIProvider\"}),\" to navigate between pages.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import {\n  Tabs,\n  Tab,\n  Listbox,\n  ListboxItem,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Button,\n  Link,\n} from \"@nextui-org/react\";\n\nfunction App() {\n  return (\n    <>\n      <Tabs aria-label=\"Navigation\">\n        <Tab key=\"home\" href=\"/home\">Home</Tab>\n        <Tab key=\"about\" href=\"/about\">About</Tab>\n      </Tabs>\n      <Listbox aria-label=\"Navigation\">\n        <ListboxItem key=\"home\" href=\"/home\">Home</ListboxItem>\n        <ListboxItem key=\"about\" href=\"/about\">About</ListboxItem>\n      </Listbox>\n      <Dropdown>\n        <DropdownTrigger>\n          <Button>Open</Button>\n        </DropdownTrigger>\n        <DropdownMenu aria-label=\"Navigation\">\n          <DropdownItem key=\"home\" href=\"/home\">Home</DropdownItem>\n          <DropdownItem key=\"about\" href=\"/about\">About</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Link href=\"/home\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </>\n  );\n}\n`})})]})}function u(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(p,{...r})}):p(r)}function d(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return P(I);})();\n;return Component;"
  },
  "_id": "docs/guide/routing.mdx",
  "_raw": {
    "sourceFilePath": "docs/guide/routing.mdx",
    "sourceFileName": "routing.mdx",
    "sourceFileDir": "docs/guide",
    "contentType": "mdx",
    "flattenedPath": "docs/guide/routing"
  },
  "type": "Doc",
  "slug": "/docs/guide/routing",
  "slugAsParams": "guide/routing",
  "url": "/docs/guide/routing"
}