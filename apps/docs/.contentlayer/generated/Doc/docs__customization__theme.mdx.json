{
  "title": "Theme",
  "description": "Learn how to customize your application's appearance using NextUI's TailwindCSS plugin.",
  "body": {
    "raw": "\n# Theme\n\nTheming is a key element in designing user interfaces (UIs). It enables the application of a\nconsistent aesthetic across your application, enhancing the user experience and maintaining\nvisual uniformity.\n\nIn NextUI, we facilitate easy and flexible theme customization using a\nTailwindCSS plugin. This plugin, which is based on the [tw-colors](https://github.com/L-Blondy/tw-colors)\nplugin developed by [L-Blondy](https://github.com/L-Blondy), allows you to customize color schemes,\nlayout configurations, and more, across different components of your application.\n\n<CarbonAd/>\n\n## What is a Theme?\n\nA theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other\nUI elements that you can consistently apply across your application. Themes ensure visual\nconsistency, enrich the user experience, and simplify the management and updates of your\napp's look and feel.\n\n## Setup\n\nThe first step to using NextUI's theming capability is adding the `nextui` plugin to your\n`tailwind.config.js` file. Below is an example of how to do this:\n\n<Blockquote color=\"primary\">\n**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`\n</Blockquote>\n\n```js {9,14-15}\n// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // ...\n    // make sure it's pointing to the ROOT node_module\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  darkMode: \"class\",\n  plugins: [nextui()],\n};\n```\n\n### Usage\n\nAfter adding the plugin to your `tailwind.config.js` file, you can utilize any of the default\nthemes (light/dark) or a custom one. Here's how you can apply these themes in your `main.jsx` or `main.tsx`:\n\nGo to the src directory and inside `main.jsx` or `main.tsx`, apply the following class names to the root element:\n\n- `light` for the light theme.\n- `dark` for the dark theme.\n- `text-foreground` to set the text color.\n- `bg-background` to set the background color.\n\n```jsx {11}\n// main.tsx or main.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <NextUIProvider>\n      <main className=\"dark text-foreground bg-background\">\n        <App />\n      </main>\n    </NextUIProvider>\n  </React.StrictMode>,\n);\n```\n\n> **Note**: See the [Colors](/docs/customization/colors) section to learn more about the color classes.\n\n### Default Plugin Options\n\nThe `nextui` plugin provides a default structure. It is outlined as follows:\n\n```js\nmodule.exports = {\n  plugins: [\n    nextui({\n      prefix: \"nextui\", // prefix for themes variables\n      addCommonColors: false, // override common colors (e.g. \"blue\", \"green\", \"pink\").\n      defaultTheme: \"light\", // default theme from the themes object\n      defaultExtendTheme: \"light\", // default theme to extend on custom themes\n      layout: {}, // common layout tokens (applied to all themes)\n      themes: {\n        light: {\n          layout: {}, // light theme layout tokens\n          colors: {}, // light theme colors\n        },\n        dark: {\n          layout: {}, // dark theme layout tokens\n          colors: {}, // dark theme colors\n        },\n        // ... custom themes\n      },\n    }),\n  ],\n};\n```\n\n### Themes Options\n\nThese are the options that you can use to apply custom configurations to your themes.\n\n```js {6-7,10-11}\nmodule.exports = {\n  plugins: [\n    nextui({\n      themes: {\n        light: {\n          layout: {},\n          colors: {}\n        },\n        dark: {\n          layout: {},\n          colors: {}\n        },\n        ... // custom themes\n      }\n    })\n  ]\n}\n```\n\n### Nested themes\n\nNextUI supports nested themes, allowing you to apply different themes to different sections\nof your application:\n\n```html\n<html class=\"dark\">\n  ...\n  <div class=\"light\">...</div>\n  <div class=\"purple-dark\">...</div>\n</html>\n```\n\n### Theme based variants\n\nNextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are\nexamples of how to do this:\n\n```html\n<!-- In dark theme, background will be dark and text will be light. \n  In light theme, background will be light and text will be dark -->\n\n<div class=\"dark dark:bg-gray-800 dark:text-white bg-white text-black\">\n  ...\n  <div>Text color changes based on theme</div>\n</div>\n\n<div class=\"light light:bg-gray-100 light:text-black bg-black text-white\">\n  ...\n  <div>Text color changes based on theme</div>\n</div>\n```\n\n### API Reference\n\nThe following table provides an overview of the various attributes you can use when working\nwith themes in NextUI:\n\n| Attribute          | Type                          | Description                                                                                                     | Default  |\n| ------------------ | ----------------------------- | --------------------------------------------------------------------------------------------------------------- | -------- |\n| prefix             | `string`                      | The prefix for the css variables.                                                                               | `nextui` |\n| addCommonColors    | `boolean`                     | If true, the common nextui colors (e.g. \"blue\", \"green\", \"purple\") will replace the TailwindCSS default colors. | `false`  |\n| defaultTheme       | `light` \\| `dark`             | The default theme to use.                                                                                       | `light`  |\n| defaultExtendTheme | `light` \\| `dark`             | The default theme to extend.                                                                                    | `light`  |\n| layout             | [LayoutTheme](#layouttheme)   | The layout definitions.                                                                                         | -        |\n| themes             | [ConfigThemes](#configthemes) | The theme definitions.                                                                                          | -        |\n\n### Types\n\n#### ConfigThemes\n\n```ts\ntype ConfigTheme = {\n  extend?: \"light\" | \"dark\"; // base theme to extend\n  layout?: LayoutTheme; // see LayoutTheme\n  colors?: ThemeColors; // see ThemeColors\n};\n\ntype ConfigThemes = Record<string, ConfigTheme>;\n```\n\n#### LayoutTheme\n\n```ts\ntype BaseThemeUnit = {\n  small?: string;\n  medium?: string;\n  large?: string;\n};\n\ntype FontThemeUnit = {\n  small?: string;\n  medium?: string;\n  large?: string;\n  tiny?: string;\n};\n\ninterface LayoutTheme {\n  /**\n   * The default font size applied across the components.\n   */\n  fontSize?: FontThemeUnit;\n  /**\n   * The default line height applied across the components.\n   */\n  lineHeight?: FontThemeUnit;\n  /**\n   * The default radius applied across the components.\n   * we recommend to use `rem` units.\n   */\n  radius?: BaseThemeUnit;\n  /**\n   * A number between 0 and 1 that is applied as opacity-[value] when\n   * the component is disabled.\n   */\n  disabledOpacity?: string | number;\n  /**\n   * The default height applied to the divider component.\n   * we recommend to use `px` units.\n   */\n  dividerWeight?: string;\n  /**\n   * The border width applied across the components.\n   */\n  borderWidth?: BaseThemeUnit;\n  /**\n   * The box shadow applied across the components.\n   */\n  boxShadow?: BaseThemeUnit;\n}\n```\n\n#### ThemeColors\n\n```ts\ntype ColorScale = {\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n  foreground: string; // contrast color\n  DEFAULT: string;\n};\n\ntype BaseColors = {\n  background: ColorScale; // the page background color\n  foreground: ColorScale; // the page text color\n  divider: ColorScale; // used for divider and single line border\n  overlay: ColorScale; // used for modal, popover, etc.\n  focus: ColorScale; // used for focus state outline\n  content1: ColorScale; // used for card, modal, popover, etc.\n  content2: ColorScale;\n  content3: ColorScale;\n  content4: ColorScale;\n};\n\n// brand colors\ntype ThemeColors = BaseColors & {\n  default: ColorScale;\n  primary: ColorScale;\n  secondary: ColorScale;\n  success: ColorScale;\n  warning: ColorScale;\n  danger: ColorScale;\n};\n```\n",
    "code": "var Component=(()=>{var u=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var o in e)l(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!y.call(t,r)&&r!==o&&l(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var T=(t,e,o)=>(o=t!=null?u(f(t)):{},d(e||!t||!t.__esModule?l(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>d(l({},\"__esModule\",{value:!0}),t);var c=x((S,a)=>{a.exports=_jsx_runtime});var C={};b(C,{default:()=>m,frontmatter:()=>k});var n=T(c()),k={title:\"Theme\",description:\"Learn how to customize your application's appearance using NextUI's TailwindCSS plugin.\"};function h(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...t.components},{Blockquote:o,CarbonAd:i}=e;return o||s(\"Blockquote\",!0),i||s(\"CarbonAd\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"theme\",children:\"Theme\"}),`\n`,(0,n.jsx)(e.p,{children:`Theming is a key element in designing user interfaces (UIs). It enables the application of a\nconsistent aesthetic across your application, enhancing the user experience and maintaining\nvisual uniformity.`}),`\n`,(0,n.jsxs)(e.p,{children:[`In NextUI, we facilitate easy and flexible theme customization using a\nTailwindCSS plugin. This plugin, which is based on the `,(0,n.jsx)(e.a,{href:\"https://github.com/L-Blondy/tw-colors\",children:\"tw-colors\"}),`\nplugin developed by `,(0,n.jsx)(e.a,{href:\"https://github.com/L-Blondy\",children:\"L-Blondy\"}),`, allows you to customize color schemes,\nlayout configurations, and more, across different components of your application.`]}),`\n`,(0,n.jsx)(i,{}),`\n`,(0,n.jsx)(e.h2,{id:\"what-is-a-theme\",children:\"What is a Theme?\"}),`\n`,(0,n.jsx)(e.p,{children:`A theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other\nUI elements that you can consistently apply across your application. Themes ensure visual\nconsistency, enrich the user experience, and simplify the management and updates of your\napp's look and feel.`}),`\n`,(0,n.jsx)(e.h2,{id:\"setup\",children:\"Setup\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The first step to using NextUI's theming capability is adding the \",(0,n.jsx)(e.code,{children:\"nextui\"}),` plugin to your\n`,(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file. Below is an example of how to do this:\"]}),`\n`,(0,n.jsx)(o,{color:\"primary\",children:(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT \",(0,n.jsx)(e.code,{children:\"node_modules\"})]})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",meta:\"{9,14-15}\",children:`// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // ...\n    // make sure it's pointing to the ROOT node_module\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  darkMode: \"class\",\n  plugins: [nextui()],\n};\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"After adding the plugin to your \",(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),` file, you can utilize any of the default\nthemes (light/dark) or a custom one. Here's how you can apply these themes in your `,(0,n.jsx)(e.code,{children:\"main.jsx\"}),\" or \",(0,n.jsx)(e.code,{children:\"main.tsx\"}),\":\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to the src directory and inside \",(0,n.jsx)(e.code,{children:\"main.jsx\"}),\" or \",(0,n.jsx)(e.code,{children:\"main.tsx\"}),\", apply the following class names to the root element:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"light\"}),\" for the light theme.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"dark\"}),\" for the dark theme.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"text-foreground\"}),\" to set the text color.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"bg-background\"}),\" to set the background color.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",meta:\"{11}\",children:`// main.tsx or main.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <NextUIProvider>\n      <main className=\"dark text-foreground bg-background\">\n        <App />\n      </main>\n    </NextUIProvider>\n  </React.StrictMode>,\n);\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": See the \",(0,n.jsx)(e.a,{href:\"/docs/customization/colors\",children:\"Colors\"}),\" section to learn more about the color classes.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"default-plugin-options\",children:\"Default Plugin Options\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"nextui\"}),\" plugin provides a default structure. It is outlined as follows:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`module.exports = {\n  plugins: [\n    nextui({\n      prefix: \"nextui\", // prefix for themes variables\n      addCommonColors: false, // override common colors (e.g. \"blue\", \"green\", \"pink\").\n      defaultTheme: \"light\", // default theme from the themes object\n      defaultExtendTheme: \"light\", // default theme to extend on custom themes\n      layout: {}, // common layout tokens (applied to all themes)\n      themes: {\n        light: {\n          layout: {}, // light theme layout tokens\n          colors: {}, // light theme colors\n        },\n        dark: {\n          layout: {}, // dark theme layout tokens\n          colors: {}, // dark theme colors\n        },\n        // ... custom themes\n      },\n    }),\n  ],\n};\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"themes-options\",children:\"Themes Options\"}),`\n`,(0,n.jsx)(e.p,{children:\"These are the options that you can use to apply custom configurations to your themes.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",meta:\"{6-7,10-11}\",children:`module.exports = {\n  plugins: [\n    nextui({\n      themes: {\n        light: {\n          layout: {},\n          colors: {}\n        },\n        dark: {\n          layout: {},\n          colors: {}\n        },\n        ... // custom themes\n      }\n    })\n  ]\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"nested-themes\",children:\"Nested themes\"}),`\n`,(0,n.jsx)(e.p,{children:`NextUI supports nested themes, allowing you to apply different themes to different sections\nof your application:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<html class=\"dark\">\n  ...\n  <div class=\"light\">...</div>\n  <div class=\"purple-dark\">...</div>\n</html>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"theme-based-variants\",children:\"Theme based variants\"}),`\n`,(0,n.jsx)(e.p,{children:`NextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are\nexamples of how to do this:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<!-- In dark theme, background will be dark and text will be light. \n  In light theme, background will be light and text will be dark -->\n\n<div class=\"dark dark:bg-gray-800 dark:text-white bg-white text-black\">\n  ...\n  <div>Text color changes based on theme</div>\n</div>\n\n<div class=\"light light:bg-gray-100 light:text-black bg-black text-white\">\n  ...\n  <div>Text color changes based on theme</div>\n</div>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"api-reference\",children:\"API Reference\"}),`\n`,(0,n.jsx)(e.p,{children:`The following table provides an overview of the various attributes you can use when working\nwith themes in NextUI:`}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Attribute\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"}),(0,n.jsx)(e.th,{children:\"Default\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"prefix\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{children:\"The prefix for the css variables.\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"nextui\"})})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"addCommonColors\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:'If true, the common nextui colors (e.g. \"blue\", \"green\", \"purple\") will replace the TailwindCSS default colors.'}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"defaultTheme\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"light\"}),\" | \",(0,n.jsx)(e.code,{children:\"dark\"})]}),(0,n.jsx)(e.td,{children:\"The default theme to use.\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"light\"})})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"defaultExtendTheme\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"light\"}),\" | \",(0,n.jsx)(e.code,{children:\"dark\"})]}),(0,n.jsx)(e.td,{children:\"The default theme to extend.\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"light\"})})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"layout\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"#layouttheme\",children:\"LayoutTheme\"})}),(0,n.jsx)(e.td,{children:\"The layout definitions.\"}),(0,n.jsx)(e.td,{children:\"-\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"themes\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"#configthemes\",children:\"ConfigThemes\"})}),(0,n.jsx)(e.td,{children:\"The theme definitions.\"}),(0,n.jsx)(e.td,{children:\"-\"})]})]})]}),`\n`,(0,n.jsx)(e.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,n.jsx)(e.h4,{id:\"configthemes\",children:\"ConfigThemes\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`type ConfigTheme = {\n  extend?: \"light\" | \"dark\"; // base theme to extend\n  layout?: LayoutTheme; // see LayoutTheme\n  colors?: ThemeColors; // see ThemeColors\n};\n\ntype ConfigThemes = Record<string, ConfigTheme>;\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"layouttheme\",children:\"LayoutTheme\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`type BaseThemeUnit = {\n  small?: string;\n  medium?: string;\n  large?: string;\n};\n\ntype FontThemeUnit = {\n  small?: string;\n  medium?: string;\n  large?: string;\n  tiny?: string;\n};\n\ninterface LayoutTheme {\n  /**\n   * The default font size applied across the components.\n   */\n  fontSize?: FontThemeUnit;\n  /**\n   * The default line height applied across the components.\n   */\n  lineHeight?: FontThemeUnit;\n  /**\n   * The default radius applied across the components.\n   * we recommend to use \\`rem\\` units.\n   */\n  radius?: BaseThemeUnit;\n  /**\n   * A number between 0 and 1 that is applied as opacity-[value] when\n   * the component is disabled.\n   */\n  disabledOpacity?: string | number;\n  /**\n   * The default height applied to the divider component.\n   * we recommend to use \\`px\\` units.\n   */\n  dividerWeight?: string;\n  /**\n   * The border width applied across the components.\n   */\n  borderWidth?: BaseThemeUnit;\n  /**\n   * The box shadow applied across the components.\n   */\n  boxShadow?: BaseThemeUnit;\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"themecolors\",children:\"ThemeColors\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`type ColorScale = {\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n  foreground: string; // contrast color\n  DEFAULT: string;\n};\n\ntype BaseColors = {\n  background: ColorScale; // the page background color\n  foreground: ColorScale; // the page text color\n  divider: ColorScale; // used for divider and single line border\n  overlay: ColorScale; // used for modal, popover, etc.\n  focus: ColorScale; // used for focus state outline\n  content1: ColorScale; // used for card, modal, popover, etc.\n  content2: ColorScale;\n  content3: ColorScale;\n  content4: ColorScale;\n};\n\n// brand colors\ntype ThemeColors = BaseColors & {\n  default: ColorScale;\n  primary: ColorScale;\n  secondary: ColorScale;\n  success: ColorScale;\n  warning: ColorScale;\n  danger: ColorScale;\n};\n`})})]})}function m(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}function s(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(C);})();\n;return Component;"
  },
  "_id": "docs/customization/theme.mdx",
  "_raw": {
    "sourceFilePath": "docs/customization/theme.mdx",
    "sourceFileName": "theme.mdx",
    "sourceFileDir": "docs/customization",
    "contentType": "mdx",
    "flattenedPath": "docs/customization/theme"
  },
  "type": "Doc",
  "slug": "/docs/customization/theme",
  "slugAsParams": "customization/theme",
  "url": "/docs/customization/theme"
}