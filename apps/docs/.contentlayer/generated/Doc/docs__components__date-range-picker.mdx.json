{
  "title": "Date Range Picker",
  "description": "DateRangePicker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.",
  "body": {
    "raw": "\nimport {dateRangePickerContent} from \"@/content/components/date-range-picker\";\n\n# Date Range Picker\n\nDate Range Picker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.\n\n<ComponentLinks component=\"date-picker\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add date-picker\",\n    npm: \"npm install @nextui-org/date-picker\",\n    yarn: \"yarn add @nextui-org/date-picker\",\n    pnpm: \"pnpm add @nextui-org/date-picker\",\n    bun: \"bun add @nextui-org/date-picker\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {DateRangePicker} from \"@nextui-org/react\";',\n    individual: 'import {DateRangePicker} from \"@nextui-org/date-picker\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={dateRangePickerContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={dateRangePickerContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Read Only\" files={dateRangePickerContent.readOnly} />\n\n### Required\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at\nthe end of the label and the input will be required.\n\n<CodeDemo title=\"Required\" files={dateRangePickerContent.required} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={dateRangePickerContent.variants} />\n\n### Visible Months\n\nBy default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.\n\n<CodeDemo title=\"Visible Months\" files={dateRangePickerContent.visibleMonth} />\n\n### Page Behavior\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n<CodeDemo title=\"Page Behavior\" files={dateRangePickerContent.pageBehavior} />\n\n### Label Placements\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n<CodeDemo title=\"Label Placements\" files={dateRangePickerContent.labelPlacements} />\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### With Description\n\nYou can add a description to the input by passing the `description` property.\n\n<CodeDemo title=\"With Description\" files={dateRangePickerContent.description} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\n<CodeDemo title=\"With Error Message\" files={dateRangePickerContent.errorMessage} />\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).\n\n<CodeDemo title=\"With Error Message Function\" files={dateRangePickerContent.errorMessageFunction} />\n\n### With Month and Year Pickers\n\nYou can show month and year pickers in the calendar popover by setting the `showMonthAndYearPickers` property to `true`. However, passing a number greater than 1 to the `visibleMonths` prop will disable this feature.\n\n<CodeDemo title=\"With Month and Year Pickers\" files={dateRangePickerContent.withMonthAndYearPickers} />\n\n### With Time Fields\n\nDateRangePicker automatically includes time fields when a `CalendarDateTime` or `ZonedDateTime` object is provided as the value.\n\n<CodeDemo title=\"With Time Fields\" files={dateRangePickerContent.withTimeField} />\n\n### Selector Icon\n\nYou can use the `selector` to add content to the start and end of the date-range-picker.\n\n<CodeDemo title=\"Selector Icon\" files={dateRangePickerContent.selectorIcon} />\n\n### Selector Button Placement\n\nYou can change the position of the selector button by setting the `selectorButtonPlacement` property to `start` or `end`.\n\n<CodeDemo title=\"Selector Button Placement\" files={dateRangePickerContent.selectorButtonPlacement} />\n\n### Controlled\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={dateRangePickerContent.controlled} />\n\n### Time Zones\n\nDateRangePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {parseZonedDateTime} from \"@internationalized/date\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={dateRangePickerContent.timeZones} />\n\n### Granularity\n\nThe granularity prop allows you to control the smallest unit that is displayed by DateRangePicker By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={dateRangePickerContent.granularity} />\n\n### Min Date And Max Date\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n```\n\n<CodeDemo title=\"Min Date And Max Date\" files={dateRangePickerContent.minAndMaxDate} />\n\n### International Calendar\n\nDateRangePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),\npassed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"International Calendar\" files={dateRangePickerContent.internationalCalendar} />\n\n### Unavailable Dates\n\nDateRangePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"Unavailable Dates\" files={dateRangePickerContent.unavailableDates} />\n\n### Non Contiguous\n\nThe allowsNonContiguousRanges prop enables a range to be selected even if there are unavailable dates in the middle.\nThe value emitted in the onChange event will still be a single range with a start and end property,\nbut unavailable dates will not be displayed as selected.\nIt is up to applications to split the full selected range into multiple as needed for business logic.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"Non Contiguous\" files={dateRangePickerContent.nonContigous} />\n\n### Presets\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {\n  DateValue,\n  now,\n  startOfWeek,\n  startOfMonth,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"Presets\" files={dateRangePickerContent.presets} />\n\n## Slots\n\n- **base**: base element. it handles alignment, placement, and general appearance.\n- **label**: Label of the date-range-picker, it is the one that is displayed above, inside or left of the date-input.\n- **calendar**: The calendar element.\n- **selectorButton**: Selector button element.\n- **selectorIcon**: Selector icon element.\n- **popoverContent**: The calendar popover element.\n- **calendarContent**: The calendar's content element.\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **input**: The input element.\n- **segment**: The segment element.\n- **separator**: The separator element.\n- **bottomContent**: The bottom content element.\n- **timeInputWrapper**: The wrapper element for the input element.\n- **helperWrapper**: Wraps the `description` and the `errorMessage`.\n- **description**: The description of the date-input.\n- **errorMessage**: The error message of the date-input.\n\n### Custom Styles\n\nYou can customize the `DateRangePicker` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={dateRangePickerContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`DateRangePicker` has the following attributes on the `base` element:\n\n- **data-slot**:\n  All slots have this prop. which slot the element represents(e.g. `canlendar`).\n- **data-open**:\n  Indicates if the calendar popover is open.\n- **data-invalid**:\n  When the date-range-picker is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the date-range-picker is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the date-range-picker is readonly. Based on `isReadOnly` prop.\n- **data-disabled**:\n  When the date-range-picker is disabled. Based on `isDisabled` prop.\n- **data-has-start-content**:\n  When the date-range-picker has a start content. Base on those `startContent` prop.\n- **data-has-end-content**:\n  When the date-range-picker has a end content. Base on those `endContent` prop.\n- **data-has-multiple-months**:\n  When the date-range-picker's `visibleMonth` is more than 2.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale\n- Users can also open a calendar popover to select date ranges in a standard month grid. Localized screen reader messages are included to announce when the selection and visible date range change.\n- Date segments are editable using an easy to use numeric keypad, date ranges can be selected by dragging over dates in the calendar using a touch screen, and all interactions are accessible using touch-based screen readers.\n- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\n\n<Spacer y={4} />\n\n## API\n\n### DateRangePicker Props\n\n| Attribute                 | Type                                                                                                                                                     | Description                                                                                                                                                             | Default                                                              |\n|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------|\n| label                     | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                                    | -                                                                    |\n| value                     | `RangeValue<CalendarDate \\| CalendarDateTime \\| ZonedDateTime>` \\| `undefined` \\| `null`                                                                 | The current value of the date-range-picker (controlled).                                                                                                                | -                                                                    |\n| variant                   | `flat` \\| `bordered` \\| `faded` \\| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                          | `flat`                                                               |\n| color                     | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                                                                              | The color of the date input.                                                                                                                                            | `default`                                                            |\n| size                      | `sm` \\| `md` \\| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                             | `md`                                                                 |\n| radius                    | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                                                                                                 | The radius of the date input.                                                                                                                                           | -                                                                    |\n| minValue                  | `RangeValue<CalendarDate \\| CalendarDateTime \\| ZonedDateTime>` \\| `undefined` \\| `null`                                                                 | The minimum value of the date-range-picker.                                                                                                                             | -                                                                    |\n| maxValue                  | `RangeValue<CalendarDate \\| CalendarDateTime \\| ZonedDateTime>` \\| `undefined` \\| `null`                                                                 | The maximum value of the date-range-picker.                                                                                                                             | -                                                                    |\n| defaultValue              | `string`                                                                                                                                                 | The default value of the date-range-picker (uncontrolled).                                                                                                              | -                                                                    |\n| placeholderValue          | `ZonedDateTime` \\| `CalendarDate` \\| `CalendarDateTime` \\| `undefined` \\| `null`                                                                         | The placeholder of the date-range-picker.                                                                                                                               | -                                                                    |\n| description               | `ReactNode`                                                                                                                                              | A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.                                                              | -                                                                    |\n| errorMessage              | `ReactNode \\| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                                    | -                                                                    |\n| validate                  | `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError ｜ true ｜ null ｜ undefined`                                                         | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                                                    |\n| validationBehavior        | `native` \\| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.          | `aria`                                                               |\n| startContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-range-picker.                                                                                                       | -                                                                    |\n| endContent                | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-range-picker.                                                                                                      | -                                                                    |\n| startName                 | `string`                                                                                                                                                 | The name of the start date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname) | -                                                                    |\n| endName                   | `string`                                                                                                                                                 | The name of the end date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)   | -                                                                    |\n| labelPlacement            | `inside` \\| `outside` \\| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                              | `inside`                                                             |\n| isOpen                    | `boolean`                                                                                                                                                | Whether the date picker popover is open.                                                                                                                                | -                                                                    |\n| defaultOpen               | `boolean`                                                                                                                                                | Whether the date picker popover is open by default.                                                                                                                     | `false`                                                              |\n| isRequired                | `boolean`                                                                                                                                                | Whether user input is required on the date-range-picker before form submission.                                                                                         | `false`                                                              |\n| isReadOnly                | `boolean`                                                                                                                                                | Whether the date-range-picker can be selected but not changed by the user.                                                                                              |                                                                      |\n| isDisabled                | `boolean`                                                                                                                                                | Whether the date-range-picker is disabled.                                                                                                                              | `false`                                                              |\n| isInvalid                 | `boolean`                                                                                                                                                | Whether the date-range-picker is invalid.                                                                                                                               | `false`                                                              |\n| selectorIcon              | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                                    |                                                                      |\n| pageBehavior              | `single` \\| `visible`                                                                                                                                    | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                     | `visible`                                                            |\n| visibleMonths             | `number`                                                                                                                                                 | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.                 | `1`                                                                  |\n| autoFocus                 | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                                     | `false`                                                              |\n| hourCycle                 | `12` \\| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                           | -                                                                    |\n| granularity               | `day` \\| `hour` \\| `minute` \\| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically \"day\" for dates.                                                                           | -                                                                    |\n| hideTimeZone              | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                             | `false`                                                              |\n| allowsNonContiguousRanges | `boolean`                                                                                                                                                | When combined with `isDateUnavailable`, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.                            | `false`                                                              |\n| shouldForceLeadingZeros   | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                                | `true`                                                               |\n| calendarWidth             | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                                      | `256`                                                                |\n| CalendarTopContent        | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                                   |                                                                      |\n| CalendarBottomContent     | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                                |                                                                      |\n| showMonthAndYearPickers   | `boolean`                                                                                                                                                | Whether the calendar should show month and year pickers.                                                                                                                | `false`                                                              |\n| allowsNonContiguousRanges | `boolean`                                                                                                                                                | enables a range to be selected even if there are unavailable dates in the middle                                                                                        | `false`                                                              |\n| popoverProps              | [PopoverProps](/docs/components/popover#api)                                                                                                             | Props to be passed to the popover component.                                                                                                                            | `{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }`     |\n| selectorButtonProps       | `ButtonProps`                                                                                                                                            | Props to be passed to the selector button component.                                                                                                                    | `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }` |\n| selectorButtonPlacement   | `start` \\| `end`                                                                                                                                         | The position of the selector button.                                                                                                                                    | `end`                                                                |\n| calendarProps             | `CalendarProps`                                                                                                                                          | Props to be passed to the selector button component.                                                                                                                    | `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }` |\n| timeInputProps            | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                                         | `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }` |\n| disableAnimation          | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                           | `false`                                                              |\n| classNames                | `Record<\"base\" \\| \"selectorButton\" \\| \"selectorIcon\" \\| \"popoverContent\" \\| \"calendar\" \\| \"calendarContent\" \\| \"timeInputLabel\" \\| \"timeInput\", string>` | Allows to set custom class names for the date-range-picker slots.                                                                                                       | -                                                                    |\n\n### DateRangePicker Events\n\n| Attribute     | Type                                                                                            | Description                                                              |     |\n| ------------- | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | --- |\n| onChange      | `((value: RangeValue<CalendarDate \\| CalendarDateTime \\| ZonedDateTime>) => void)` \\| undefined | Handler that is called when the date-range-picker's value changes.       | -   |\n| onOpenChange  | `(isOpen: boolean) => void`                                                                     | Handler that is called when the date picker popover is opened or closed. | -   |\n| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element receives focus.                  | -   |\n| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element loses focus.                     | -   |\n| onFocusChange | `(isFocused: boolean) => void`                                                                  | Handler that is called when the element's focus status changes.          | -   |\n| onKeyDown     | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is pressed.                            | -   |\n| onKeyUp       | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is released.                           | -   |\n",
    "code": "var Component=(()=>{var O=Object.create;var s=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,H=Object.prototype.hasOwnProperty;var Y=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),U=(a,t)=>{for(var i in t)s(a,i,{get:t[i],enumerable:!0})},p=(a,t,i,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let l of E(t))!H.call(a,l)&&l!==i&&s(a,l,{get:()=>t[l],enumerable:!(n=F(t,l))||n.enumerable});return a};var G=(a,t,i)=>(i=a!=null?O(q(a)):{},p(t||!a||!a.__esModule?s(i,\"default\",{value:a,enumerable:!0}):i,a)),K=a=>p(s({},\"__esModule\",{value:!0}),a);var m=Y((Qe,u)=>{u.exports=_jsx_runtime});var Xe={};U(Xe,{default:()=>_,frontmatter:()=>Ke});var e=G(m());var X=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      label=\"Stay duration\" \n      className=\"max-w-xs\" \n    />\n  );\n}`,J={\"/App.jsx\":X},f={...J};var Q=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      label=\"Stay duration\" \n      isDisabled\n      defaultValue={{\n        start: parseDate(\"2024-04-01\"),\n        end: parseDate(\"2024-04-08\"),\n      }}\n      className=\"max-w-xs\"\n    />\n  );\n}`,$={\"/App.jsx\":Q},g={...$};var ee=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      label=\"Stay duration\" \n      isReadOnly\n      defaultValue={{\n        start: parseDate(\"2024-04-01\"),\n        end: parseDate(\"2024-04-08\"),\n      }}\n      className=\"max-w-xs\"\n    />\n  );\n}`,te={\"/App.jsx\":ee},b={...te};var ne=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      label=\"Stay duration\" \n      isRequired\n      defaultValue={{\n        start: parseDate(\"2024-04-01\"),\n        end: parseDate(\"2024-04-08\"),\n      }}\n      className=\"max-w-xs\"\n    />\n  );\n}`,ae={\"/App.jsx\":ne},v={...ae};var re=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <DateRangePicker \n            variant={variant} \n            label=\"Stay duration\" \n            className=\"max-w-xs\" \n          />\n        </div>\n      ))}\n    </div>  \n  );\n}`,ie={\"/App.jsx\":re},x={...ie};var de=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  const placements = [\n    \"inside\",\n    \"outside\",\n    \"outside-left\",\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex flex-col gap-2\">\n        {placements.map((placement) => (\n          <DateRangePicker\n            key={placement}\n            label=\"Stay duration\"\n            labelPlacement={placement}\n            description={placement}\n          />\n        ))}\n      </div>  \n    </div>  \n  );\n}`,le={\"/App.jsx\":de},D={...le};var oe=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <DateRangePicker\n      label=\"Stay duration\"\n      description=\"Please enter your stay duration\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,ce={\"/App.jsx\":oe},y={...ce};var se=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      isInvalid\n      label=\"Stay duration\" \n      variant=\"bordered\"\n      errorMessage=\"Please enter your stay duration\"\n      defaultValue={{\n        start: parseDate(\"2024-04-01\"),\n        end: parseDate(\"2024-04-08\"),\n      }}\n      className=\"max-w-xs\"\n    />\n  );\n}`,he={\"/App.jsx\":se},k={...he};var pe=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <DateRangePicker \n      isInvalid\n      label=\"Stay duration\" \n      variant=\"bordered\"\n      errorMessage={(value) => {\n        if (value.isInvalid) {\n          return \"Please enter your stay duration\";\n        }\n      }}\n      defaultValue={{\n        start: parseDate(\"2024-04-01\"),\n        end: parseDate(\"2024-04-08\"),\n      }}\n      className=\"max-w-xs\"\n    />\n  );\n}`,ue={\"/App.jsx\":pe},w={...ue};var me=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DateRangePicker\n        label=\"Event duration\"\n        hideTimeZone\n        visibleMonths={2}\n        defaultValue={{\n          start: parseZonedDateTime(\"2024-04-01T00:45[America/Los_Angeles]\"),\n          end: parseZonedDateTime(\"2024-04-08T11:15[America/Los_Angeles]\"),\n        }}\n      />\n    </div>\n  );\n}`,fe={\"/App.jsx\":me},T={...fe};var ge=`export const SelectorIcon = (props) => (\n  <svg height=\"1em\" viewBox=\"0 0 24 24\" width=\"1em\" {...props}>\n    <g\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n    >\n      <path d=\"M8 2v4m8-4v4\" />\n      <rect height=\"18\" rx=\"2\" width=\"18\" x=\"3\" y=\"4\" />\n      <path d=\"M3 10h18M8 14h.01M12 14h.01M16 14h.01M8 18h.01M12 18h.01M16 18h.01\" />\n    </g>\n  </svg>\n);`,be=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {SelectorIcon} from './SelectorIcon';\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateRangePicker \n        label=\"Stay duration\"\n        selectorIcon={<SelectorIcon className=\"text-xl\" />}\n      />\n    </div> \n  );\n}`,ve={\"/App.jsx\":be,\"/SelectorIcon.jsx\":ge},R={...ve};var xe=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateRangePicker \n        label=\"Placement start\"\n        selectorButtonPlacement=\"start\"\n      />\n      <DateRangePicker \n        label=\"Placement end (default)\"\n        selectorButtonPlacement=\"end\"\n      />\n    </div> \n  );\n}`,De={\"/App.jsx\":xe},P={...De};var ye=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [value, setValue] = React.useState({\n    start: parseDate(\"2024-04-01\"),\n    end: parseDate(\"2024-04-08\"),\n  });\n\n  let formatter = useDateFormatter({dateStyle: \"long\"});\n\n  return (\n    <div className=\"flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DateRangePicker\n          label=\"Date range (controlled)\"\n          value={value}\n          onChange={setValue}\n        />\n        <p className=\"text-default-500 text-sm\">\n          Selected date:{\" \"}\n          {value\n            ? formatter.formatRange(\n                value.start.toDate(getLocalTimeZone()),\n                value.end.toDate(getLocalTimeZone()),\n              )\n            : \"--\"}\n        </p>\n      </div>\n      <DateRangePicker\n        defaultValue={{\n          start: parseDate(\"2024-04-01\"),\n          end: parseDate(\"2024-04-08\"),\n        }}\n        label=\"Date range (uncontrolled)\"\n      />\n    </div>\n  );\n}`,ke=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\nimport {RangeValue} from \"@react-types/shared\";\nimport {DateValue} from \"@react-types/datepicker\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<RangeValue<DateValue>>({\n    start: parseDate(\"2024-04-01\"),\n    end: parseDate(\"2024-04-08\"),\n  });\n\n  let formatter = useDateFormatter({dateStyle: \"long\"});\n\n  return (\n    <div className=\"flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DateRangePicker\n          label=\"Date range (controlled)\"\n          value={value}\n          onChange={setValue}\n        />\n        <p className=\"text-default-500 text-sm\">\n          Selected date:{\" \"}\n          {value\n            ? formatter.formatRange(\n                value.start.toDate(getLocalTimeZone()),\n                value.end.toDate(getLocalTimeZone()),\n              )\n            : \"--\"}\n        </p>\n      </div>\n      <DateRangePicker\n        defaultValue={{\n          start: parseDate(\"2024-04-01\"),\n          end: parseDate(\"2024-04-08\"),\n        }}\n        label=\"Date range (uncontrolled)\"\n      />\n    </div>\n  );\n}`,we={\"/App.jsx\":ye},Te={\"/App.tsx\":ke},A={...we,...Te};var Re=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseZonedDateTime, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DateRangePicker\n        defaultValue={{\n          start: parseZonedDateTime(\"2024-04-01T00:45[America/Los_Angeles]\"),\n          end: parseZonedDateTime(\"2024-04-14T11:15[America/Los_Angeles]\"),\n        }}\n        label=\"Stay duration\"\n        labelPlacement=\"outside\"\n      />\n      <DateRangePicker\n        defaultValue={{\n          start: parseAbsoluteToLocal(\"2024-04-01T07:45:00Z\"),\n          end: parseAbsoluteToLocal(\"2024-04-14T19:15:00Z\"),\n        }}\n        label=\"Stay duration\"\n        labelPlacement=\"outside\"\n      />\n    </div>\n  );\n}`,Pe={\"/App.jsx\":Re},C={...Pe};var Ae=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal(\"2024-04-01T18:45:22Z\"),\n    end: parseAbsoluteToLocal(\"2024-04-08T19:15:22Z\"),\n  });\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DateRangePicker\n        fullWidth\n        granularity=\"second\"\n        label=\"Date and time range\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateRangePicker\n        fullWidth\n        granularity=\"day\"\n        label=\"Date range\"\n        value={date}\n        onChange={setDate}\n      />\n    </div>\n  );\n}`,Ce=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {DateValue, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {RangeValue} from \"@react-types/shared\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<RangeValue<DateValue>>({\n    start: parseAbsoluteToLocal(\"2024-04-01T18:45:22Z\"),\n    end: parseAbsoluteToLocal(\"2024-04-08T19:15:22Z\"),\n  });\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DateRangePicker\n        fullWidth\n        granularity=\"second\"\n        label=\"Date and time range\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateRangePicker\n        fullWidth\n        granularity=\"day\"\n        label=\"Date range\"\n        value={date}\n        onChange={setDate}\n      />\n    </div>\n  );\n}`,ze={\"/App.jsx\":Ae,\"/App.tsx\":Ce},z={...ze};var Le=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <div className=\"w-full flex flex-col gap-1\">\n        <h3>Min date</h3>\n        <DateRangePicker\n          label=\"Date and time\"\n          minValue={today(getLocalTimeZone())}\n          defaultValue={{\n            start: today(getLocalTimeZone()).subtract({days: 1}),\n            end: parseDate(\"2024-04-08\"),\n          }}\n        />\n      </div>\n      <div className=\"w-full flex flex-col gap-1\">\n        <h3>Max date</h3>\n        <DateRangePicker\n          label=\"Date and time\"\n          maxValue={today(getLocalTimeZone())}\n          defaultValue={{\n            start: today(getLocalTimeZone()).subtract({days: 1}),\n            end: parseDate(\"2024-04-08\"),\n          }}\n        />\n      </div>\n    </div>\n  );\n}`,Me={\"/App.jsx\":Le},L={...Me};var Ne=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal(\"2021-04-01T18:45:22Z\"),\n    end: parseAbsoluteToLocal(\"2021-04-14T19:15:22Z\"),\n  });\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DateRangePicker label=\"Stay duration\" value={date} onChange={setDate} />\n      </I18nProvider>\n    </div>\n  );\n}`,Ze=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {DateValue, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {RangeValue} from \"@react-types/shared\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<RangeValue<DateValue>>({\n    start: parseAbsoluteToLocal(\"2021-04-01T18:45:22Z\"),\n    end: parseAbsoluteToLocal(\"2021-04-14T19:15:22Z\"),\n  });\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DateRangePicker label=\"Stay duration\" value={date} onChange={setDate} />\n      </I18nProvider>\n    </div>\n  );\n}`,Ie={\"/App.jsx\":Ne,\"/App.tsx\":Ze},M={...Ie};var Ve=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {today, getLocalTimeZone} from \"@internationalized/date\";\n\nexport default function App() {\n  let now = today(getLocalTimeZone());\n\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  return (\n    <DateRangePicker\n      label=\"Stay duration\"\n      isDateUnavailable={(date) =>\n        disabledRanges.some(\n          (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,\n        )\n      }\n      minValue={today(getLocalTimeZone())}\n      validate={(value) =>\n        disabledRanges.some(\n          (interval) =>\n            value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0,\n        )\n          ? \"Selected date range may not include unavailable dates.\"\n          : null\n      }\n      validationBehavior=\"native\"\n    />\n  );\n}`,We={\"/App.jsx\":Ve},N={...We};var Se=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateRangePicker \n        label=\"Stay duration\"\n        visibleMonths={2}\n      />\n    </div> \n  );\n}`,Be={\"/App.jsx\":Se},Z={...Be};var je=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateRangePicker \n        label=\"Birth date\"\n        visibleMonths={2}\n        pageBehavior=\"single\"\n      />\n    </div> \n  );\n}`,_e={\"/App.jsx\":je},I={..._e};var Oe=`import {DateRangePicker} from \"@nextui-org/react\";\nimport {isWeekend, today, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let {locale} = useLocale();\n\n  return (\n    <DateRangePicker\n      allowsNonContiguousRanges\n      isDateUnavailable={(date) => isWeekend(date, locale)}\n      label=\"Time off request\"\n      minValue={today(getLocalTimeZone())}\n      visibleMonths={2}\n    />\n  );\n}`,Fe={\"/App.jsx\":Oe},V={...Fe};var Ee=`import {DateRangePicker, Radio, RadioGroup, Button, ButtonGroup, cn} from \"@nextui-org/react\";\nimport {today, startOfWeek, startOfMonth, endOfWeek, endOfMonth, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let defaultDate = {\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({days: 7}),\n  };\n  let [value, setValue] = React.useState(defaultDate);\n\n  let {locale} = useLocale();\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n  let now = today(getLocalTimeZone());\n  let nextWeek = {\n    start: startOfWeek(now.add({weeks: 1}), locale),\n    end: endOfWeek(now.add({weeks: 1}), locale),\n  };\n  let nextMonth = {\n    start: startOfMonth(now.add({months: 1})),\n    end: endOfMonth(now.add({months: 1})),\n  };\n\n  const CustomRadio = (props) => {\n    const {children, ...otherProps} = props;\n\n    return (\n      <Radio\n        {...otherProps}\n        classNames={{\n          base: cn(\n            \"flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between\",\n            \"cursor-pointer rounded-full border-2 border-default-200/60\",\n            \"data-[selected=true]:border-primary\",\n          ),\n          label: \"text-tiny text-default-500\",\n          labelWrapper: \"px-1 m-0\",\n          wrapper: \"hidden\",\n        }}\n      >\n        {children}\n      </Radio>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4 w-full max-w-sm\">\n      <DateRangePicker\n        CalendarBottomContent={\n          <RadioGroup\n            aria-label=\"Date precision\"\n            classNames={{\n              base: \"w-full pb-2\",\n              wrapper:\n                \"-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[w-[calc(var(--visible-months)_*_var(--calendar-width))]] overflow-scroll\",\n            }}\n            defaultValue=\"exact_dates\"\n            orientation=\"horizontal\"\n          >\n            <CustomRadio value=\"exact_dates\">Exact dates</CustomRadio>\n            <CustomRadio value=\"1_day\">1 day</CustomRadio>\n            <CustomRadio value=\"2_days\">2 days</CustomRadio>\n            <CustomRadio value=\"3_days\">3 days</CustomRadio>\n            <CustomRadio value=\"7_days\">7 days</CustomRadio>\n            <CustomRadio value=\"14_days\">14 days</CustomRadio>\n          </RadioGroup>\n        }\n        CalendarTopContent={\n          <ButtonGroup\n            fullWidth\n            className=\"px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60\"\n            radius=\"full\"\n            size=\"sm\"\n            variant=\"bordered\"\n          >\n            <Button\n              onPress={() =>\n                setValue({\n                  start: now,\n                  end: now.add({days: 7}),\n                })\n              }\n            >\n              This week\n            </Button>\n            <Button onPress={() => setValue(nextWeek)}>Next week</Button>\n            <Button onPress={() => setValue(nextMonth)}>Next month</Button>\n          </ButtonGroup>\n        }\n        calendarProps={{\n          focusedValue: value?.start,\n          onFocusChange: (val) => setValue({...value, start: val}),\n          nextButtonProps: {\n            variant: \"bordered\",\n          },\n          prevButtonProps: {\n            variant: \"bordered\",\n          },\n        }}\n        value={value}\n        onChange={setValue}\n        label=\"Event date\"\n      />\n      <p className=\"text-default-500 text-sm\">\n        Selected date:{\" \"}\n        {value\n          ? formatter.formatRange(\n              value.start.toDate(getLocalTimeZone()),\n              value.end.toDate(getLocalTimeZone()),\n            )\n          : \"--\"}\n      </p>\n    </div>\n  );\n}`,qe={\"/App.jsx\":Ee},W={...qe};var He=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DateRangePicker\n        label=\"Birth Date\"\n        variant=\"bordered\"\n        showMonthAndYearPickers\n      />\n    </div>\n  );\n}`,Ye={\"/App.jsx\":He},S={...Ye};var Ue=`import {DateRangePicker} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <DateRangePicker\n        calendarProps={{\n          classNames: {\n            base: \"bg-background\",\n            headerWrapper: \"pt-4 bg-background\",\n            prevButton: \"border-1 border-default-200 rounded-small\",\n            nextButton: \"border-1 border-default-200 rounded-small\",\n            gridHeader: \"bg-background shadow-none border-b-1 border-default-100\",\n            cellButton: [\n              \"data-[today=true]:bg-default-100 data-[selected=true]:bg-transparent rounded-small\",\n              // start (pseudo)\n              \"data-[range-start=true]:before:rounded-l-small\",\n              \"data-[selection-start=true]:before:rounded-l-small\",\n              // end (pseudo)\n              \"data-[range-end=true]:before:rounded-r-small\",\n              \"data-[selection-end=true]:before:rounded-r-small\",\n              // start (selected)\n              \"data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:rounded-small\",\n              // end (selected)\n              \"data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:rounded-small\",\n            ],\n          },\n      }}\n      className=\"max-w-xs\"\n      label=\"Stay duration\"\n      variant=\"bordered\"\n    />\n  );\n}`,Ge={\"/App.jsx\":Ue},B={...Ge};var r={usage:f,disabled:g,readOnly:b,required:v,variants:x,labelPlacements:D,description:y,errorMessage:k,errorMessageFunction:w,withTimeField:T,selectorIcon:R,selectorButtonPlacement:P,controlled:A,timeZones:C,granularity:z,minAndMaxDate:L,internationalCalendar:M,unavailableDates:N,visibleMonth:Z,pageBehavior:I,nonContigous:V,presets:W,withMonthAndYearPickers:S,customStyles:B};var Ke={title:\"Date Range Picker\",description:\"DateRangePicker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.\"};function j(a){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...a.components},{CarbonAd:i,CodeDemo:n,ComponentLinks:l,ImportTabs:h,PackageManagers:d,Spacer:o}=t;return i||c(\"CarbonAd\",!0),n||c(\"CodeDemo\",!0),l||c(\"ComponentLinks\",!0),h||c(\"ImportTabs\",!0),d||c(\"PackageManagers\",!0),o||c(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"date-range-picker\",children:\"Date Range Picker\"}),`\n`,(0,e.jsx)(t.p,{children:\"Date Range Picker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.\"}),`\n`,(0,e.jsx)(l,{component:\"date-picker\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(d,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add date-picker\",npm:\"npm install @nextui-org/date-picker\",yarn:\"yarn add @nextui-org/date-picker\",pnpm:\"pnpm add @nextui-org/date-picker\",bun:\"bun add @nextui-org/date-picker\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(h,{commands:{main:'import {DateRangePicker} from \"@nextui-org/react\";',individual:'import {DateRangePicker} from \"@nextui-org/date-picker\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n,{title:\"Usage\",files:r.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(n,{title:\"Disabled\",files:r.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(n,{title:\"Read Only\",files:r.readOnly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" property to the input, it will have a \",(0,e.jsx)(t.code,{children:\"danger\"}),` asterisk at\nthe end of the label and the input will be required.`]}),`\n`,(0,e.jsx)(n,{title:\"Required\",files:r.required}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(n,{title:\"Variants\",files:r.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"visible-months\",children:\"Visible Months\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, the calendar popover displays a single month. The \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" prop allows displaying up to 3 months at a time, if screen space permits.\"]}),`\n`,(0,e.jsx)(n,{title:\"Visible Months\",files:r.visibleMonth}),`\n`,(0,e.jsx)(t.h3,{id:\"page-behavior\",children:\"Page Behavior\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, when pressing the next or previous buttons, pagination will advance by the \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" value. This behavior can be changed to page by single months instead, by setting \",(0,e.jsx)(t.code,{children:\"pageBehavior\"}),\" to \",(0,e.jsx)(t.code,{children:\"single\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Page Behavior\",files:r.pageBehavior}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placements\",children:\"Label Placements\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the label by setting the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"inside\"}),\", \",(0,e.jsx)(t.code,{children:\"outside\"}),\" or \",(0,e.jsx)(t.code,{children:\"outside-left\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Label Placements\",files:r.labelPlacements}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": If the \",(0,e.jsx)(t.code,{children:\"label\"}),\" is not passed, the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property will be \",(0,e.jsx)(t.code,{children:\"outside\"}),\" by default.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a description to the input by passing the \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Description\",files:r.description}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid input.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Error Message\",files:r.errorMessage}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also pass an error message as a function. This allows for dynamic error message handling based on the \",(0,e.jsx)(t.a,{href:\"https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51\",children:\"ValidationResult\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"With Error Message Function\",files:r.errorMessageFunction}),`\n`,(0,e.jsx)(t.h3,{id:\"with-month-and-year-pickers\",children:\"With Month and Year Pickers\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can show month and year pickers in the calendar popover by setting the \",(0,e.jsx)(t.code,{children:\"showMonthAndYearPickers\"}),\" property to \",(0,e.jsx)(t.code,{children:\"true\"}),\". However, passing a number greater than 1 to the \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" prop will disable this feature.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Month and Year Pickers\",files:r.withMonthAndYearPickers}),`\n`,(0,e.jsx)(t.h3,{id:\"with-time-fields\",children:\"With Time Fields\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"DateRangePicker automatically includes time fields when a \",(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" or \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" object is provided as the value.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Time Fields\",files:r.withTimeField}),`\n`,(0,e.jsx)(t.h3,{id:\"selector-icon\",children:\"Selector Icon\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"selector\"}),\" to add content to the start and end of the date-range-picker.\"]}),`\n`,(0,e.jsx)(n,{title:\"Selector Icon\",files:r.selectorIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"selector-button-placement\",children:\"Selector Button Placement\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the selector button by setting the \",(0,e.jsx)(t.code,{children:\"selectorButtonPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"start\"}),\" or \",(0,e.jsx)(t.code,{children:\"end\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Selector Button Placement\",files:r.selectorButtonPlacement}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(n,{title:\"Controlled\",files:r.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"time-zones\",children:\"Time Zones\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"DateRangePicker is time zone aware when a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {parseZonedDateTime} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(o,{y:2}),`\n`,(0,e.jsx)(n,{title:\"Time Zones\",files:r.timeZones}),`\n`,(0,e.jsx)(t.h3,{id:\"granularity\",children:\"Granularity\"}),`\n`,(0,e.jsxs)(t.p,{children:[`The granularity prop allows you to control the smallest unit that is displayed by DateRangePicker By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `,(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" and \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),' values are displayed with \"minute\" granularity.']}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(o,{y:2}),`\n`,(0,e.jsx)(n,{title:\"Time Zones\",files:r.granularity}),`\n`,(0,e.jsx)(t.h3,{id:\"min-date-and-max-date\",children:\"Min Date And Max Date\"}),`\n`,(0,e.jsx)(t.p,{children:\"The minValue and maxValue props can also be used to ensure the value is within a specific range.\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(n,{title:\"Min Date And Max Date\",files:r.minAndMaxDate}),`\n`,(0,e.jsx)(t.h3,{id:\"international-calendar\",children:\"International Calendar\"}),`\n`,(0,e.jsxs)(t.p,{children:[`DateRangePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the `,(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string\",children:\"Unicode calendar locale extension\"}),`,\npassed to the `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/I18nProvider.html\",children:\"I18nProvider\"}),\" component.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(n,{title:\"International Calendar\",files:r.internationalCalendar}),`\n`,(0,e.jsx)(t.h3,{id:\"unavailable-dates\",children:\"Unavailable Dates\"}),`\n`,(0,e.jsx)(t.p,{children:\"DateRangePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(n,{title:\"Unavailable Dates\",files:r.unavailableDates}),`\n`,(0,e.jsx)(t.h3,{id:\"non-contiguous\",children:\"Non Contiguous\"}),`\n`,(0,e.jsx)(t.p,{children:`The allowsNonContiguousRanges prop enables a range to be selected even if there are unavailable dates in the middle.\nThe value emitted in the onChange event will still be a single range with a start and end property,\nbut unavailable dates will not be displayed as selected.\nIt is up to applications to split the full selected range into multiple as needed for business logic.`}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(n,{title:\"Non Contiguous\",files:r.nonContigous}),`\n`,(0,e.jsx)(t.h3,{id:\"presets\",children:\"Presets\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {\n  DateValue,\n  now,\n  startOfWeek,\n  startOfMonth,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(n,{title:\"Presets\",files:r.presets}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": base element. it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the date-range-picker, it is the one that is displayed above, inside or left of the date-input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"calendar\"}),\": The calendar element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"selectorButton\"}),\": Selector button element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"selectorIcon\"}),\": Selector icon element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"popoverContent\"}),\": The calendar popover element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"calendarContent\"}),\": The calendar's content element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"segment\"}),\": The segment element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"separator\"}),\": The separator element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"bottomContent\"}),\": The bottom content element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"timeInputWrapper\"}),\": The wrapper element for the input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"helperWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"description\"}),\" and the \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the date-input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the date-input.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"DateRangePicker\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Styles\",files:r.customStyles}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"DateRangePicker\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-slot\"}),`:\nAll slots have this prop. which slot the element represents(e.g. `,(0,e.jsx)(t.code,{children:\"canlendar\"}),\").\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nIndicates if the calendar popover is open.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the date-range-picker is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the date-range-picker is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the date-range-picker is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the date-range-picker is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-start-content\"}),`:\nWhen the date-range-picker has a start content. Base on those `,(0,e.jsx)(t.code,{children:\"startContent\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-end-content\"}),`:\nWhen the date-range-picker has a end content. Base on those `,(0,e.jsx)(t.code,{children:\"endContent\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-multiple-months\"}),`:\nWhen the date-range-picker's `,(0,e.jsx)(t.code,{children:\"visibleMonth\"}),\" is more than 2.\"]}),`\n`]}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale\"}),`\n`,(0,e.jsx)(t.li,{children:\"Users can also open a calendar popover to select date ranges in a standard month grid. Localized screen reader messages are included to announce when the selection and visible date range change.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Date segments are editable using an easy to use numeric keypad, date ranges can be selected by dragging over dates in the calendar using a touch screen, and all interactions are accessible using touch-based screen readers.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\"}),`\n`]}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"daterangepicker-props\",children:\"DateRangePicker Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"label\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content to display as the label.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"value\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>\"}),\" | \",(0,e.jsx)(t.code,{children:\"undefined\"}),\" | \",(0,e.jsx)(t.code,{children:\"null\"})]}),(0,e.jsx)(t.td,{children:\"The current value of the date-range-picker (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"variant\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"flat\"}),\" | \",(0,e.jsx)(t.code,{children:\"bordered\"}),\" | \",(0,e.jsx)(t.code,{children:\"faded\"}),\" | \",(0,e.jsx)(t.code,{children:\"underlined\"})]}),(0,e.jsx)(t.td,{children:\"The variant of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"flat\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The color of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The size of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The radius of the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"minValue\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>\"}),\" | \",(0,e.jsx)(t.code,{children:\"undefined\"}),\" | \",(0,e.jsx)(t.code,{children:\"null\"})]}),(0,e.jsx)(t.td,{children:\"The minimum value of the date-range-picker.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"maxValue\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>\"}),\" | \",(0,e.jsx)(t.code,{children:\"undefined\"}),\" | \",(0,e.jsx)(t.code,{children:\"null\"})]}),(0,e.jsx)(t.td,{children:\"The maximum value of the date-range-picker.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The default value of the date-range-picker (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placeholderValue\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" | \",(0,e.jsx)(t.code,{children:\"CalendarDate\"}),\" | \",(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" | \",(0,e.jsx)(t.code,{children:\"undefined\"}),\" | \",(0,e.jsx)(t.code,{children:\"null\"})]}),(0,e.jsx)(t.td,{children:\"The placeholder of the date-range-picker.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"description\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"errorMessage\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode | (v: ValidationResult) => ReactNode\"})}),(0,e.jsx)(t.td,{children:\"An error message for the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validate\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,e.jsxs)(t.td,{children:[\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if \",(0,e.jsx)(t.code,{children:\"validationBehavior\"}),\" is set to \",(0,e.jsx)(t.code,{children:\"native\"}),\". For real-time validation, use the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationBehavior\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"native\"}),\" | \",(0,e.jsx)(t.code,{children:\"aria\"})]}),(0,e.jsx)(t.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"aria\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"startContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the left side of the date-range-picker.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"endContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the right side of the date-range-picker.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"startName\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsxs)(t.td,{children:[\"The name of the start date input element, used when submitting an HTML form. See \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname\",children:\"MDN\"})]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"endName\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsxs)(t.td,{children:[\"The name of the end date input element, used when submitting an HTML form. See \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname\",children:\"MDN\"})]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"labelPlacement\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"inside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside-left\"})]}),(0,e.jsx)(t.td,{children:\"The position of the label.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"inside\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the date picker popover is open.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the date picker popover is open by default.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isRequired\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether user input is required on the date-range-picker before form submission.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isReadOnly\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the date-range-picker can be selected but not changed by the user.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the date-range-picker is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isInvalid\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the date-range-picker is invalid.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectorIcon\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The icon to toggle the date picker popover. Usually a calendar icon.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"pageBehavior\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"single\"}),\" | \",(0,e.jsx)(t.code,{children:\"visible\"})]}),(0,e.jsx)(t.td,{children:\"Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"visible\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"visibleMonths\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsxs)(t.td,{children:[\"The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the \",(0,e.jsx)(t.code,{children:\"showMonthAndYearPickers\"}),\" prop.\"]}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"1\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"autoFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the element should receive focus on render.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"hourCycle\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"12\"}),\" | \",(0,e.jsx)(t.code,{children:\"24\"})]}),(0,e.jsx)(t.td,{children:\"Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"granularity\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"day\"}),\" | \",(0,e.jsx)(t.code,{children:\"hour\"}),\" | \",(0,e.jsx)(t.code,{children:\"minute\"}),\" | \",(0,e.jsx)(t.code,{children:\"second\"})]}),(0,e.jsx)(t.td,{children:'Determines the smallest unit that is displayed in the date picker. Typically \"day\" for dates.'}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"hideTimeZone\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to hide the time zone abbreviation.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"allowsNonContiguousRanges\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsxs)(t.td,{children:[\"When combined with \",(0,e.jsx)(t.code,{children:\"isDateUnavailable\"}),\", determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.\"]}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldForceLeadingZeros\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to always show leading zeros in the month, day, and hour fields.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"calendarWidth\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The width to be applied to the calendar component.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"256\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"CalendarTopContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Top content to be rendered in the calendar component.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"CalendarBottomContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Bottom content to be rendered in the calendar component.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"showMonthAndYearPickers\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the calendar should show month and year pickers.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"allowsNonContiguousRanges\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"enables a range to be selected even if there are unavailable dates in the middle\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"popoverProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"/docs/components/popover#api\",children:\"PopoverProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the popover component.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }'})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectorButtonProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ButtonProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the selector button component.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"selectorButtonPlacement\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"start\"}),\" | \",(0,e.jsx)(t.code,{children:\"end\"})]}),(0,e.jsx)(t.td,{children:\"The position of the selector button.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"end\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"calendarProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"CalendarProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the selector button component.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"timeInputProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"TimeInputProps\"})}),(0,e.jsx)(t.td,{children:\"Props to be passed to the time input component.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\" | \"selectorButton\" | \"selectorIcon\" | \"popoverContent\" | \"calendar\" | \"calendarContent\" | \"timeInputLabel\" | \"timeInput\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the date-range-picker slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"daterangepicker-events\",children:\"DateRangePicker Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onChange\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"((value: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>) => void)\"}),\" | undefined\"]}),(0,e.jsx)(t.td,{children:\"Handler that is called when the date-range-picker's value changes.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onOpenChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isOpen: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the date picker popover is opened or closed.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element receives focus.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element loses focus.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocusChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isFocused: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element's focus status changes.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyDown\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is pressed.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyUp\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is released.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]})]})}function _(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,{...a,children:(0,e.jsx)(j,{...a})}):j(a)}function c(a,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return K(Xe);})();\n;return Component;"
  },
  "_id": "docs/components/date-range-picker.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/date-range-picker.mdx",
    "sourceFileName": "date-range-picker.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/date-range-picker"
  },
  "type": "Doc",
  "slug": "/docs/components/date-range-picker",
  "slugAsParams": "components/date-range-picker",
  "url": "/docs/components/date-range-picker"
}