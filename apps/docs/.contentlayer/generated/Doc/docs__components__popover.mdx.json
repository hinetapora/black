{
  "title": "Popover",
  "description": "Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.",
  "body": {
    "raw": "\nimport {popoverContent} from \"@/content/components/popover\";\n\n# Popover\n\nPopover is a **non-modal** dialog that floats around its disclosure. It's commonly used for displaying\nadditional rich content on top of something.\n\n<ComponentLinks component=\"popover\" reactAriaHook=\"usePopover\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add popover\",\n    npm: \"npm install @nextui-org/popover\",\n    yarn: \"yarn add @nextui-org/popover\",\n    pnpm: \"pnpm add @nextui-org/popover\",\n    bun: \"bun add @nextui-org/popover\"\n  }}\n/>\n\n## Import\n\nNextUI exports 3 popover-related components:\n\n- **Popover**: The main component to display a popover.\n- **PopoverTrigger**: The component that triggers the popover.\n- **PopoverContent**: The component that contains the popover content.\n\n<ImportTabs\n  commands={{\n    main: 'import {Popover, PopoverTrigger, PopoverContent} from \"@nextui-org/react\";',\n    individual: 'import {Popover, PopoverTrigger, PopoverContent} from \"@nextui-org/popover\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={popoverContent.usage} />\n\n### With Arrow\n\n<CodeDemo title=\"With Arrow\" files={popoverContent.arrow} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={popoverContent.colors} />\n\n### Placements\n\n<CodeDemo title=\"Placements\" files={popoverContent.placements} />\n\n### Offset\n\n<CodeDemo title=\"Offset\" files={popoverContent.offset} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled\" files={popoverContent.controlled} />\n\n### Title Props\n\nTo be sure that the popover exposes the correct title to assistive technologies, you should use the\n`titleProps` prop on the `PopoverContent` component. To use this prop, you must pass a function as a child.\n\n<CodeDemo title=\"Title Props\" files={popoverContent.titleProps} />\n\n### With Form\n\nThe `Popover` handles the focus within the popover content. It means that you can use the popover with\nform elements without any problem. the focus returns to the trigger when the popover closes.\n\n<CodeDemo title=\"With Form\" files={popoverContent.withForm} />\n\n> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the popover opens.\n\n### Backdrop\n\nThe `Popover` component has a `backdrop` prop to show a backdrop behind the popover. The backdrop can be\neither `transparent`, `opaque` or `blur`. The default value is `transparent`.\n\n<CodeDemo title=\"Backdrop\" files={popoverContent.backdrop} />\n\n### Custom Motion\n\nPopover offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n<CodeDemo title=\"Custom Motion\" files={popoverContent.customMotion} />\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n### Custom Trigger\n\n<CodeDemo title=\"Custom Trigger\" files={popoverContent.customTrigger} />\n\n## Slots\n\n- **base**: The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).\n- **trigger**: The popover trigger slot, it has small styles to ensure the trigger works correctly.\n- **backdrop**: The backdrop slot, it contains the backdrop styles.\n- **content**: The content slot, it contains the popover content.\n\n### Custom Styles\n\nYou can customize the `Popover` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={popoverContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Popover` has the following attributes on the `PopoverContent` element:\n\n- **data-open**:\n  When the popover is open. Based on popover state.\n- **data-placement**:\n  The placement of the popover. Based on `placement` prop. The arrow element is positioned based on this attribute.\n- **data-focus**:\n  When the popover is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the popover is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n<Spacer y={4} />\n\n## Accessibility\n\n- The trigger and popover are automatically associated semantically via ARIA.\n- Content outside the popover is hidden from assistive technologies while it is open.\n- The popover closes when interacting outside, or pressing the <Kbd>Escape</Kbd> key.\n- Focus is moved into the popover on mount, and restored to the trigger element on unmount.\n- The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.\n- Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.\n\n<Spacer y={4} />\n\n## API\n\n### Popover Props\n\n| Attribute                 | Type                                                                        | Description                                                                                                                                                  | Default         |\n| ------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------- |\n| children\\*                | `ReactNode[]`                                                               | The content of the popover. It's usually the `PopoverTrigger` and `PopoverContent`.                                                                          | -               |\n| size                      | `sm` \\| `md` \\| `lg`                                                        | The popover content font size.                                                                                                                               | `md`            |\n| color                     | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The popover color theme.                                                                                                                                     | `default`       |\n| radius                    | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                    | The popover border radius.                                                                                                                                   | `lg`            |\n| shadow                    | `none` \\| `sm` \\| `md` \\| `lg`                                              | The popover shadow.                                                                                                                                          | `lg`            |\n| backdrop                  | `transparent` \\| `opaque` \\| `blur`                                         | The popover backdrop type.                                                                                                                                   | `transparent`   |\n| placement                 | [PopoverPlacement](#popover-placement)                                      | The placement of the popover relative to its trigger reference.                                                                                              | `bottom`        |\n| state                     | `OverlayTriggerState`                                                       | The controlled state of the popover. See [Overlay States](https://react-spectrum.adobe.com/react-stately/useOverlayTriggerState.html#useoverlaytriggerstate) | -               |\n| isOpen                    | `boolean`                                                                   | Whether the popover is open by default (controlled).                                                                                                         | -               |\n| defaultOpen               | `boolean`                                                                   | Whether the popover is open by default (uncontrolled).                                                                                                       | -               |\n| offset(px)                | `number`                                                                    | The distance or margin between the reference and popper. It is used internally to create an offset modifier.                                                 | `7`             |\n| containerPadding(px)      | `number`                                                                    | The placement padding that should be applied between the element and its surrounding container.                                                              | `12`            |\n| crossOffset(px)           | `number`                                                                    | The additional offset applied along the cross axis between the element and its anchor element.                                                               | `0`             |\n| triggerType               | `dialog` \\| `menu` \\| `listbox` \\| `tree` \\| `grid`;                        | Type of popover that is opened by the trigger.                                                                                                               | `dialog`        |\n| showArrow                 | `boolean`                                                                   | Whether the popover should have an arrow.                                                                                                                    | `false`         |\n| shouldFlip                | `boolean`                                                                   | Whether the popover should change its placement and flip when it's about to overflow its boundary area.                                                      | `true`          |\n| triggerScaleOnOpen        | `boolean`                                                                   | Whether the trigger should scale down when the popover is open.                                                                                              | `true`          |\n| shouldBlockScroll         | `boolean`                                                                   | Whether the popover should block the scroll outside the popover.                                                                                             | `true`          |\n| shouldCloseOnScroll       | `boolean`                                                                   | Wheather the popover should close on scroll                                                                                                    | `false`         |\n| isKeyboardDismissDisabled | `boolean`                                                                   | Whether pressing the escape key to close the popover should be disabled.                                                                                     | `false`         |\n| shouldCloseOnBlur         | `boolean`                                                                   | Whether the popover should close when focus is lost or moves outside it.                                                                                     | `false`         |\n| motionProps               | [MotionProps](#motion-props)                                                | The props to modify the framer motion animation. Use the `variants` API to create your own animation.                                                        |                 |\n| portalContainer           | `HTMLElement`                                                               | The container element in which the overlay portal will be placed.                                                                                            | `document.body` |\n| updatePositionDeps        | `any[]`                                                                     | The dependencies to force the popover position update.                                                                                                       | `[]`            |\n| triggerRef                | `RefObject<HTMLElement>`                                                    | The ref for the element which the popover positions itself with respect to.                                                                                  | -               |\n| scrollRef                 | `RefObject<HTMLElement>`                                                    | A ref for the scrollable region within the popover.                                                                                                          | `overlayRef`    |\n| disableAnimation          | `boolean`                                                                   | Whether the popover is animated.                                                                                                                             | `false`         |\n| classNames                | `Record<\"base\"｜ \"trigger\"｜ \"backdrop\"｜ \"content\", string>`               | Allows to set custom class names for the popover slots.                                                                                                      | -               |\n\n<Spacer y={1} />\n\n### Popover Events\n\n| Attribute                    | Type                        | Description                                                                                                                                                                                                                                                                                               |\n| ---------------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the popover's open state changes.                                                                                                                                                                                                                                             |\n| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the popover ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the popover. By default, onClose will always be called on interaction outside the overlay ref. |\n| onClose                      | `() => void`                | Handler that is called when the popover should close.                                                                                                                                                                                                                                                     |\n\n<Spacer y={2} />\n\n### PopoverTrigger Props\n\n| Attribute  | Type        | Description                                                                                                                                                                | Default |\n| ---------- | ----------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| children\\* | `ReactNode` | The popover trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility. | -       |\n\n<Spacer y={2} />\n\n### PopoverContent Props\n\n| Attribute | Type        | Description                                                | Default |\n| --------- | ----------- | ---------------------------------------------------------- | ------- |\n| children  | `ReactNode` | The content that is displayed when the trigger is pressed. | -       |\n\n<Spacer y={2} />\n\n### Popover types\n\n<Spacer y={1} />\n\n#### Popover Placement\n\n```ts\ntype PopoverPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n```\n\n#### Motion Props\n\n```ts\nexport type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n```\n",
    "code": "var Component=(()=>{var F=Object.create;var a=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,z=Object.prototype.hasOwnProperty;var S=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports),D=(o,t)=>{for(var i in t)a(o,i,{get:t[i],enumerable:!0})},m=(o,t,i,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let l of M(t))!z.call(o,l)&&l!==i&&a(o,l,{get:()=>t[l],enumerable:!(r=j(t,l))||r.enumerable});return o};var R=(o,t,i)=>(i=o!=null?F(W(o)):{},m(t||!o||!o.__esModule?a(i,\"default\",{value:o,enumerable:!0}):i,o)),U=o=>m(a({},\"__esModule\",{value:!0}),o);var u=S((fe,v)=>{v.exports=_jsx_runtime});var ve={};D(ve,{default:()=>I,frontmatter:()=>me});var e=R(u());var H=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"right\">\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}`,L={\"/App.jsx\":H},f={...L};var q=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"bottom\" showArrow={true}>\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}`,E={\"/App.jsx\":q},g={...E};var V=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"bottom\" offset={20} showArrow>\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}`,_={\"/App.jsx\":V},P={..._};var K=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const colors = [\n    \"default\",\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"foreground\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {colors.map((color) => (\n        <Popover key={color} placement=\"top\" color={color}>\n          <PopoverTrigger>\n            <Button color={color} className=\"capitalize\">\n              {color}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}`,X={\"/App.jsx\":K},b={...X};var Y=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Popover isOpen={isOpen} onOpenChange={(open) => setIsOpen(open)}>\n        <PopoverTrigger>\n          <Button>Open Popover</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <div className=\"px-1 py-2\">\n            <div className=\"text-small font-bold\">Popover Content</div>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        </PopoverContent>\n      </Popover>\n      <p className=\"text-small text-default-400\">Open: {isOpen ? \"true\" : \"false\"}</p>\n    </div>\n  );\n}`,Z={\"/App.jsx\":Y},x={...Z};var G=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const variants = [\"solid\", \"bordered\", \"flat\", \"faded\", \"shadow\"];\n\n  return (\n    <div className=\"flex gap-2\">\n      {variants.map((variant) => (\n        <Popover key={variant} placement=\"top\" variant={variant}>\n          <PopoverTrigger>\n            <Button variant={variant} className=\"capitalize\">\n              {variant}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}`,J={\"/App.jsx\":G},y={...J};var Q=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const placements = [\n    \"top-start\",\n    \"top\",\n    \"top-end\",\n    \"bottom-start\",\n    \"bottom\",\n    \"bottom-end\",\n    \"right-start\",\n    \"right\",\n    \"right-end\",\n    \"left-start\",\n    \"left\",\n    \"left-end\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap md:inline-grid md:grid-cols-3 gap-4\">\n      {placements.map((placement) => (\n        <Popover key={placement} placement={placement} color=\"secondary\">\n          <PopoverTrigger>\n            <Button color=\"secondary\" variant=\"flat\" className=\"capitalize\">\n              {placement.replace(\"-\", \" \")}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}`,$={\"/App.jsx\":Q},T={...$};var ee=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"right\">\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        {(titleProps) => (\n          <div className=\"px-1 py-2\">\n            <h3 className=\"text-small font-bold\" {...titleProps}>\n              Popover Content\n            </h3>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}`,te={\"/App.jsx\":ee},w={...te};var oe=`import {Popover, PopoverTrigger, PopoverContent, Button, Input} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"bottom\" showArrow offset={10}>\n      <PopoverTrigger>\n        <Button color=\"primary\">Customize</Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[240px]\">\n        {(titleProps) => (\n          <div className=\"px-1 py-2 w-full\">\n            <p className=\"text-small font-bold text-foreground\" {...titleProps}>\n              Dimensions\n            </p>\n            <div className=\"mt-2 flex flex-col gap-2 w-full\">\n              <Input defaultValue=\"100%\" label=\"Width\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"300px\" label=\"Max. width\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"24px\" label=\"Height\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"30px\" label=\"Max. height\" size=\"sm\" variant=\"bordered\" />\n            </div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}`,re={\"/App.jsx\":oe},C={...re};var ne=`import {Popover, PopoverTrigger, PopoverContent, Button, Input} from \"@nextui-org/react\";\n\nexport default function App() {\n\n  const backdrops = [\"opaque\", \"blur\", \"transparent\"];\n\n  const content = (\n    <PopoverContent className=\"w-[240px]\">\n      {(titleProps) => (\n        <div className=\"px-1 py-2 w-full\">\n          <p className=\"text-small font-bold text-foreground\" {...titleProps}>\n            Dimensions\n          </p>\n          <div className=\"mt-2 flex flex-col gap-2 w-full\">\n            <Input defaultValue=\"100%\" label=\"Width\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"300px\" label=\"Max. width\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"24px\" label=\"Height\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"30px\" label=\"Max. height\" size=\"sm\" variant=\"bordered\" />\n          </div>\n        </div>\n      )}\n    </PopoverContent>\n  )\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {backdrops.map((backdrop) => (\n        <Popover\n          key={backdrop}\n          showArrow\n          offset={10}\n          placement=\"bottom\"\n          backdrop={backdrop}\n        >\n          <PopoverTrigger>\n            <Button color=\"warning\" variant=\"flat\" className=\"capitalize\">\n              {backdrop}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}`,ie={\"/App.jsx\":ne},N={...ie};var de=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover\n      showArrow\n      offset={10}\n      placement=\"bottom\"\n      motionProps={{\n        variants: {\n          enter: {\n            y: 0,\n            opacity: 1,\n            duration: 0.1,\n            transition: {\n              opacity: {\n                duration: 0.15,\n              },\n            },\n          },\n          exit: {\n            y: \"10%\",\n            opacity: 0,\n            duration: 0,\n            transition: {\n              opacity: {\n                duration: 0.1,\n              },\n            },\n          },\n        },\n      }}\n    >\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}`,le={\"/App.jsx\":de},A={...le};var ce=`import { Avatar, Button, Card, CardBody, CardFooter, CardHeader } from \"@nextui-org/react\";\n\nexport const UserTwitterCard = () => {\n  const [isFollowed, setIsFollowed] = React.useState(false);\n\n  return (\n    <Card shadow=\"none\" className=\"max-w-[300px] border-none bg-transparent\">\n      <CardHeader className=\"justify-between\">\n        <div className=\"flex gap-3\">\n          <Avatar isBordered radius=\"full\" size=\"md\" src=\"https://i.pravatar.cc/150?u=a04258114e29026702d\" />\n          <div className=\"flex flex-col items-start justify-center\">\n            <h4 className=\"text-small font-semibold leading-none text-default-600\">Zoey Lang</h4>\n            <h5 className=\"text-small tracking-tight text-default-500\">@zoeylang</h5>\n          </div>\n        </div>\n        <Button\n          className={isFollowed ? \"bg-transparent text-foreground border-default-200\" : \"\"}\n          color=\"primary\"\n          radius=\"full\"\n          size=\"sm\"\n          variant={isFollowed ? \"bordered\" : \"solid\"}\n          onPress={() => setIsFollowed(!isFollowed)}\n        >\n          {isFollowed ? \"Unfollow\" : \"Follow\"}\n        </Button>\n      </CardHeader>\n      <CardBody className=\"px-3 py-0\">\n        <p className=\"text-small pl-px text-default-500\">\n          Full-stack developer, @getnextui lover she/her\n          <span aria-label=\"confetti\" role=\"img\">\n            \\u{1F389}\n          </span>\n        </p>\n      </CardBody>\n      <CardFooter className=\"gap-3\">\n        <div className=\"flex gap-1\">\n          <p className=\"font-semibold text-default-600 text-small\">4</p>\n          <p className=\" text-default-500 text-small\">Following</p>\n        </div>\n        <div className=\"flex gap-1\">\n          <p className=\"font-semibold text-default-600 text-small\">97.1K</p>\n          <p className=\"text-default-500 text-small\">Followers</p>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};`,ae=`import {Popover, PopoverTrigger, PopoverContent, Button, User} from \"@nextui-org/react\";\nimport {UserTwitterCard} from \"./UserTwitterCard\";\n\nexport default function App() {\n  return (\n    <Popover showArrow placement=\"bottom\">\n      <PopoverTrigger>\n        <User   \n          as=\"button\"\n          name=\"Zoe Lang\"\n          description=\"Product Designer\"\n          className=\"transition-transform\"\n          avatarProps={{\n            src: \"https://i.pravatar.cc/150?u=a04258114e29026702d\"\n          }}\n        />\n      </PopoverTrigger>\n      <PopoverContent className=\"p-1\">\n        <UserTwitterCard />\n      </PopoverContent>\n    </Popover>\n  );\n}`,pe={\"/App.jsx\":ae,\"/UserTwitterCard.jsx\":ce},B={...pe};var se=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Popover \n      showArrow\n      backdrop=\"opaque\"\n      placement=\"right\"\n      classNames={{\n        base: [  \n          // arrow color\n          \"before:bg-default-200\"\n        ],\n        content: [\n          \"py-3 px-4 border border-default-200\",\n          \"bg-gradient-to-br from-white to-default-300\",\n          \"dark:from-default-100 dark:to-default-50\",\n        ],\n      }}\n    >\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        {(titleProps) => (\n          <div className=\"px-1 py-2\">\n            <h3 className=\"text-small font-bold\" {...titleProps}>\n              Popover Content\n            </h3>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}`,he={\"/App.jsx\":se},k={...he};var n={usage:f,arrow:g,offset:P,colors:b,controlled:x,variants:y,placements:T,titleProps:w,withForm:C,backdrop:N,customMotion:A,customTrigger:B,customStyles:k};var me={title:\"Popover\",description:\"Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.\"};function O(o){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...o.components},{CarbonAd:i,CodeDemo:r,ComponentLinks:l,ImportTabs:p,Kbd:s,PackageManagers:h,Spacer:d}=t;return i||c(\"CarbonAd\",!0),r||c(\"CodeDemo\",!0),l||c(\"ComponentLinks\",!0),p||c(\"ImportTabs\",!0),s||c(\"Kbd\",!0),h||c(\"PackageManagers\",!0),d||c(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"popover\",children:\"Popover\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Popover is a \",(0,e.jsx)(t.strong,{children:\"non-modal\"}),` dialog that floats around its disclosure. It's commonly used for displaying\nadditional rich content on top of something.`]}),`\n`,(0,e.jsx)(l,{component:\"popover\",reactAriaHook:\"usePopover\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(h,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add popover\",npm:\"npm install @nextui-org/popover\",yarn:\"yarn add @nextui-org/popover\",pnpm:\"pnpm add @nextui-org/popover\",bun:\"bun add @nextui-org/popover\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(t.p,{children:\"NextUI exports 3 popover-related components:\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"Popover\"}),\": The main component to display a popover.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"PopoverTrigger\"}),\": The component that triggers the popover.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"PopoverContent\"}),\": The component that contains the popover content.\"]}),`\n`]}),`\n`,(0,e.jsx)(p,{commands:{main:'import {Popover, PopoverTrigger, PopoverContent} from \"@nextui-org/react\";',individual:'import {Popover, PopoverTrigger, PopoverContent} from \"@nextui-org/popover\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:n.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"with-arrow\",children:\"With Arrow\"}),`\n`,(0,e.jsx)(r,{title:\"With Arrow\",files:n.arrow}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(r,{title:\"Colors\",files:n.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"placements\",children:\"Placements\"}),`\n`,(0,e.jsx)(r,{title:\"Placements\",files:n.placements}),`\n`,(0,e.jsx)(t.h3,{id:\"offset\",children:\"Offset\"}),`\n`,(0,e.jsx)(r,{title:\"Offset\",files:n.offset}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(r,{title:\"Controlled\",files:n.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"title-props\",children:\"Title Props\"}),`\n`,(0,e.jsxs)(t.p,{children:[`To be sure that the popover exposes the correct title to assistive technologies, you should use the\n`,(0,e.jsx)(t.code,{children:\"titleProps\"}),\" prop on the \",(0,e.jsx)(t.code,{children:\"PopoverContent\"}),\" component. To use this prop, you must pass a function as a child.\"]}),`\n`,(0,e.jsx)(r,{title:\"Title Props\",files:n.titleProps}),`\n`,(0,e.jsx)(t.h3,{id:\"with-form\",children:\"With Form\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"Popover\"}),` handles the focus within the popover content. It means that you can use the popover with\nform elements without any problem. the focus returns to the trigger when the popover closes.`]}),`\n`,(0,e.jsx)(r,{title:\"With Form\",files:n.withForm}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": You can add the \",(0,e.jsx)(t.code,{children:\"autoFocus\"}),\" prop to the first \",(0,e.jsx)(t.code,{children:\"Input\"}),\" component to focus it when the popover opens.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"backdrop\",children:\"Backdrop\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"Popover\"}),\" component has a \",(0,e.jsx)(t.code,{children:\"backdrop\"}),` prop to show a backdrop behind the popover. The backdrop can be\neither `,(0,e.jsx)(t.code,{children:\"transparent\"}),\", \",(0,e.jsx)(t.code,{children:\"opaque\"}),\" or \",(0,e.jsx)(t.code,{children:\"blur\"}),\". The default value is \",(0,e.jsx)(t.code,{children:\"transparent\"}),\".\"]}),`\n`,(0,e.jsx)(r,{title:\"Backdrop\",files:n.backdrop}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-motion\",children:\"Custom Motion\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Popover offers a \",(0,e.jsx)(t.code,{children:\"motionProps\"}),\" property to customize the \",(0,e.jsx)(t.code,{children:\"enter\"}),\" / \",(0,e.jsx)(t.code,{children:\"exit\"}),\" animation.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Motion\",files:n.customMotion}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"Learn more about Framer motion variants \",(0,e.jsx)(t.a,{href:\"https://www.framer.com/motion/animation/#variants\",children:\"here\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-trigger\",children:\"Custom Trigger\"}),`\n`,(0,e.jsx)(r,{title:\"Custom Trigger\",files:n.customTrigger}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"trigger\"}),\": The popover trigger slot, it has small styles to ensure the trigger works correctly.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"backdrop\"}),\": The backdrop slot, it contains the backdrop styles.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"content\"}),\": The content slot, it contains the popover content.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"Popover\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Popover\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"PopoverContent\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nWhen the popover is open. Based on popover state.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-placement\"}),`:\nThe placement of the popover. Based on `,(0,e.jsx)(t.code,{children:\"placement\"}),\" prop. The arrow element is positioned based on this attribute.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the popover is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the popover is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"The trigger and popover are automatically associated semantically via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Content outside the popover is hidden from assistive technologies while it is open.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"The popover closes when interacting outside, or pressing the \",(0,e.jsx)(s,{children:\"Escape\"}),\" key.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Focus is moved into the popover on mount, and restored to the trigger element on unmount.\"}),`\n`,(0,e.jsx)(t.li,{children:\"The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.\"}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"popover-props\",children:\"Popover Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children*\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode[]\"})}),(0,e.jsxs)(t.td,{children:[\"The content of the popover. It's usually the \",(0,e.jsx)(t.code,{children:\"PopoverTrigger\"}),\" and \",(0,e.jsx)(t.code,{children:\"PopoverContent\"}),\".\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The popover content font size.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The popover color theme.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The popover border radius.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"lg\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shadow\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The popover shadow.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"lg\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"backdrop\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"transparent\"}),\" | \",(0,e.jsx)(t.code,{children:\"opaque\"}),\" | \",(0,e.jsx)(t.code,{children:\"blur\"})]}),(0,e.jsx)(t.td,{children:\"The popover backdrop type.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"transparent\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placement\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"#popover-placement\",children:\"PopoverPlacement\"})}),(0,e.jsx)(t.td,{children:\"The placement of the popover relative to its trigger reference.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"bottom\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"state\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"OverlayTriggerState\"})}),(0,e.jsxs)(t.td,{children:[\"The controlled state of the popover. See \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-stately/useOverlayTriggerState.html#useoverlaytriggerstate\",children:\"Overlay States\"})]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover is open by default (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover is open by default (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"offset(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The distance or margin between the reference and popper. It is used internally to create an offset modifier.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"7\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"containerPadding(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The placement padding that should be applied between the element and its surrounding container.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"12\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"crossOffset(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The additional offset applied along the cross axis between the element and its anchor element.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"0\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"triggerType\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"dialog\"}),\" | \",(0,e.jsx)(t.code,{children:\"menu\"}),\" | \",(0,e.jsx)(t.code,{children:\"listbox\"}),\" | \",(0,e.jsx)(t.code,{children:\"tree\"}),\" | \",(0,e.jsx)(t.code,{children:\"grid\"}),\";\"]}),(0,e.jsx)(t.td,{children:\"Type of popover that is opened by the trigger.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"dialog\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"showArrow\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover should have an arrow.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldFlip\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover should change its placement and flip when it's about to overflow its boundary area.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"triggerScaleOnOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the trigger should scale down when the popover is open.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldBlockScroll\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover should block the scroll outside the popover.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnScroll\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Wheather the popover should close on scroll\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isKeyboardDismissDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether pressing the escape key to close the popover should be disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover should close when focus is lost or moves outside it.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"motionProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"#motion-props\",children:\"MotionProps\"})}),(0,e.jsxs)(t.td,{children:[\"The props to modify the framer motion animation. Use the \",(0,e.jsx)(t.code,{children:\"variants\"}),\" API to create your own animation.\"]}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"portalContainer\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"HTMLElement\"})}),(0,e.jsx)(t.td,{children:\"The container element in which the overlay portal will be placed.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"document.body\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"updatePositionDeps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"any[]\"})}),(0,e.jsx)(t.td,{children:\"The dependencies to force the popover position update.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"[]\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"triggerRef\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"RefObject<HTMLElement>\"})}),(0,e.jsx)(t.td,{children:\"The ref for the element which the popover positions itself with respect to.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"scrollRef\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"RefObject<HTMLElement>\"})}),(0,e.jsx)(t.td,{children:\"A ref for the scrollable region within the popover.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"overlayRef\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the popover is animated.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C \"trigger\"\\uFF5C \"backdrop\"\\uFF5C \"content\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the popover slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(d,{y:1}),`\n`,(0,e.jsx)(t.h3,{id:\"popover-events\",children:\"Popover Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onOpenChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isOpen: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the popover's open state changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnInteractOutside\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: HTMLElement) => void\"})}),(0,e.jsx)(t.td,{children:\"When user interacts with the argument element outside of the popover ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the popover. By default, onClose will always be called on interaction outside the overlay ref.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onClose\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"() => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the popover should close.\"})]})]})]}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(t.h3,{id:\"popovertrigger-props\",children:\"PopoverTrigger Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsx)(t.tbody,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children*\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The popover trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})})]}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(t.h3,{id:\"popovercontent-props\",children:\"PopoverContent Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsx)(t.tbody,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content that is displayed when the trigger is pressed.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})})]}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(t.h3,{id:\"popover-types\",children:\"Popover types\"}),`\n`,(0,e.jsx)(d,{y:1}),`\n`,(0,e.jsx)(t.h4,{id:\"popover-placement\",children:\"Popover Placement\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`type PopoverPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n`})}),`\n`,(0,e.jsx)(t.h4,{id:\"motion-props\",children:\"Motion Props\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`export type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n`})})]})}function I(o={}){let{wrapper:t}=o.components||{};return t?(0,e.jsx)(t,{...o,children:(0,e.jsx)(O,{...o})}):O(o)}function c(o,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return U(ve);})();\n;return Component;"
  },
  "_id": "docs/components/popover.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/popover.mdx",
    "sourceFileName": "popover.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/popover"
  },
  "type": "Doc",
  "slug": "/docs/components/popover",
  "slugAsParams": "components/popover",
  "url": "/docs/components/popover"
}