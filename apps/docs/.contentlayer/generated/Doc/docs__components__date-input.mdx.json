{
  "title": "DateInput",
  "description": "DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment.",
  "body": {
    "raw": "\nimport {dateInputContent} from \"@/content/components/date-input\";\n\n# DateInput\n\nDateInput is a component that allows users to enter and edit date and time values using a keyboard.\nEach part of a date value is displayed in an individually editable segment.\n\n<ComponentLinks component=\"date-input\" storybook=\"dateinput\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add date-input\",\n    npm: \"npm install @nextui-org/date-input\",\n    yarn: \"yarn add @nextui-org/date-input\",\n    pnpm: \"pnpm add @nextui-org/date-input\",\n    bun: \"bun add @nextui-org/date-input\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {DateInput} from \"@nextui-org/react\";',\n    individual: 'import {DateInput} from \"@nextui-org/date-input\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={dateInputContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={dateInputContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Read Only\" files={dateInputContent.readOnly} />\n\n### Required\n\n<CodeDemo title=\"Required\" files={dateInputContent.required} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={dateInputContent.variants} />\n\n### Label Placements\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n<CodeDemo title=\"Label Placements\" files={dateInputContent.labelPlacements} />\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### Start & End Content\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of the `DateInput`.\n\n<CodeDemo title=\"Start and End Content\" files={dateInputContent.startEndContent} />\n\n### With Description\n\nYou can add a description to the input by passing the `description` property.\n\n<CodeDemo title=\"With Description\" files={dateInputContent.description} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\n<CodeDemo title=\"With Error Message\" files={dateInputContent.errorMessage} />\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).\n\n<CodeDemo title=\"With Error Message Function\" files={dateInputContent.errorMessageFunction} />\n\n### Controlled\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={dateInputContent.controlled} />\n\n### Time Zones\n\nDateInput is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {parseZonedDateTime} from \"@internationalized/date\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={dateInputContent.timeZones} />\n\n### Granularity\n\nThe granularity prop allows you to control the smallest unit that is displayed by DateInput By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={dateInputContent.granularity} />\n\n### Min Date And Max Date\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n```\n\n<CodeDemo title=\"Min Date And Max Date\" files={dateInputContent.minAndMaxDate} />\n\n### International Calendar\n\nDateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),\npassed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date @react-aria/i18n\",\n    yarn: \"yarn add @internationalized/date @react-aria/i18n\",\n    pnpm: \"pnpm add @internationalized/date @react-aria/i18n\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"International Calendar\" files={dateInputContent.internationalCalendar} />\n\n### Hide Time Zone\n\nWhen a `ZonedDateTime` object is provided as the value to DateInput, the time zone abbreviation is displayed by default.\nHowever, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {parseZonedDateTime} from \"@internationalized/date\";\n```\n\n<CodeDemo title=\"Hide Time Zone\" files={dateInputContent.hideTimeZone} />\n\n### Hourly Cycle\n\nBy default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale.\nHowever, this can be overridden using the `hourCycle` prop if needed for a specific usecase.\nThis example forces DateInput to use 24-hour time, regardless of the locale.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date\",\n    yarn: \"yarn add @internationalized/date\",\n    pnpm: \"pnpm add @internationalized/date\",\n  }}\n/>\n\n```jsx\nimport {parseZonedDateTime} from \"@internationalized/date\";\n```\n\n<CodeDemo title=\"Hide Time Zone\" files={dateInputContent.hourlyCycle} />\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **label**: Label of the date-input, it is the one that is displayed above, inside or left of the date-input.\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **input**: The date-input element.\n- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.\n- **clearButton**: The clear button, it is at the end of the input.\n- **helperWrapper**: Wraps the `description` and the `errorMessage`.\n- **description**: The description of the date-input.\n- **errorMessage**: The error message of the date-input.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`DateInput` has the following attributes on the `base` element:\n\n- **data-slot**:\n  All slots have this prop. which slot the element represents(e.g. `slot`).\n- **data-invalid**:\n  When the date-input is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the date-input is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the date-input is readonly. Based on `isReadOnly` prop.\n- **data-disabled**:\n  When the date-input is disabled. Based on `isDisabled` prop.\n- **data-has-helper**:\n  When the date-input has helper text(`errorMessage` or `description`). Base on those two props.\n- **data-has-start-content**:\n  When the date-input has a start content. Base on those `startContent` prop.\n- **data-has-end-content**:\n  When the date-input has a end content. Base on those `endContent` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native `<input>` element.\n- Visual and ARIA labeling support.\n- Change, clipboard, composition, selection, and input event support.\n- Required and invalid states exposed to assistive technology via ARIA.\n- Support for description and error message help text linked to the input via ARIA.\n- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\n- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n\n<Spacer y={4} />\n\n## API\n\n### DateInput Props\n\n| Attribute               | Type                                                                                                                              | Description                                                                                                                                                   | Default   |\n| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| label                   | `ReactNode`                                                                                                                       | The content to display as the label.                                                                                                                          | -         |\n| value                   | `DateValue`                                                                                                                       | The current value of the date input (controlled).                                                                                                             | -         |\n| defaultValue            | `DateValue`                                                                                                                       | The default value of the date input (uncontrolled).                                                                                                           | -         |\n| variant                 | `flat` \\| `bordered` \\| `faded` \\| `underlined`                                                                                   | The variant of the date input.                                                                                                                                | `flat`    |\n| color                   | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                                                       | The color of the date input.                                                                                                                                  | `default` |\n| size                    | `sm` \\| `md` \\| `lg`                                                                                                              | The size of the date input.                                                                                                                                   | `md`      |\n| radius                  | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                                                                          | The radius of the date input.                                                                                                                                 | -         |\n| placeholderValue        | `DateValue`                                                                                                                       | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.                          | -         |\n| minValue                | `DateValue`                                                                                                                       | The minimum allowed date that a user may select.                                                                                                              | -         |\n| maxValue                | `DateValue`                                                                                                                       | The maximum allowed date that a user may select.                                                                                                              | -         |\n| locale                  | `string`                                                                                                                          | The locale to display and edit the value according to.                                                                                                        | -         |\n| description             | `ReactNode`                                                                                                                       | A description for the date input. Provides a hint such as specific requirements for what to choose.                                                           | -         |\n| errorMessage            | `ReactNode \\| (v: ValidationResult) => ReactNode`                                                                                 | An error message for the date input.                                                                                                                          | -         |\n| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ｜ true ｜ null ｜ undefined`                                              | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |\n| validationBehavior      | `native` \\| `aria`                                                                                                                | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |\n| startContent            | `ReactNode`                                                                                                                       | Element to be rendered in the left side of the date input.                                                                                                    | -         |\n| endContent              | `ReactNode`                                                                                                                       | Element to be rendered in the right side of the date input.                                                                                                   | -         |\n| labelPlacement          | `inside` \\| `outside` \\| `outside-left`                                                                                           | The position of the label.                                                                                                                                    | `inside`  |\n| isRequired              | `boolean`                                                                                                                         | Whether user input is required on the input before form submission.                                                                                           | `false`   |\n| isReadOnly              | `boolean`                                                                                                                         | Whether the input can be selected but not changed by the user.                                                                                                | -         |\n| isDisabled              | `boolean`                                                                                                                         | Whether the input is disabled.                                                                                                                                | `false`   |\n| isInvalid               | `boolean`                                                                                                                         | Whether the input value is invalid.                                                                                                                           | `false`   |\n| inputRef                | `ReactRef<HTMLInputElement \\| null>`                                                                                              | A ref for the hidden input element for HTML form submission.                                                                                                  | -         |\n| createCalendar          | `(name: string) => Calendar`                                                                                                      | A function that creates a Calendar object for a given calendar identifier.                                                                                    | -         |\n| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                    | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      | -         |\n| autoFocus               | `boolean`                                                                                                                         | Whether the element should receive focus on render.                                                                                                           | `false`   |\n| hourCycle               | `12` \\| `24`                                                                                                                      | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -         |\n| granularity             | `day` \\| `hour` \\| `minute` \\| `second`                                                                                           | Determines the smallest unit that is displayed in the date picker. Typically \"day\" for dates.                                                                 | -         |\n| hideTimeZone            | `boolean`                                                                                                                         | Whether to hide the time zone abbreviation.                                                                                                                   | `false`   |\n| shouldForceLeadingZeros | `boolean`                                                                                                                         | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`    |\n| disableAnimation        | `boolean`                                                                                                                         | Whether to disable animations.                                                                                                                                | `false`   |\n| classNames              | `Record<\"base\"｜ \"label\"｜ \"inputWrapper\"｜ \"innerWrapper\"｜ \"input\"｜ \"helperWrapper\"｜ \"description\"｜ \"errorMessage\", string>`   | Allows to set custom class names for the date input slots.                                                                                                    | -         |\n\n### DateInput Events\n\n| Attribute     | Type                                                                   | Description                                                     |     |\n| ------------- | ---------------------------------------------------------------------- | --------------------------------------------------------------- | --- |\n| onChange      | `((value: ZonedDateTime \\| CalendarDate \\| CalendarDateTime) => void)` | Handler that is called when the date-input's value changes.     | -   |\n| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element receives focus.         | -   |\n| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element loses focus.            | -   |\n| onFocusChange | `(isFocused: boolean) => void`                                         | Handler that is called when the element's focus status changes. | -   |\n| onKeyDown     | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is pressed.                   | -   |\n| onKeyUp       | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is released.                  | -   |\n",
    "code": "var Component=(()=>{var R=Object.create;var s=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var B=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),F=(n,t)=>{for(var r in t)s(n,r,{get:t[r],enumerable:!0})},p=(n,t,r,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let d of E(t))!k.call(n,d)&&d!==r&&s(n,d,{get:()=>t[d],enumerable:!(a=W(t,d))||a.enumerable});return n};var _=(n,t,r)=>(r=n!=null?R(P(n)):{},p(t||!n||!n.__esModule?s(r,\"default\",{value:n,enumerable:!0}):r,n)),H=n=>p(s({},\"__esModule\",{value:!0}),n);var m=B((Ze,u)=>{u.exports=_jsx_runtime});var Ve={};F(Ve,{default:()=>M,frontmatter:()=>ze});var e=_(m());var S=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateInput label={\"Birth date\"} placeholderValue={new CalendarDate(1995, 11, 6)} className=\"max-w-sm\" />\n    </div>\n  );\n}`,q={\"/App.jsx\":S},f={...q};var O=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n        <DateInput \n          label={\"Birth date\"} \n          isDisabled\n          defaultValue={parseDate(\"2024-04-04\")} \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n        />\n    </div>\n  );\n}`,Y={\"/App.jsx\":O},g={...Y};var U=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n        <DateInput \n          label={\"Birth date\"} \n          isReadOnly\n          defaultValue={parseDate(\"2024-04-04\")} \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n        />\n    </div>\n  );\n}`,G={\"/App.jsx\":U},x={...G};var K=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n        <DateInput \n          label={\"Birth date\"} \n          isRequired\n          defaultValue={parseDate(\"2024-04-04\")} \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n        />\n    </div>\n  );\n}`,X={\"/App.jsx\":K},b={...X};var J=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate} from \"@internationalized/date\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <DateInput variant={variant} label={\"Birth date\"} placeholderValue={new CalendarDate(1995, 11, 6)}  />\n        </div>\n      ))}  \n    </div>  \n  );\n}`,Q={\"/App.jsx\":J},v={...Q};var $=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate} from \"@internationalized/date\";\n\nexport default function App() {\n  const placements = [\n    \"inside\",\n    \"outside\",\n    \"outside-left\",\n  ];\n\n  return (\n    <div className=\"w-full flex flex-col max-w-sm gap-4\">\n      {placements.map((placement) => (\n        <DateInput \n          label=\"Birth date\" \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n          description={placement}\n          labelPlacement={placement}\n        />\n      ))}\n    </div>  \n  );\n}`,ee={\"/App.jsx\":$},D={...ee};var te=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateInput \n        label={\"Birth date\"} \n        placeholderValue={new CalendarDate(1995, 11, 6)} \n        description={\"This is my birth date.\"}\n      />\n    </div>\n  );\n}`,ne={\"/App.jsx\":te},y={...ne};var ae=`export const CalendarIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M7.75 2.5a.75.75 0 0 0-1.5 0v1.58c-1.44.115-2.384.397-3.078 1.092c-.695.694-.977 1.639-1.093 3.078h19.842c-.116-1.44-.398-2.384-1.093-3.078c-.694-.695-1.639-.977-3.078-1.093V2.5a.75.75 0 0 0-1.5 0v1.513C15.585 4 14.839 4 14 4h-4c-.839 0-1.585 0-2.25.013z\"\n      fill=\"currentColor\"\n    />\n    <path\n      clipRule=\"evenodd\"\n      d=\"M2 12c0-.839 0-1.585.013-2.25h19.974C22 10.415 22 11.161 22 12v2c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22h-4c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14zm15 2a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-4-5a1 1 0 1 1-2 0a1 1 0 0 1 2 0m0 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0m-6-3a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2\"\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n    />\n  </svg>\n);`,ie=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\nimport {CalendarIcon} from './CalendarIcon';\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n        <DateInput\n          label=\"Date Input\"\n          defaultValue={parseDate(\"2024-04-04\")} \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n          labelPlacement=\"outside\"\n          startContent={\n           <CalendarIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n          }\n        />\n        <DateInput\n          label=\"Date Input\"\n          defaultValue={parseDate(\"2024-04-04\")} \n          placeholderValue={new CalendarDate(1995, 11, 6)} \n          labelPlacement=\"outside\"\n          endContent={\n           <CalendarIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n          }\n        />\n      </div>\n    </div>  \n  );\n}`,re={\"/App.jsx\":ie,\"/CalendarIcon.jsx\":ae},w={...re};var de=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateInput \n        label={\"Birth date\"} \n        defaultValue={parseDate(\"2024-04-04\")} \n        placeholderValue={new CalendarDate(1995, 11, 6)} \n        description={\"This is my birth date.\"}\n        isInvalid\n        errorMessage=\"Please enter a valid date.\"\n        className=\"max-w-xs\"\n      />\n    </div>\n  );\n}`,le={\"/App.jsx\":de},I={...le};var oe=`import {DateInput} from \"@nextui-org/react\";\nimport {CalendarDate, parseDate} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DateInput \n        label={\"Birth date\"} \n        defaultValue={parseDate(\"2024-04-04\")} \n        placeholderValue={new CalendarDate(1995, 11, 6)} \n        description={\"This is my birth date.\"}\n        isInvalid\n        errorMessage={(value) => {\n          if (value.isInvalid) {\n            return \"Please enter a valid date.\";\n          }\n        }}\n        className=\"max-w-xs\"\n      />\n    </div>\n  );\n}`,ce={\"/App.jsx\":oe},A={...ce};var se=`import {DateInput} from \"@nextui-org/react\";\nimport {parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(parseDate(\"2024-04-04\"));\n\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  return (\n    <div className=\"w-full flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DateInput label=\"Date (controlled)\" value={value} onChange={setValue} />\n        <p className=\"text-default-500 text-sm\">\n          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n        </p>\n      </div>\n    </div>\n  );\n}`,he=`import {DateInput} from \"@nextui-org/react\";\nimport {DateValue, parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<DateValue>(parseDate(\"2024-04-04\"));\n\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  return (\n    <div className=\"w-full flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DateInput label=\"Date (controlled)\" value={value} onChange={setValue} />\n        <p className=\"text-default-500 text-sm\">\n          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n        </p>\n      </div>\n    </div>\n  );\n}`,pe={\"/App.jsx\":se,\"/App.tsx\":he},T={...pe};var ue=`import {DateInput} from \"@nextui-org/react\";\nimport {parseZonedDateTime, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n     <div className=\"w-full max-w-xl flex flex-col items-end gap-4\">\n      <DateInput\n        label={\"Event date\"}\n        defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n        labelPlacement=\"outside\"\n      />\n      <DateInput\n        label={\"Event date\"}\n        defaultValue={parseAbsoluteToLocal(\"2021-11-07T07:45:00Z\")}\n        labelPlacement=\"outside\"\n      />\n    </div>\n  );\n}`,me={\"/App.jsx\":ue},C={...me};var fe=`import {DateInput} from \"@nextui-org/react\";\nimport {now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DateInput\n        granularity=\"second\"\n        label=\"Date and time\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateInput granularity=\"day\" label=\"Date\" value={date} onChange={setDate} />\n      <DateInput granularity=\"second\" label=\"Event date\" />\n      <DateInput\n        granularity=\"second\"\n        label=\"Event date\"\n        placeholderValue={now(\"America/New_York\")}\n      />\n    </div>\n  );\n}`,ge=`import {DateInput} from \"@nextui-org/react\";\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DateInput\n        granularity=\"second\"\n        label=\"Date and time\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateInput granularity=\"day\" label=\"Date\" value={date} onChange={setDate} />\n      <DateInput granularity=\"second\" label=\"Event date\" />\n      <DateInput\n        granularity=\"second\"\n        label=\"Event date\"\n        placeholderValue={now(\"America/New_York\")}\n      />\n    </div>\n  );\n}`,xe={\"/App.jsx\":fe,\"/App.tsx\":ge},z={...xe};var be=`import {DateInput} from \"@nextui-org/react\";\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <div className=\"w-full flex flex-col gap-1\">\n        <h3>Min date</h3>\n        <DateInput\n          label=\"Date and time\"\n          minValue={today(getLocalTimeZone())}\n          defaultValue={today(getLocalTimeZone()).subtract({ days: 1 })}\n        />\n      </div>\n      <div className=\"w-full flex flex-col gap-2\">\n        <h3>Max date</h3>\n        <DateInput\n          label=\"Date and time\"\n          maxValue={today(getLocalTimeZone())}\n          defaultValue={today(getLocalTimeZone()).add({ days: 1 })}\n        />\n      </div>\n    </div>\n  );\n}`,ve={\"/App.jsx\":be},V={...ve};var De=`import {DateInput} from \"@nextui-org/react\";\nimport {now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [date, setDate] = React.useState(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DateInput label=\"Appointment date\" value={date} onChange={setDate} />\n      </I18nProvider>\n    </div>\n  );\n}`,ye=`import {DateInput} from \"@nextui-org/react\";\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DateInput label=\"Appointment date\" value={date} onChange={setDate} />\n      </I18nProvider>\n    </div>\n  );\n}`,we={\"/App.jsx\":De,\"/App.tsx\":ye},N={...we};var Ie=`import {DateInput} from \"@nextui-org/react\";\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DateInput\n        label=\"Appointment time\"\n        hideTimeZone\n        defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n      />\n    </div>\n  );\n}`,Ae={\"/App.jsx\":Ie},Z={...Ae};var Te=`import {DateInput} from \"@nextui-org/react\";\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DateInput\n        label=\"Appointment time\"\n        hourCycle={24}\n        defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n        granularity={\"minute\"}\n      />\n    </div>\n  );\n}`,Ce={\"/App.jsx\":Te},j={...Ce};var i={usage:f,disabled:g,readOnly:x,required:b,variants:v,labelPlacements:D,description:y,startEndContent:w,errorMessage:I,errorMessageFunction:A,controlled:T,timeZones:C,granularity:z,minAndMaxDate:V,internationalCalendar:N,hideTimeZone:Z,hourlyCycle:j};var ze={title:\"DateInput\",description:\"DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment.\"};function L(n){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...n.components},{CarbonAd:r,CodeDemo:a,ComponentLinks:d,ImportTabs:h,PackageManagers:l,Spacer:o}=t;return r||c(\"CarbonAd\",!0),a||c(\"CodeDemo\",!0),d||c(\"ComponentLinks\",!0),h||c(\"ImportTabs\",!0),l||c(\"PackageManagers\",!0),o||c(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"dateinput\",children:\"DateInput\"}),`\n`,(0,e.jsx)(t.p,{children:`DateInput is a component that allows users to enter and edit date and time values using a keyboard.\nEach part of a date value is displayed in an individually editable segment.`}),`\n`,(0,e.jsx)(d,{component:\"date-input\",storybook:\"dateinput\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(r,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(l,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add date-input\",npm:\"npm install @nextui-org/date-input\",yarn:\"yarn add @nextui-org/date-input\",pnpm:\"pnpm add @nextui-org/date-input\",bun:\"bun add @nextui-org/date-input\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(h,{commands:{main:'import {DateInput} from \"@nextui-org/react\";',individual:'import {DateInput} from \"@nextui-org/date-input\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(a,{title:\"Usage\",files:i.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(a,{title:\"Disabled\",files:i.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(a,{title:\"Read Only\",files:i.readOnly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsx)(a,{title:\"Required\",files:i.required}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(a,{title:\"Variants\",files:i.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placements\",children:\"Label Placements\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the label by setting the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"inside\"}),\", \",(0,e.jsx)(t.code,{children:\"outside\"}),\" or \",(0,e.jsx)(t.code,{children:\"outside-left\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Label Placements\",files:i.labelPlacements}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": If the \",(0,e.jsx)(t.code,{children:\"label\"}),\" is not passed, the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property will be \",(0,e.jsx)(t.code,{children:\"outside\"}),\" by default.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"start--end-content\",children:\"Start & End Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" properties to add content to the start and end of the \",(0,e.jsx)(t.code,{children:\"DateInput\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Start and End Content\",files:i.startEndContent}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a description to the input by passing the \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(a,{title:\"With Description\",files:i.description}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid input.\"]}),`\n`,(0,e.jsx)(a,{title:\"With Error Message\",files:i.errorMessage}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also pass an error message as a function. This allows for dynamic error message handling based on the \",(0,e.jsx)(t.a,{href:\"https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51\",children:\"ValidationResult\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"With Error Message Function\",files:i.errorMessageFunction}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(a,{title:\"Controlled\",files:i.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"time-zones\",children:\"Time Zones\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"DateInput is time zone aware when a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {parseZonedDateTime} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(o,{y:2}),`\n`,(0,e.jsx)(a,{title:\"Time Zones\",files:i.timeZones}),`\n`,(0,e.jsx)(t.h3,{id:\"granularity\",children:\"Granularity\"}),`\n`,(0,e.jsxs)(t.p,{children:[`The granularity prop allows you to control the smallest unit that is displayed by DateInput By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `,(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" and \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),' values are displayed with \"minute\" granularity.']}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(o,{y:2}),`\n`,(0,e.jsx)(a,{title:\"Time Zones\",files:i.granularity}),`\n`,(0,e.jsx)(t.h3,{id:\"min-date-and-max-date\",children:\"Min Date And Max Date\"}),`\n`,(0,e.jsx)(t.p,{children:\"The minValue and maxValue props can also be used to ensure the value is within a specific range.\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Min Date And Max Date\",files:i.minAndMaxDate}),`\n`,(0,e.jsx)(t.h3,{id:\"international-calendar\",children:\"International Calendar\"}),`\n`,(0,e.jsxs)(t.p,{children:[`DateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the `,(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string\",children:\"Unicode calendar locale extension\"}),`,\npassed to the `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/I18nProvider.html\",children:\"I18nProvider\"}),\" component.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date @react-aria/i18n\",yarn:\"yarn add @internationalized/date @react-aria/i18n\",pnpm:\"pnpm add @internationalized/date @react-aria/i18n\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"International Calendar\",files:i.internationalCalendar}),`\n`,(0,e.jsx)(t.h3,{id:\"hide-time-zone\",children:\"Hide Time Zone\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"When a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),` object is provided as the value to DateInput, the time zone abbreviation is displayed by default.\nHowever, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {parseZonedDateTime} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Hide Time Zone\",files:i.hideTimeZone}),`\n`,(0,e.jsx)(t.h3,{id:\"hourly-cycle\",children:\"Hourly Cycle\"}),`\n`,(0,e.jsxs)(t.p,{children:[`By default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale.\nHowever, this can be overridden using the `,(0,e.jsx)(t.code,{children:\"hourCycle\"}),` prop if needed for a specific usecase.\nThis example forces DateInput to use 24-hour time, regardless of the locale.`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(l,{commands:{npm:\"npm install @internationalized/date\",yarn:\"yarn add @internationalized/date\",pnpm:\"pnpm add @internationalized/date\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {parseZonedDateTime} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Hide Time Zone\",files:i.hourlyCycle}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the date-input, it is the one that is displayed above, inside or left of the date-input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The date-input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"innerWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"input\"}),\", the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and the \",(0,e.jsx)(t.code,{children:\"endContent\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"clearButton\"}),\": The clear button, it is at the end of the input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"helperWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"description\"}),\" and the \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the date-input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the date-input.\"]}),`\n`]}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"DateInput\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-slot\"}),`:\nAll slots have this prop. which slot the element represents(e.g. `,(0,e.jsx)(t.code,{children:\"slot\"}),\").\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the date-input is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the date-input is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the date-input is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the date-input is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-helper\"}),`:\nWhen the date-input has helper text(`,(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" or \",(0,e.jsx)(t.code,{children:\"description\"}),\"). Base on those two props.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-start-content\"}),`:\nWhen the date-input has a start content. Base on those `,(0,e.jsx)(t.code,{children:\"startContent\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-end-content\"}),`:\nWhen the date-input has a end content. Base on those `,(0,e.jsx)(t.code,{children:\"endContent\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Visual and ARIA labeling support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Change, clipboard, composition, selection, and input event support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description and error message help text linked to the input via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\"}),`\n`]}),`\n`,(0,e.jsx)(o,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"dateinput-props\",children:\"DateInput Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"label\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content to display as the label.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"value\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"DateValue\"})}),(0,e.jsx)(t.td,{children:\"The current value of the date input (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"DateValue\"})}),(0,e.jsx)(t.td,{children:\"The default value of the date input (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"variant\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"flat\"}),\" | \",(0,e.jsx)(t.code,{children:\"bordered\"}),\" | \",(0,e.jsx)(t.code,{children:\"faded\"}),\" | \",(0,e.jsx)(t.code,{children:\"underlined\"})]}),(0,e.jsx)(t.td,{children:\"The variant of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"flat\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The color of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The size of the date input.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The radius of the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placeholderValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"DateValue\"})}),(0,e.jsx)(t.td,{children:\"A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"minValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"DateValue\"})}),(0,e.jsx)(t.td,{children:\"The minimum allowed date that a user may select.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"maxValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"DateValue\"})}),(0,e.jsx)(t.td,{children:\"The maximum allowed date that a user may select.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"locale\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The locale to display and edit the value according to.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"description\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"A description for the date input. Provides a hint such as specific requirements for what to choose.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"errorMessage\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode | (v: ValidationResult) => ReactNode\"})}),(0,e.jsx)(t.td,{children:\"An error message for the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validate\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: MappedDateValue<DateValue>) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,e.jsxs)(t.td,{children:[\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if \",(0,e.jsx)(t.code,{children:\"validationBehavior\"}),\" is set to \",(0,e.jsx)(t.code,{children:\"native\"}),\". For real-time validation, use the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationBehavior\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"native\"}),\" | \",(0,e.jsx)(t.code,{children:\"aria\"})]}),(0,e.jsx)(t.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"aria\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"startContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the left side of the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"endContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the right side of the date input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"labelPlacement\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"inside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside-left\"})]}),(0,e.jsx)(t.td,{children:\"The position of the label.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"inside\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isRequired\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether user input is required on the input before form submission.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isReadOnly\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the input can be selected but not changed by the user.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the input is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isInvalid\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the input value is invalid.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"inputRef\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactRef<HTMLInputElement | null>\"})}),(0,e.jsx)(t.td,{children:\"A ref for the hidden input element for HTML form submission.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"createCalendar\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(name: string) => Calendar\"})}),(0,e.jsx)(t.td,{children:\"A function that creates a Calendar object for a given calendar identifier.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDateUnavailable\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(date: DateValue) => boolean\"})}),(0,e.jsx)(t.td,{children:\"Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"autoFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the element should receive focus on render.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"hourCycle\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"12\"}),\" | \",(0,e.jsx)(t.code,{children:\"24\"})]}),(0,e.jsx)(t.td,{children:\"Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"granularity\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"day\"}),\" | \",(0,e.jsx)(t.code,{children:\"hour\"}),\" | \",(0,e.jsx)(t.code,{children:\"minute\"}),\" | \",(0,e.jsx)(t.code,{children:\"second\"})]}),(0,e.jsx)(t.td,{children:'Determines the smallest unit that is displayed in the date picker. Typically \"day\" for dates.'}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"hideTimeZone\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to hide the time zone abbreviation.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldForceLeadingZeros\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to always show leading zeros in the month, day, and hour fields.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to disable animations.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C \"label\"\\uFF5C \"inputWrapper\"\\uFF5C \"innerWrapper\"\\uFF5C \"input\"\\uFF5C \"helperWrapper\"\\uFF5C \"description\"\\uFF5C \"errorMessage\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the date input slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"dateinput-events\",children:\"DateInput Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"((value: ZonedDateTime | CalendarDate | CalendarDateTime) => void)\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the date-input's value changes.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocus\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element receives focus.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: FocusEvent<HTMLInputElement>) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element loses focus.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onFocusChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isFocused: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element's focus status changes.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyDown\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is pressed.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onKeyUp\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: KeyboardEvent) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when a key is released.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]})]})}function M(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(L,{...n})}):L(n)}function c(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return H(Ve);})();\n;return Component;"
  },
  "_id": "docs/components/date-input.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/date-input.mdx",
    "sourceFileName": "date-input.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/date-input"
  },
  "type": "Doc",
  "slug": "/docs/components/date-input",
  "slugAsParams": "components/date-input",
  "url": "/docs/components/date-input"
}