{
  "title": "Chip",
  "description": "A Chip is a small block of essential information that represent an input, attribute, or action.",
  "body": {
    "raw": "\nimport {chipContent} from \"@/content/components/chip\";\n\n# Chip\n\nA Chip is a small block of essential information that represent an input, attribute, or action.\n\n<ComponentLinks component=\"chip\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add chip\",\n    npm: \"npm install @nextui-org/chip\",\n    yarn: \"yarn add @nextui-org/chip\",\n    pnpm: \"pnpm add @nextui-org/chip\",\n    bun: \"bun add @nextui-org/chip\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Chip} from \"@nextui-org/react\";',\n    individual: 'import {Chip} from \"@nextui-org/chip\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={chipContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={chipContent.disabled} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={chipContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={chipContent.colors} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={chipContent.radius} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={chipContent.variants} />\n\n### Start & End Content\n\n<CodeDemo title=\"Start & End Content\" files={chipContent.startEndContent} />\n\n### With Close Button\n\nIf you pass the `onClose` prop, the close button will be visible. You can override the close icon by passing the `endContent` prop.\n\n<CodeDemo title=\"With Close Button\" files={chipContent.closeButton} />\n\n### With Avatar\n\n<CodeDemo title=\"With Avatar\" files={chipContent.avatar} />\n\n### List of Chips\n\n<CodeDemo title=\"List of Chips\" files={chipContent.list} />\n\n## Slots\n\n- **base**: The base slot of the chip, it is the container of the chip.\n- **content**: The content slot of the chip, it is the container of the chip children.\n- **dot**: Small dot on the left side of the chip. It is visible when the `variant=dot` prop is passed.\n- **avatar**: Avatar classes of the chip. It is visible when the `avatar` prop is passed.\n- **closeButton**: Close button classes of the chip. It is visible when the `onClose` prop is passed.\n\n### Custom Styles\n\nYou can customize the `Chip` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={chipContent.customStyles} />\n\n<Spacer y={4} />\n\n## API\n\n### Chip Props\n\n| Attribute    | Type                                                                         | Description                                                                                                                  | Default   |\n| ------------ | ---------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | --------- |\n| children     | `ReactNode`                                                                  | The content of the chip.                                                                                                     | -         |\n| variant      | `solid` \\| `bordered` \\| `light` \\| `flat` \\| `faded` \\| `shadow` \\| `dot`   | The chip appearance style.                                                                                                   | `solid`   |\n| color        | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`  | The color of the chip.                                                                                                       | `default` |\n| size         | `sm` \\| `md` \\| `lg`                                                         | The size of the chip.                                                                                                        | `md`      |\n| radius       | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                     | The radius of the chip.                                                                                                      | `full`    |\n| avatar       | `ReactNode`                                                                  | Avatar to be rendered in the left side of the chip.                                                                          | -         |\n| startContent | `ReactNode`                                                                  | Element to be rendered in the left side of the chip. This prop overrides the `avatar` prop.                                  | -         |\n| endContent   | `ReactNode`                                                                  | Element to be rendered in the right side of the chip. This prop overrides the default close button when `onClose` is passed. | -         |\n| isDisabled   | `boolean`                                                                    | Whether the chip is disabled.                                                                                                | `false`   |\n| classNames   | `Record<\"base\"｜ \"content\"｜ \"dot\"｜ \"avatar\"｜ \"closeButton\", string>`      | Allows to set custom class names for the chip slots.                                                                         | -         |\n\n### Chip Events\n\n| Attribute | Type                      | Description                                                                                                                        |\n| --------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| onClose   | `(e: PressEvent) => void` | Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent). |\n",
    "code": "var Component=(()=>{var j=Object.create;var h=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var L=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),M=(i,e)=>{for(var o in e)h(i,o,{get:e[o],enumerable:!0})},p=(i,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of T(e))!R.call(i,d)&&d!==o&&h(i,d,{get:()=>e[d],enumerable:!(r=k(e,d))||r.enumerable});return i};var F=(i,e,o)=>(o=i!=null?j(D(i)):{},p(e||!i||!i.__esModule?h(o,\"default\",{value:i,enumerable:!0}):o,i)),B=i=>p(h({},\"__esModule\",{value:!0}),i);var f=L((ae,u)=>{u.exports=_jsx_runtime});var he={};M(he,{default:()=>S,frontmatter:()=>ce});var t=F(f());var E=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Chip>Chip</Chip>\n  );\n}`,W={\"/App.jsx\":E},C={...W};var _=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Chip isDisabled color=\"primary\">Chip</Chip>\n  );\n}`,P={\"/App.jsx\":_},m={...P};var V=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip size=\"sm\">Small</Chip>\n      <Chip size=\"md\">Medium</Chip>\n      <Chip size=\"lg\">Large</Chip>\n    </div>  \n  );\n}`,J={\"/App.jsx\":V},g={...J};var U=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip color=\"default\">Default</Chip>\n      <Chip color=\"primary\">Primary</Chip>\n      <Chip color=\"secondary\">Secondary</Chip>\n      <Chip color=\"success\">Success</Chip>\n      <Chip color=\"warning\">Warning</Chip>\n      <Chip color=\"danger\">Danger</Chip>\n    </div> \n  );\n}`,X={\"/App.jsx\":U},x={...X};var Y=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip radius=\"full\">Full</Chip>\n      <Chip radius=\"lg\">Large</Chip>\n      <Chip radius=\"md\">Medium</Chip>\n      <Chip radius=\"sm\">Small</Chip>\n    </div>  \n  );\n}`,Z={\"/App.jsx\":Y},v={...Z};var G=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip color=\"warning\" variant=\"solid\">Solid</Chip>\n      <Chip color=\"warning\" variant=\"bordered\">Bordered</Chip>\n      <Chip color=\"warning\" variant=\"light\">Light</Chip>\n      <Chip color=\"warning\" variant=\"flat\">Flat</Chip>\n      <Chip color=\"warning\" variant=\"faded\">Faded</Chip>\n      <Chip color=\"warning\" variant=\"shadow\">Shadow</Chip>\n      <Chip color=\"warning\" variant=\"dot\">Dot</Chip>\n    </div> \n  );\n}`,H={\"/App.jsx\":G},b={...H};var O=`export const NotificationIcon = ({size, height, width, ...props}) => {\n  return (\n    <svg\n      fill=\"none\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z\"\n        fill='currentColor'\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};`,q=`export const CheckIcon = ({\n  size,\n  height,\n  width,\n  ...props\n}) => {\n  return (\n    <svg\n      width={size || width || 24}\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z\" fill=\"currentColor\"/>\n    </svg>\n  );\n};`,K=`import {Chip} from \"@nextui-org/react\";\nimport {NotificationIcon} from \"./NotificationIcon\";\nimport {CheckIcon} from \"./CheckIcon\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip\n        startContent={<CheckIcon size={18} />}\n        variant=\"faded\"\n        color=\"success\"\n      >\n        Chip\n      </Chip>\n      <Chip\n        endContent={<NotificationIcon size={18} />}\n        variant=\"flat\"\n        color=\"secondary\"\n      >\n        Chip\n      </Chip>\n    </div>\n  );\n}`,Q={\"/App.jsx\":K,\"/NotificationIcon.jsx\":O,\"/CheckIcon.jsx\":q},A={...Q};var $=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip onClose={() => console.log(\"close\")}>Chip</Chip>\n      <Chip onClose={() => console.log(\"close\")} variant=\"bordered\">\n        Chip\n      </Chip>\n    </div>\n  );\n}`,ee={\"/App.jsx\":$},w={...ee};var te=`import {Chip, Avatar} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip\n        variant=\"flat\"\n        avatar={\n          <Avatar\n            name=\"JW\"\n            src=\"https://i.pravatar.cc/300?u=a042581f4e29026709d\"\n          />\n        }\n      >\n        Avatar\n      </Chip>\n      <Chip\n        variant=\"flat\"\n        avatar={\n          <Avatar name=\"JW\" size=\"sm\" getInitials={(name) => name.charAt(0)} />\n        }\n      >\n        Avatar\n      </Chip>\n    </div>\n  );\n}`,ie={\"/App.jsx\":te},y={...ie};var re=`import {Chip} from \"@nextui-org/react\";\n\nconst initialFruits = [\"Apple\", \"Banana\", \"Cherry\", \"Watermelon\", \"Orange\"]\n\nexport default function App() {\n  const [fruits, setFruits] = React.useState(initialFruits);\n\n  const handleClose = (fruitToRemove) => {\n    setFruits(fruits.filter(fruit => fruit !== fruitToRemove));\n    if (fruits.length === 1) {\n      setFruits(initialFruits);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      {fruits.map((fruit, index) => (\n        <Chip key={index} onClose={() => handleClose(fruit)} variant=\"flat\">\n          {fruit}\n        </Chip>\n      ))}\n    </div>\n  );\n}`,ne={\"/App.jsx\":re},I={...ne};var oe=`import {Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Chip\n      variant=\"shadow\"\n      classNames={{\n        base: \"bg-gradient-to-br from-indigo-500 to-pink-500 border-small border-white/50 shadow-pink-500/30\",\n        content: \"drop-shadow shadow-black text-white\",\n      }}\n    >\n      New\n    </Chip>\n  );\n}`,de={\"/App.jsx\":oe},z={...de};var n={usage:C,disabled:m,sizes:g,colors:x,radius:v,variants:b,startEndContent:A,closeButton:w,avatar:y,list:I,customStyles:z};var ce={title:\"Chip\",description:\"A Chip is a small block of essential information that represent an input, attribute, or action.\"};function N(i){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...i.components},{CarbonAd:o,CodeDemo:r,ComponentLinks:d,ImportTabs:l,PackageManagers:a,Spacer:s}=e;return o||c(\"CarbonAd\",!0),r||c(\"CodeDemo\",!0),d||c(\"ComponentLinks\",!0),l||c(\"ImportTabs\",!0),a||c(\"PackageManagers\",!0),s||c(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"chip\",children:\"Chip\"}),`\n`,(0,t.jsx)(e.p,{children:\"A Chip is a small block of essential information that represent an input, attribute, or action.\"}),`\n`,(0,t.jsx)(d,{component:\"chip\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(o,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(a,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add chip\",npm:\"npm install @nextui-org/chip\",yarn:\"yarn add @nextui-org/chip\",pnpm:\"pnpm add @nextui-org/chip\",bun:\"bun add @nextui-org/chip\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(l,{commands:{main:'import {Chip} from \"@nextui-org/react\";',individual:'import {Chip} from \"@nextui-org/chip\";'}}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(r,{title:\"Usage\",files:n.usage}),`\n`,(0,t.jsx)(e.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,t.jsx)(r,{title:\"Disabled\",files:n.disabled}),`\n`,(0,t.jsx)(e.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,t.jsx)(r,{title:\"Sizes\",files:n.sizes}),`\n`,(0,t.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,t.jsx)(r,{title:\"Colors\",files:n.colors}),`\n`,(0,t.jsx)(e.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,t.jsx)(r,{title:\"Radius\",files:n.radius}),`\n`,(0,t.jsx)(e.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,t.jsx)(r,{title:\"Variants\",files:n.variants}),`\n`,(0,t.jsx)(e.h3,{id:\"start--end-content\",children:\"Start & End Content\"}),`\n`,(0,t.jsx)(r,{title:\"Start & End Content\",files:n.startEndContent}),`\n`,(0,t.jsx)(e.h3,{id:\"with-close-button\",children:\"With Close Button\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you pass the \",(0,t.jsx)(e.code,{children:\"onClose\"}),\" prop, the close button will be visible. You can override the close icon by passing the \",(0,t.jsx)(e.code,{children:\"endContent\"}),\" prop.\"]}),`\n`,(0,t.jsx)(r,{title:\"With Close Button\",files:n.closeButton}),`\n`,(0,t.jsx)(e.h3,{id:\"with-avatar\",children:\"With Avatar\"}),`\n`,(0,t.jsx)(r,{title:\"With Avatar\",files:n.avatar}),`\n`,(0,t.jsx)(e.h3,{id:\"list-of-chips\",children:\"List of Chips\"}),`\n`,(0,t.jsx)(r,{title:\"List of Chips\",files:n.list}),`\n`,(0,t.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"base\"}),\": The base slot of the chip, it is the container of the chip.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"content\"}),\": The content slot of the chip, it is the container of the chip children.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"dot\"}),\": Small dot on the left side of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"variant=dot\"}),\" prop is passed.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"avatar\"}),\": Avatar classes of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"avatar\"}),\" prop is passed.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"closeButton\"}),\": Close button classes of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"onClose\"}),\" prop is passed.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can customize the \",(0,t.jsx)(e.code,{children:\"Chip\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,t.jsx)(r,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,t.jsx)(s,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"chip-props\",children:\"Chip Props\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Attribute\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"}),(0,t.jsx)(e.th,{children:\"Default\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"children\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"ReactNode\"})}),(0,t.jsx)(e.td,{children:\"The content of the chip.\"}),(0,t.jsx)(e.td,{children:\"-\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"variant\"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:\"solid\"}),\" | \",(0,t.jsx)(e.code,{children:\"bordered\"}),\" | \",(0,t.jsx)(e.code,{children:\"light\"}),\" | \",(0,t.jsx)(e.code,{children:\"flat\"}),\" | \",(0,t.jsx)(e.code,{children:\"faded\"}),\" | \",(0,t.jsx)(e.code,{children:\"shadow\"}),\" | \",(0,t.jsx)(e.code,{children:\"dot\"})]}),(0,t.jsx)(e.td,{children:\"The chip appearance style.\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"solid\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"color\"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:\"default\"}),\" | \",(0,t.jsx)(e.code,{children:\"primary\"}),\" | \",(0,t.jsx)(e.code,{children:\"secondary\"}),\" | \",(0,t.jsx)(e.code,{children:\"success\"}),\" | \",(0,t.jsx)(e.code,{children:\"warning\"}),\" | \",(0,t.jsx)(e.code,{children:\"danger\"})]}),(0,t.jsx)(e.td,{children:\"The color of the chip.\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"default\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"size\"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:\"sm\"}),\" | \",(0,t.jsx)(e.code,{children:\"md\"}),\" | \",(0,t.jsx)(e.code,{children:\"lg\"})]}),(0,t.jsx)(e.td,{children:\"The size of the chip.\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"md\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"radius\"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:\"none\"}),\" | \",(0,t.jsx)(e.code,{children:\"sm\"}),\" | \",(0,t.jsx)(e.code,{children:\"md\"}),\" | \",(0,t.jsx)(e.code,{children:\"lg\"}),\" | \",(0,t.jsx)(e.code,{children:\"full\"})]}),(0,t.jsx)(e.td,{children:\"The radius of the chip.\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"full\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"avatar\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"ReactNode\"})}),(0,t.jsx)(e.td,{children:\"Avatar to be rendered in the left side of the chip.\"}),(0,t.jsx)(e.td,{children:\"-\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"startContent\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"ReactNode\"})}),(0,t.jsxs)(e.td,{children:[\"Element to be rendered in the left side of the chip. This prop overrides the \",(0,t.jsx)(e.code,{children:\"avatar\"}),\" prop.\"]}),(0,t.jsx)(e.td,{children:\"-\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"endContent\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"ReactNode\"})}),(0,t.jsxs)(e.td,{children:[\"Element to be rendered in the right side of the chip. This prop overrides the default close button when \",(0,t.jsx)(e.code,{children:\"onClose\"}),\" is passed.\"]}),(0,t.jsx)(e.td,{children:\"-\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"isDisabled\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"boolean\"})}),(0,t.jsx)(e.td,{children:\"Whether the chip is disabled.\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"false\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"classNames\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:'Record<\"base\"\\uFF5C \"content\"\\uFF5C \"dot\"\\uFF5C \"avatar\"\\uFF5C \"closeButton\", string>'})}),(0,t.jsx)(e.td,{children:\"Allows to set custom class names for the chip slots.\"}),(0,t.jsx)(e.td,{children:\"-\"})]})]})]}),`\n`,(0,t.jsx)(e.h3,{id:\"chip-events\",children:\"Chip Events\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Attribute\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsx)(e.tbody,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"onClose\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"(e: PressEvent) => void\"})}),(0,t.jsx)(e.td,{children:\"Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent).\"})]})})]})]})}function S(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(N,{...i})}):N(i)}function c(i,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return B(he);})();\n;return Component;"
  },
  "_id": "docs/components/chip.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/chip.mdx",
    "sourceFileName": "chip.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/chip"
  },
  "type": "Doc",
  "slug": "/docs/components/chip",
  "slugAsParams": "components/chip",
  "url": "/docs/components/chip"
}