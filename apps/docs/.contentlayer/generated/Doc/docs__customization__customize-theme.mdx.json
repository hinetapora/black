{
  "title": "Customize theme",
  "description": "Learn how NextUI enables effortless customization of default themes.",
  "body": {
    "raw": "\n# Customize theme\n\nAs outlined in preceding sections, NextUI presents two predefined themes, `light` and `dark`. \nThese themes are inherently flexible, allowing you to tailor them to your specific preferences\nor project needs.\n\nFurthermore, you have the option to create your own theme based on the default ones. Each theme \nincorporates [Layout](/docs/customization/layout) tokens and [Color](/docs/customization/colors) tokens, designed \nto facilitate your customization process.\n\n<CarbonAd/>\n\n## Customizing Layout\n\nYou can modify a variety of layout aspects, including spacing units, font sizes, line heights,\nradius, and more.\n\nLayout tokens can be applied globally across all themes or specifically \nto a chosen theme.\n\n### Global Layout Customization\n\nSuppose you require a smaller border radius, a thinner border width, and more opaque disabled\nelements across all themes. You can implement these changes by adding the following code to \nyour `tailwind.config.js` file.\n\n```js {9-19}\n// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    nextui({\n      layout: {\n        disabledOpacity: \"0.3\", // opacity-[0.3]\n        radius: {\n          small: \"2px\", // rounded-small\n          medium: \"4px\", // rounded-medium\n          large: \"6px\", // rounded-large\n        },\n        borderWidth: {\n          small: \"1px\", // border-small\n          medium: \"1px\", // border-medium\n          large: \"2px\", // border-large\n        },\n      },\n      themes: {\n        light: {},\n        dark: {},\n      },\n    }),\n  ],\n};\n```\n\nAs NextUI components employ layout tokens, the modifications will be reflected across all \ncomponents that utilize them. For instance, the [Button](/docs/components/button) component \nuses the `radius` token to set the border radius and the `borderWidth` token to define the \nborder width when the variant is `bordered`.\n\nSo let's see how the [Button](/docs/components/button) component looks like after the changes.\n\n\n```jsx\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button variant=\"bordered\" radius=\"md\">\n        Button\n      </Button>\n      <Button isDisabled color=\"primary\" radius=\"md\">\n        Disabled\n      </Button>\n    </div>\n  );\n}\n```\n\n<Spacer y={4} />\n\nimport customLayout from \"@/content/customization/customize-theme/custom-layout\";\n\n<CodeDemo title=\"Custom layout example\" showEditor={false} files={customLayout} />\n\n> See the [Layout](/docs/customization/layout#default-layout) section for more details about the available tokens.\n\n### Customizing Colors\n\nNow, Let's say you wish to modify the primary and focus colors of the dark theme. This can \nbe achieved by adding the following code to your `tailwind.config.js` file.\n\n```js {10-16}\n// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    nextui({\n      themes: {\n        dark: {\n          colors: {\n            primary: {\n              DEFAULT: \"#BEF264\",\n              foreground: \"#000000\",\n            },\n            focus: \"#BEF264\",\n          },\n        },\n      },\n    }),\n  ],\n};\n```\n\nThis modification will impact all components using the `primary` color. For instance, \nthe [Button](/docs/components/button) component uses the `primary` color as background color when the \nvariant is `solid` or `ghost`.\n\n```jsx\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button color=\"primary\" variant=\"solid\">Solid</Button>\n      <Button color=\"primary\" variant=\"ghost\">Ghost</Button>\n    </div>\n  );\n}\n```\n\n<Spacer y={4} />\n\nimport customColors from \"@/content/customization/customize-theme/custom-colors\";\n\n<CodeDemo title=\"Custom colors example\" showEditor={false} files={customColors} />\n\n> ðŸŽ‰ That's it! You have successfully customized the default theme. See the [Colors](/docs/customization/colors) \n> section for more details about the available semantic colors and color tokens. \n",
    "code": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var B=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var t in e)a(o,t,{get:e[t],enumerable:!0})},d=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!b.call(o,r)&&r!==t&&a(o,r,{get:()=>e[r],enumerable:!(i=g(e,r))||i.enumerable});return o};var w=(o,e,t)=>(t=o!=null?f(y(o)):{},d(e||!o||!o.__esModule?a(t,\"default\",{value:o,enumerable:!0}):t,o)),k=o=>d(a({},\"__esModule\",{value:!0}),o);var c=B((L,l)=>{l.exports=_jsx_runtime});var E={};v(E,{default:()=>p,frontmatter:()=>A});var n=w(c());var C=`import {Button} from '@nextui-org/react';\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button variant=\"bordered\" className=\"rounded-[4px] border-[1px]\">\n        Button\n      </Button>\n      <Button isDisabled color=\"primary\" className=\"rounded-[4px] opacity-30\">\n        Disabled\n      </Button>\n    </div>\n  );\n}`,z={\"/App.jsx\":C},u={...z};var j=`import {Button} from '@nextui-org/react';\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button className=\"rounded-[4px] bg-[#BEF264] text-[#000000] data-[focus-visible=true]:outline-[#BEF264]\">\n        Solid\n      </Button>\n      <Button variant=\"ghost\" className=\"rounded-[4px] border-[1px] border-[#BEF264] hover:!bg-[#BEF264] hover:!text-[#000000] data-[focus-visible=true]:outline-[#BEF264]\">\n        Ghost\n      </Button>\n    </div>  \n  );\n}`,N={\"/App.jsx\":j},h={...N};var A={title:\"Customize theme\",description:\"Learn how NextUI enables effortless customization of default themes.\"};function m(o){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",...o.components},{CarbonAd:t,CodeDemo:i,Spacer:r}=e;return t||s(\"CarbonAd\",!0),i||s(\"CodeDemo\",!0),r||s(\"Spacer\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"customize-theme\",children:\"Customize theme\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"As outlined in preceding sections, NextUI presents two predefined themes, \",(0,n.jsx)(e.code,{children:\"light\"}),\" and \",(0,n.jsx)(e.code,{children:\"dark\"}),`.\nThese themes are inherently flexible, allowing you to tailor them to your specific preferences\nor project needs.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Furthermore, you have the option to create your own theme based on the default ones. Each theme\nincorporates `,(0,n.jsx)(e.a,{href:\"/docs/customization/layout\",children:\"Layout\"}),\" tokens and \",(0,n.jsx)(e.a,{href:\"/docs/customization/colors\",children:\"Color\"}),` tokens, designed\nto facilitate your customization process.`]}),`\n`,(0,n.jsx)(t,{}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-layout\",children:\"Customizing Layout\"}),`\n`,(0,n.jsx)(e.p,{children:`You can modify a variety of layout aspects, including spacing units, font sizes, line heights,\nradius, and more.`}),`\n`,(0,n.jsx)(e.p,{children:`Layout tokens can be applied globally across all themes or specifically\nto a chosen theme.`}),`\n`,(0,n.jsx)(e.h3,{id:\"global-layout-customization\",children:\"Global Layout Customization\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Suppose you require a smaller border radius, a thinner border width, and more opaque disabled\nelements across all themes. You can implement these changes by adding the following code to\nyour `,(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",meta:\"{9-19}\",children:`// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    nextui({\n      layout: {\n        disabledOpacity: \"0.3\", // opacity-[0.3]\n        radius: {\n          small: \"2px\", // rounded-small\n          medium: \"4px\", // rounded-medium\n          large: \"6px\", // rounded-large\n        },\n        borderWidth: {\n          small: \"1px\", // border-small\n          medium: \"1px\", // border-medium\n          large: \"2px\", // border-large\n        },\n      },\n      themes: {\n        light: {},\n        dark: {},\n      },\n    }),\n  ],\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`As NextUI components employ layout tokens, the modifications will be reflected across all\ncomponents that utilize them. For instance, the `,(0,n.jsx)(e.a,{href:\"/docs/components/button\",children:\"Button\"}),` component\nuses the `,(0,n.jsx)(e.code,{children:\"radius\"}),\" token to set the border radius and the \",(0,n.jsx)(e.code,{children:\"borderWidth\"}),` token to define the\nborder width when the variant is `,(0,n.jsx)(e.code,{children:\"bordered\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"So let's see how the \",(0,n.jsx)(e.a,{href:\"/docs/components/button\",children:\"Button\"}),\" component looks like after the changes.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button variant=\"bordered\" radius=\"md\">\n        Button\n      </Button>\n      <Button isDisabled color=\"primary\" radius=\"md\">\n        Disabled\n      </Button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(r,{y:4}),`\n`,`\n`,(0,n.jsx)(i,{title:\"Custom layout example\",showEditor:!1,files:u}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"See the \",(0,n.jsx)(e.a,{href:\"/docs/customization/layout#default-layout\",children:\"Layout\"}),\" section for more details about the available tokens.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"customizing-colors\",children:\"Customizing Colors\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Now, Let's say you wish to modify the primary and focus colors of the dark theme. This can\nbe achieved by adding the following code to your `,(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",meta:\"{10-16}\",children:`// tailwind.config.js\nconst {nextui} = require(\"@nextui-org/react\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    nextui({\n      themes: {\n        dark: {\n          colors: {\n            primary: {\n              DEFAULT: \"#BEF264\",\n              foreground: \"#000000\",\n            },\n            focus: \"#BEF264\",\n          },\n        },\n      },\n    }),\n  ],\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This modification will impact all components using the \",(0,n.jsx)(e.code,{children:\"primary\"}),` color. For instance,\nthe `,(0,n.jsx)(e.a,{href:\"/docs/components/button\",children:\"Button\"}),\" component uses the \",(0,n.jsx)(e.code,{children:\"primary\"}),` color as background color when the\nvariant is `,(0,n.jsx)(e.code,{children:\"solid\"}),\" or \",(0,n.jsx)(e.code,{children:\"ghost\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button color=\"primary\" variant=\"solid\">Solid</Button>\n      <Button color=\"primary\" variant=\"ghost\">Ghost</Button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(r,{y:4}),`\n`,`\n`,(0,n.jsx)(i,{title:\"Custom colors example\",showEditor:!1,files:h}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"\\u{1F389} That's it! You have successfully customized the default theme. See the \",(0,n.jsx)(e.a,{href:\"/docs/customization/colors\",children:\"Colors\"}),`\nsection for more details about the available semantic colors and color tokens.`]}),`\n`]})]})}function p(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(m,{...o})}):m(o)}function s(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(E);})();\n;return Component;"
  },
  "_id": "docs/customization/customize-theme.mdx",
  "_raw": {
    "sourceFilePath": "docs/customization/customize-theme.mdx",
    "sourceFileName": "customize-theme.mdx",
    "sourceFileDir": "docs/customization",
    "contentType": "mdx",
    "flattenedPath": "docs/customization/customize-theme"
  },
  "type": "Doc",
  "slug": "/docs/customization/customize-theme",
  "slugAsParams": "customization/customize-theme",
  "url": "/docs/customization/customize-theme"
}