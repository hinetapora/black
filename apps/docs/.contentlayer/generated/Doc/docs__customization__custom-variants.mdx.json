{
  "title": "Custom Variants",
  "description": "Learn how to create new variants for the NextUI components.",
  "body": {
    "raw": "\n# Custom Variants\n\nNextUI allows you to create new variants for components that better suit your project's needs.\nThis can be done by extending the component and its properties, and customizing the styles.\n\n<CarbonAd/>\n\nYou can create or override the component `variants`, `defaultVariants` and `compoundVariants`.\n\n> **Note**: For one-off customizations, refer to the [Override Styles](/docs/customization/override-styles) documentation.\n\n## Creating new variants for non-slots components\n\nThe [Button](/docs/components/button) component is a non-slots component, meaning that it does not\nhave any slots that can be customized.\n\nFor this example, we will be using the `Button` component's styles source code as a\nreference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/button.ts) to view the styles source code.\n\n> **Note**: If you are not familiar with the variants concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/variants) documentation.\n\n<Steps>\n\n### Extend the original component variants\n\nTo create or override variants you need to use the `extendVariants` function. This function\nallows you to create a new component based on the original component, and customize its variants.\n\n```tsx\n// MyButton.tsx\nimport {extendVariants, Button} from \"@nextui-org/react\";\n\nexport const MyButton = extendVariants(Button, {\n  variants: {\n    // <- modify/add variants\n    color: {\n      olive: \"text-[#000] bg-[#84cc16]\",\n      orange: \"bg-[#ff8c00] text-[#fff]\",\n      violet: \"bg-[#8b5cf6] text-[#fff]\",\n    },\n    isDisabled: {\n      true: \"bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed\",\n    },\n    size: {\n      xs: \"px-2 min-w-12 h-6 text-tiny gap-1 rounded-small\",\n      md: \"px-4 min-w-20 h-10 text-small gap-2 rounded-small\",\n      xl: \"px-8 min-w-28 h-14 text-large gap-4 rounded-medium\",\n    },\n  },\n  defaultVariants: { // <- modify/add default variants\n    color: \"olive\",\n    size: \"xl\",\n  },\n  compoundVariants: [ // <- modify/add compound variants\n    {\n      isDisabled: true,\n      color: \"olive\",\n      class: \"bg-[#84cc16]/80 opacity-100\",\n    },\n  ],\n});\n```\n\n### Use your custom component in your application\n\nThen, you can now use your custom component in your application. Here, `MyButton` is\nused with the color set to `olive` and the size set to `xl`.\n\n```tsx\n// App.tsx\nimport {MyButton} from \"./MyButton\";\n\nconst MyApp = () => {\n  return (\n    <MyButton color=\"olive\" size=\"md\">\n      Press Me\n    </MyButton>\n  );\n};\n```\n\nThe new component will include the original props of the `Button` component, plus the new\nvariants that you have created.\n\nimport customVariantsNoSlots from \"@/content/customization/custom-variants/no-slots-component\";\n\n<CodeDemo\n  title=\"Custom Variants for non-slots components\"\n  showEditor={false}\n  files={customVariantsNoSlots}\n/>\n\n</Steps>\n\n## Creating new variants for slots components\n\nIt is also possible to use the `extendVariants` function to add or override variants for\ncomponents that have slots.\n\nThe [Input](/docs/components/input) component is a slots component, meaning that it has slots that can be\ncustomized.\n\nFor this example, we will be using the `Input` component's styles source code as a\nreference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/input.ts) to view the styles source code.\n\n> **Note**: If you are not familiar with the variants/slots concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/slots#slots-with-variants) documentation.\n\n<Steps>\n\n### Extend the original component variants\n\nTo create or override variants you need to use the `extendVariants` function. This function\nallows you to create a new component based on the original component, and customize its variants.\n\n```tsx\n// MyInput.tsx\nimport {extendVariants, Input} from \"@nextui-org/react\";\n\nconst MyInput = extendVariants(Input, {\n  variants: { // <- modify/add variants\n    color: {\n      stone: { // <- add a new color variant\n        inputWrapper: [ // <- Input wrapper slot\n          \"bg-zinc-100\",\n          \"border\",\n          \"shadow\",\n          \"transition-colors\",\n          \"focus-within:bg-zinc-100\",\n          \"data-[hover=true]:border-zinc-600\",\n          \"data-[hover=true]:bg-zinc-100\",\n          \"group-data-[focus=true]:border-zinc-600\",\n          // dark theme\n          \"dark:bg-zinc-900\",\n          \"dark:border-zinc-800\",\n          \"dark:data-[hover=true]:bg-zinc-900\",\n          \"dark:focus-within:bg-zinc-900\",\n        ],\n        input: [  // <- Input element slot\n          \"text-zinc-800\",\n          \"placeholder:text-zinc-600\",\n          // dark theme\n          \"dark:text-zinc-400\",\n          \"dark:placeholder:text-zinc-600\",\n        ],\n      },\n    },\n    size: {\n      xs: {\n        inputWrapper: \"h-6 min-h-6 px-1\",\n        input: \"text-tiny\",\n      },\n      md: {\n        inputWrapper: \"h-10 min-h-10\",\n        input: \"text-small\",\n      },\n      xl: {\n        inputWrapper: \"h-14 min-h-14\",\n        input: \"text-medium\",\n      },\n    },\n    radius: {\n      xs: {\n        inputWrapper: \"rounded\",\n      },\n      sm: {\n        inputWrapper: \"rounded-[4px]\",\n      },\n    },\n    textSize: {\n      base: {\n        input: \"text-base\",\n      },\n    },\n    removeLabel: {\n      true: {\n        label: \"hidden\",\n      },\n      false: {},\n    },\n  },\n  defaultVariants: {\n    color: \"stone\",\n    textSize: \"base\",\n    removeLabel: true,\n  },\n});\n```\n\n### Use your custom component in your application\n\nThen, you can now use your custom component in your application. Here, `MyInput` is\nused with the color set to `slate` and the size set to `xl`.\n\n```tsx\n// App.tsx\nimport {MyInput} from \"./MyInput\";\nimport {SearchIcon} from \"your-icons-library\";\n\nconst MyApp = () => {\n  return (\n    <MyInput\n      isClearable\n      placeholder=\"Search...\"\n      radius=\"md\"\n      size=\"md\"\n      startContent={<SearchIcon className=\"text-zinc-500\" size={16} />}\n    />\n  );\n};\n```\n\nThe new component will include the original props of the [Input](/docs/components/input) component, plus the new\nvariants that you have created.\n\nimport customVariantsSlots from \"@/content/customization/custom-variants/slots-component\";\n\n<CodeDemo\n  title=\"Custom Variants for slots components\"\n  showEditor={false}\n  files={customVariantsSlots}\n/>\n\n</Steps>\n\n<Blockquote>\n  All NextUI components have the `Styles source` link on top of the page. This link will take you to\n  the styles source code of the component. You can use this as a reference when creating your own\n  custom component.\n</Blockquote>\n\n### Types\n\n### Main Function\n\n```jsx\nconst Component = extendVariants(BaseComponent, options, config);\n\n/**\n * BaseComponent -> NextUI component to extend\n * options -> the variants to add/modify\n * config -> config to extend the component\n */\n```\n\n### Options\n\n```ts\ntype ExtendVariantsOptions = {\n  variants?: Record<string, Record<string, ClassValue>>;\n  defaultVariants?: Record<string, ClassValue>;\n  compoundVariants?: Array<Record<string, string> & ClassProp>;\n};\n```\n\n### Config\n\n```ts\n  /**\n   * Whether to merge the class names with `tailwind-merge` library.\n   * It's avoid to have duplicate tailwind classes. (Recommended)\n   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/README.md\n   * @default true\n   */\n  twMerge?: boolean;\n  /**\n   * The config object for `tailwind-merge` library.\n   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md\n   */\n  twMergeConfig?: TWMergeConfig;\n```\n\n> **Note**: See the [Tailwind Merge Config](https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md) to learn more about it.\n",
    "code": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),z=(t,n)=>{for(var o in n)a(t,o,{get:n[o],enumerable:!0})},d=(t,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of b(n))!y.call(t,r)&&r!==o&&a(t,r,{get:()=>n[r],enumerable:!(i=x(n,r))||i.enumerable});return t};var k=(t,n,o)=>(o=t!=null?g(v(t)):{},d(n||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),M=t=>d(a({},\"__esModule\",{value:!0}),t);var p=w((A,l)=>{l.exports=_jsx_runtime});var N={};z(N,{default:()=>f,frontmatter:()=>W});var e=k(p());var I=`import {extendVariants, Button} from \"@nextui-org/react\";\n\nconst MyButton = extendVariants(Button, {\n  variants: {\n    color: { \n      olive: \"text-[#000] bg-[#84cc16]\",\n      orange: \"bg-[#ff8c00] text-[#fff]\",\n      violet: \"bg-[#8b5cf6] text-[#fff]\",\n    },\n    isDisabled: {\n      true: \"bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed\",\n    },\n    size: { \n      xs: \"px-2 min-w-12 h-6 text-tiny gap-1 rounded-small\",\n      md: \"px-4 min-w-20 h-10 text-small gap-2 rounded-small\",\n      xl: \"px-8 min-w-28 h-14 text-large gap-4 rounded-medium\",\n    },\n  },\n  defaultVariants: {\n    color: \"olive\",\n    size: \"xl\",\n  },\n  compoundVariants: [\n    {\n      isDisabled: true,\n      color: \"olive\",\n      class: \"bg-[#84cc16]/80 opacity-100\"\n    }\n  ],\n});\n\nexport default function App() {\n  return (\n    <MyButton color=\"olive\" size=\"md\">\n      Press Me\n    </MyButton>  \n  );\n}`,V={\"/App.jsx\":I},h={...V};var C=`export const SearchIcon = ({\n  size = 24,\n  strokeWidth = 1.5,\n  width,\n  height,\n  ...props\n}) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height={height || size}\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width={width || size}\n    {...props}\n  >\n    <path\n      d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={strokeWidth}\n    />\n    <path\n      d=\"M22 22L20 20\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={strokeWidth}\n    />\n  </svg>\n);`,B=`import {extendVariants, Input} from \"@nextui-org/react\";\nimport {SearchIcon} from \"./SearchIcon\";\n\nconst MyInput = extendVariants(Input, {\n  variants: {\n    color: {\n      stone: {\n        inputWrapper: [\n          \"bg-zinc-100\",\n          \"border\",\n          \"shadow\",\n          \"transition-colors\",\n          \"focus-within:bg-zinc-100\",\n          \"data-[hover=true]:border-zinc-600\",\n          \"data-[hover=true]:bg-zinc-100\",\n          \"group-data-[focus=true]:border-zinc-600\",\n          \"dark:bg-zinc-900\",\n          \"dark:border-zinc-800\",\n          \"dark:data-[hover=true]:bg-zinc-900\",\n          \"dark:focus-within:bg-zinc-900\",\n        ],\n        input: [\n          \"text-zinc-800\",\n          \"placeholder:text-zinc-600\",\n          \"dark:text-zinc-400\",\n          \"dark:placeholder:text-zinc-600\",\n        ],\n      },\n    },\n    size: {\n      xs: {\n        inputWrapper: \"h-6 min-h-6 px-1\",\n        input: \"text-tiny\",\n      },\n      md: {\n        inputWrapper: \"h-10 min-h-10\",\n        input: \"text-small\",\n      },\n      xl: {\n        inputWrapper: \"h-14 min-h-14\",\n        input: \"text-medium\",\n      },\n    },\n    radius: {\n      xs: {\n        inputWrapper: \"rounded\",\n      },\n      sm: {\n        inputWrapper: \"rounded-[4px]\",\n      },\n    },\n    textSize: {\n      base: {\n        input: \"text-base\",\n      },\n    },\n    removeLabel: {\n      true: {\n        label: \"hidden\",\n      },\n      false: {},\n    },\n  },\n  defaultVariants: {\n    color: \"stone\",\n    textSize: \"base\",\n    removeLabel: true,\n  },\n});\n\nexport default function App() {\n  return (\n    <MyInput\n      isClearable\n      placeholder=\"Search...\"\n      radius=\"md\"\n      size=\"md\"\n      startContent={<SearchIcon className=\"text-zinc-500\" size={16} />}\n    />\n  );\n}`,S={\"/App.jsx\":B,\"/SearchIcon.jsx\":C},u={...S};var W={title:\"Custom Variants\",description:\"Learn how to create new variants for the NextUI components.\"};function m(t){let n={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",strong:\"strong\",...t.components},{Blockquote:o,CarbonAd:i,CodeDemo:r,Steps:c}=n;return o||s(\"Blockquote\",!0),i||s(\"CarbonAd\",!0),r||s(\"CodeDemo\",!0),c||s(\"Steps\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{id:\"custom-variants\",children:\"Custom Variants\"}),`\n`,(0,e.jsx)(n.p,{children:`NextUI allows you to create new variants for components that better suit your project's needs.\nThis can be done by extending the component and its properties, and customizing the styles.`}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can create or override the component \",(0,e.jsx)(n.code,{children:\"variants\"}),\", \",(0,e.jsx)(n.code,{children:\"defaultVariants\"}),\" and \",(0,e.jsx)(n.code,{children:\"compoundVariants\"}),\".\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": For one-off customizations, refer to the \",(0,e.jsx)(n.a,{href:\"/docs/customization/override-styles\",children:\"Override Styles\"}),\" documentation.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"creating-new-variants-for-non-slots-components\",children:\"Creating new variants for non-slots components\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.a,{href:\"/docs/components/button\",children:\"Button\"}),` component is a non-slots component, meaning that it does not\nhave any slots that can be customized.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"For this example, we will be using the \",(0,e.jsx)(n.code,{children:\"Button\"}),` component's styles source code as a\nreference. Go `,(0,e.jsx)(n.a,{href:\"https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/button.ts\",children:\"here\"}),\" to view the styles source code.\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": If you are not familiar with the variants concept, please refer to the \",(0,e.jsx)(n.a,{href:\"https://www.tailwind-variants.org/docs/variants\",children:\"Tailwind Variants\"}),\" documentation.\"]}),`\n`]}),`\n`,(0,e.jsxs)(c,{children:[(0,e.jsx)(n.h3,{id:\"extend-the-original-component-variants\",children:\"Extend the original component variants\"}),(0,e.jsxs)(n.p,{children:[\"To create or override variants you need to use the \",(0,e.jsx)(n.code,{children:\"extendVariants\"}),` function. This function\nallows you to create a new component based on the original component, and customize its variants.`]}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`// MyButton.tsx\nimport {extendVariants, Button} from \"@nextui-org/react\";\n\nexport const MyButton = extendVariants(Button, {\n  variants: {\n    // <- modify/add variants\n    color: {\n      olive: \"text-[#000] bg-[#84cc16]\",\n      orange: \"bg-[#ff8c00] text-[#fff]\",\n      violet: \"bg-[#8b5cf6] text-[#fff]\",\n    },\n    isDisabled: {\n      true: \"bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed\",\n    },\n    size: {\n      xs: \"px-2 min-w-12 h-6 text-tiny gap-1 rounded-small\",\n      md: \"px-4 min-w-20 h-10 text-small gap-2 rounded-small\",\n      xl: \"px-8 min-w-28 h-14 text-large gap-4 rounded-medium\",\n    },\n  },\n  defaultVariants: { // <- modify/add default variants\n    color: \"olive\",\n    size: \"xl\",\n  },\n  compoundVariants: [ // <- modify/add compound variants\n    {\n      isDisabled: true,\n      color: \"olive\",\n      class: \"bg-[#84cc16]/80 opacity-100\",\n    },\n  ],\n});\n`})}),(0,e.jsx)(n.h3,{id:\"use-your-custom-component-in-your-application\",children:\"Use your custom component in your application\"}),(0,e.jsxs)(n.p,{children:[\"Then, you can now use your custom component in your application. Here, \",(0,e.jsx)(n.code,{children:\"MyButton\"}),` is\nused with the color set to `,(0,e.jsx)(n.code,{children:\"olive\"}),\" and the size set to \",(0,e.jsx)(n.code,{children:\"xl\"}),\".\"]}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`// App.tsx\nimport {MyButton} from \"./MyButton\";\n\nconst MyApp = () => {\n  return (\n    <MyButton color=\"olive\" size=\"md\">\n      Press Me\n    </MyButton>\n  );\n};\n`})}),(0,e.jsxs)(n.p,{children:[\"The new component will include the original props of the \",(0,e.jsx)(n.code,{children:\"Button\"}),` component, plus the new\nvariants that you have created.`]}),(0,e.jsx)(r,{title:\"Custom Variants for non-slots components\",showEditor:!1,files:h})]}),`\n`,(0,e.jsx)(n.h2,{id:\"creating-new-variants-for-slots-components\",children:\"Creating new variants for slots components\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"It is also possible to use the \",(0,e.jsx)(n.code,{children:\"extendVariants\"}),` function to add or override variants for\ncomponents that have slots.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.a,{href:\"/docs/components/input\",children:\"Input\"}),` component is a slots component, meaning that it has slots that can be\ncustomized.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"For this example, we will be using the \",(0,e.jsx)(n.code,{children:\"Input\"}),` component's styles source code as a\nreference. Go `,(0,e.jsx)(n.a,{href:\"https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/input.ts\",children:\"here\"}),\" to view the styles source code.\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": If you are not familiar with the variants/slots concept, please refer to the \",(0,e.jsx)(n.a,{href:\"https://www.tailwind-variants.org/docs/slots#slots-with-variants\",children:\"Tailwind Variants\"}),\" documentation.\"]}),`\n`]}),`\n`,(0,e.jsxs)(c,{children:[(0,e.jsx)(n.h3,{id:\"extend-the-original-component-variants-1\",children:\"Extend the original component variants\"}),(0,e.jsxs)(n.p,{children:[\"To create or override variants you need to use the \",(0,e.jsx)(n.code,{children:\"extendVariants\"}),` function. This function\nallows you to create a new component based on the original component, and customize its variants.`]}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`// MyInput.tsx\nimport {extendVariants, Input} from \"@nextui-org/react\";\n\nconst MyInput = extendVariants(Input, {\n  variants: { // <- modify/add variants\n    color: {\n      stone: { // <- add a new color variant\n        inputWrapper: [ // <- Input wrapper slot\n          \"bg-zinc-100\",\n          \"border\",\n          \"shadow\",\n          \"transition-colors\",\n          \"focus-within:bg-zinc-100\",\n          \"data-[hover=true]:border-zinc-600\",\n          \"data-[hover=true]:bg-zinc-100\",\n          \"group-data-[focus=true]:border-zinc-600\",\n          // dark theme\n          \"dark:bg-zinc-900\",\n          \"dark:border-zinc-800\",\n          \"dark:data-[hover=true]:bg-zinc-900\",\n          \"dark:focus-within:bg-zinc-900\",\n        ],\n        input: [  // <- Input element slot\n          \"text-zinc-800\",\n          \"placeholder:text-zinc-600\",\n          // dark theme\n          \"dark:text-zinc-400\",\n          \"dark:placeholder:text-zinc-600\",\n        ],\n      },\n    },\n    size: {\n      xs: {\n        inputWrapper: \"h-6 min-h-6 px-1\",\n        input: \"text-tiny\",\n      },\n      md: {\n        inputWrapper: \"h-10 min-h-10\",\n        input: \"text-small\",\n      },\n      xl: {\n        inputWrapper: \"h-14 min-h-14\",\n        input: \"text-medium\",\n      },\n    },\n    radius: {\n      xs: {\n        inputWrapper: \"rounded\",\n      },\n      sm: {\n        inputWrapper: \"rounded-[4px]\",\n      },\n    },\n    textSize: {\n      base: {\n        input: \"text-base\",\n      },\n    },\n    removeLabel: {\n      true: {\n        label: \"hidden\",\n      },\n      false: {},\n    },\n  },\n  defaultVariants: {\n    color: \"stone\",\n    textSize: \"base\",\n    removeLabel: true,\n  },\n});\n`})}),(0,e.jsx)(n.h3,{id:\"use-your-custom-component-in-your-application-1\",children:\"Use your custom component in your application\"}),(0,e.jsxs)(n.p,{children:[\"Then, you can now use your custom component in your application. Here, \",(0,e.jsx)(n.code,{children:\"MyInput\"}),` is\nused with the color set to `,(0,e.jsx)(n.code,{children:\"slate\"}),\" and the size set to \",(0,e.jsx)(n.code,{children:\"xl\"}),\".\"]}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`// App.tsx\nimport {MyInput} from \"./MyInput\";\nimport {SearchIcon} from \"your-icons-library\";\n\nconst MyApp = () => {\n  return (\n    <MyInput\n      isClearable\n      placeholder=\"Search...\"\n      radius=\"md\"\n      size=\"md\"\n      startContent={<SearchIcon className=\"text-zinc-500\" size={16} />}\n    />\n  );\n};\n`})}),(0,e.jsxs)(n.p,{children:[\"The new component will include the original props of the \",(0,e.jsx)(n.a,{href:\"/docs/components/input\",children:\"Input\"}),` component, plus the new\nvariants that you have created.`]}),(0,e.jsx)(r,{title:\"Custom Variants for slots components\",showEditor:!1,files:u})]}),`\n`,(0,e.jsx)(o,{children:(0,e.jsxs)(n.p,{children:[\"All NextUI components have the \",(0,e.jsx)(n.code,{children:\"Styles source\"}),` link on top of the page. This link will take you to\nthe styles source code of the component. You can use this as a reference when creating your own\ncustom component.`]})}),`\n`,(0,e.jsx)(n.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,e.jsx)(n.h3,{id:\"main-function\",children:\"Main Function\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`const Component = extendVariants(BaseComponent, options, config);\n\n/**\n * BaseComponent -> NextUI component to extend\n * options -> the variants to add/modify\n * config -> config to extend the component\n */\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"options\",children:\"Options\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-ts\",children:`type ExtendVariantsOptions = {\n  variants?: Record<string, Record<string, ClassValue>>;\n  defaultVariants?: Record<string, ClassValue>;\n  compoundVariants?: Array<Record<string, string> & ClassProp>;\n};\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"config\",children:\"Config\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-ts\",children:`  /**\n   * Whether to merge the class names with \\`tailwind-merge\\` library.\n   * It's avoid to have duplicate tailwind classes. (Recommended)\n   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/README.md\n   * @default true\n   */\n  twMerge?: boolean;\n  /**\n   * The config object for \\`tailwind-merge\\` library.\n   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md\n   */\n  twMergeConfig?: TWMergeConfig;\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": See the \",(0,e.jsx)(n.a,{href:\"https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md\",children:\"Tailwind Merge Config\"}),\" to learn more about it.\"]}),`\n`]})]})}function f(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(m,{...t})}):m(t)}function s(t,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return M(N);})();\n;return Component;"
  },
  "_id": "docs/customization/custom-variants.mdx",
  "_raw": {
    "sourceFilePath": "docs/customization/custom-variants.mdx",
    "sourceFileName": "custom-variants.mdx",
    "sourceFileDir": "docs/customization",
    "contentType": "mdx",
    "flattenedPath": "docs/customization/custom-variants"
  },
  "type": "Doc",
  "slug": "/docs/customization/custom-variants",
  "slugAsParams": "customization/custom-variants",
  "url": "/docs/customization/custom-variants"
}