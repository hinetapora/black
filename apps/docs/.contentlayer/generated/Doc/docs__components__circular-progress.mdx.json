{
  "title": "Circular Progress",
  "description": "Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.",
  "body": {
    "raw": "\nimport {circularProgressContent} from \"@/content/components/circular-progress\";\n\n# Circular Progress\n\nCircular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\n\n<ComponentLinks component=\"progress\" styles=\"circular-progress\" storybook=\"circularprogress\" reactAriaHook=\"useProgressBar\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add progress\",\n    npm: \"npm install @nextui-org/progress\",\n    yarn: \"yarn add @nextui-org/progress\",\n    pnpm: \"pnpm add @nextui-org/progress\",\n    bun: \"bun add @nextui-org/progress\"\n  }}\n/>\n\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {CircularProgress} from \"@nextui-org/react\";',\n    individual: 'import {CircularProgress} from \"@nextui-org/progress\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={circularProgressContent.usage} />\n\n> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={circularProgressContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={circularProgressContent.colors} />\n\n### With Label\n\n<CodeDemo title=\"With Label\" files={circularProgressContent.label} />\n\n### With Value\n\n<CodeDemo title=\"With Value\" files={circularProgressContent.value} />\n\n### Value Formatting\n\nValues are formatted as a percentage by default, but this can be modified by using the\n`formatOptions` prop to specify a different format. `formatOptions` is compatible with the\noption parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.\n\n<CodeDemo\n  title=\"Value Formatting\"\n  files={circularProgressContent.valueFormatting}\n  highlightedLines=\"10\"\n/>\n\n## Slots\n\n- **base**: The base slot of the circular progress, it is the main container.\n- **svgWrapper**: The wrapper of the svg circles and the value label.\n- **svg**: The svg element of the circles.\n- **track**: The track is the background circle of the circular progress.\n- **indicator**: The indicator is the one that is filled according to the `value`.\n- **value**: The value content.\n- **label**: The label content.\n\n### Custom Styles\n\nYou can customize the `CircularProgress` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo\n  title=\"Custom Styles\"\n  files={circularProgressContent.customStyles}\n  highlightedLines=\"9-12\"\n/>\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`CircularProgress` has the following attributes on the `base` element:\n\n- **data-indeterminate**:\n  Indicates whether the progress is indeterminate.\n- **data-disabled**:\n  Indicates whether the progress is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Exposed to assistive technology as a progress bar via ARIA.\n- Labeling support for accessibility.\n- Internationalized number formatting as a percentage or value.\n- Determinate and indeterminate progress support.\n- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.\n\n<Spacer y={4} />\n\n## API\n\n### Circular Progress Props\n\n| Attribute        | Type                                                                                                                    | Description                                                       | Default              |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | -------------------- |\n| label            | `ReactNode`                                                                                                             | The content to display as the label.                              | -                    |\n| size             | `sm` \\| `md` \\| `lg`                                                                                                    | The size of the indicator.                                        | `md`                 |\n| color            | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                                             | The color of the indicator.                                       | `primary`            |\n| value            | `number`                                                                                                                | The current value (controlled).                                   | -                    |\n| valueLabel       | `ReactNode`                                                                                                             | The content to display as the value's label (e.g. 1 of 4).        | -                    |\n| minValue         | `number`                                                                                                                | The smallest value allowed for the input.                         | `0`                  |\n| maxValue         | `number`                                                                                                                | The largest value allowed for the input.                          | `100`                |\n| formatOptions    | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | The options to format the value.                                  | `{style: 'percent'}` |\n| isIndeterminate  | `boolean`                                                                                                               | Whether the progress is indeterminate.                            | `true`               |\n| showValueLabel   | `boolean`                                                                                                               | Whether to show the value label.                                  | `true`               |\n| strokeWidth      | `number`                                                                                                                | The width of the progress stroke.                                 | `2`                  |\n| isDisabled       | `boolean`                                                                                                               | Whether the progress is disabled.                                 | `false`              |\n| disableAnimation | `boolean`                                                                                                               | Whether to disable the animation.                                 | `false`              |\n| classNames       | `Record<\"base\"｜\"svgWrapper\"｜\"svg\"｜\"track\"｜\"indicator\"｜\"value\"｜\"label\", string>`                                   | Allows to set custom class names for the circular progress slots. | -                    |\n",
    "code": "var Component=(()=>{var A=Object.create;var c=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,z=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),I=(t,e)=>{for(var i in e)c(t,i,{get:e[i],enumerable:!0})},u=(t,e,i,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of k(e))!z.call(t,l)&&l!==i&&c(t,l,{get:()=>e[l],enumerable:!(n=L(e,l))||n.enumerable});return t};var S=(t,e,i)=>(i=t!=null?A(T(t)):{},u(e||!t||!t.__esModule?c(i,\"default\",{value:t,enumerable:!0}):i,t)),N=t=>u(c({},\"__esModule\",{value:!0}),t);var g=j((K,p)=>{p.exports=_jsx_runtime});var H={};I(H,{default:()=>P,frontmatter:()=>X});var r=S(g());var W=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CircularProgress aria-label=\"Loading...\" />\n  );\n}`,F={\"/App.jsx\":W},m={...F};var V=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <CircularProgress size=\"sm\" aria-label=\"Loading...\"/>\n      <CircularProgress size=\"md\" aria-label=\"Loading...\"/>\n      <CircularProgress size=\"lg\" aria-label=\"Loading...\"/>\n    </div> \n  );\n}`,D={\"/App.jsx\":V},b={...D};var _=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <CircularProgress color=\"default\" aria-label=\"Loading...\"/>\n      <CircularProgress color=\"primary\" aria-label=\"Loading...\"/>\n      <CircularProgress color=\"secondary\" aria-label=\"Loading...\"/>\n      <CircularProgress color=\"success\" aria-label=\"Loading...\"/>\n      <CircularProgress color=\"warning\" aria-label=\"Loading...\"/>\n      <CircularProgress color=\"danger\" aria-label=\"Loading...\"/>\n    </div> \n  );\n}`,R={\"/App.jsx\":_},f={...R};var M=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CircularProgress label=\"Loading...\" />\n  );\n}`,O={\"/App.jsx\":M},x={...O};var B=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(0);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((v) => (v >= 100 ? 0 : v + 10));\n    }, 500);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <CircularProgress\n      aria-label=\"Loading...\"\n      size=\"lg\"\n      value={value}\n      color=\"warning\"\n      showValueLabel={true}\n    />\n  );\n}`,E={\"/App.jsx\":B},v={...E};var q=`import {CircularProgress} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <CircularProgress\n      label=\"Speed\"\n      size=\"lg\"\n      value={70}\n      color=\"success\"\n      formatOptions={{ style: \"unit\", unit: \"kilometer\" }}\n      showValueLabel={true}\n    />\n  );\n}`,U={\"/App.jsx\":q},C={...U};var G=`import {CircularProgress, Card, CardBody, CardFooter, Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[240px] h-[240px] border-none bg-gradient-to-br from-violet-500 to-fuchsia-500\">\n      <CardBody className=\"justify-center items-center pb-0\">\n        <CircularProgress\n          classNames={{\n            svg: \"w-36 h-36 drop-shadow-md\",\n            indicator: \"stroke-white\",\n            track: \"stroke-white/10\",\n            value: \"text-3xl font-semibold text-white\",\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n      <CardFooter className=\"justify-center items-center pt-0\">\n        <Chip\n          classNames={{\n            base: \"border-1 border-white/30\",\n            content: \"text-white/90 text-small font-semibold\",\n          }}\n          variant=\"bordered\"\n        >\n          2800 Data points\n        </Chip>\n      </CardFooter>\n    </Card>\n  );\n}`,J={\"/App.jsx\":G},y={...J};var o={usage:m,sizes:b,colors:f,label:x,value:v,valueFormatting:C,customStyles:y};var X={title:\"Circular Progress\",description:\"Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\"};function w(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...t.components},{CarbonAd:i,CodeDemo:n,ComponentLinks:l,ImportTabs:s,PackageManagers:h,Spacer:a}=e;return i||d(\"CarbonAd\",!0),n||d(\"CodeDemo\",!0),l||d(\"ComponentLinks\",!0),s||d(\"ImportTabs\",!0),h||d(\"PackageManagers\",!0),a||d(\"Spacer\",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:\"circular-progress\",children:\"Circular Progress\"}),`\n`,(0,r.jsx)(e.p,{children:\"Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\"}),`\n`,(0,r.jsx)(l,{component:\"progress\",styles:\"circular-progress\",storybook:\"circularprogress\",reactAriaHook:\"useProgressBar\"}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(i,{}),`\n`,(0,r.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,r.jsx)(h,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add progress\",npm:\"npm install @nextui-org/progress\",yarn:\"yarn add @nextui-org/progress\",pnpm:\"pnpm add @nextui-org/progress\",bun:\"bun add @nextui-org/progress\"}}),`\n`,(0,r.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,r.jsx)(s,{commands:{main:'import {CircularProgress} from \"@nextui-org/react\";',individual:'import {CircularProgress} from \"@nextui-org/progress\";'}}),`\n`,(0,r.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,r.jsx)(n,{title:\"Usage\",files:o.usage}),`\n`,(0,r.jsxs)(e.blockquote,{children:[`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:\"Note\"}),\": Make sure to pass the \",(0,r.jsx)(e.code,{children:\"aria-label\"}),\" prop when the \",(0,r.jsx)(e.code,{children:\"label\"}),\" prop is not provided. This is required for accessibility.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,r.jsx)(n,{title:\"Sizes\",files:o.sizes}),`\n`,(0,r.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,r.jsx)(n,{title:\"Colors\",files:o.colors}),`\n`,(0,r.jsx)(e.h3,{id:\"with-label\",children:\"With Label\"}),`\n`,(0,r.jsx)(n,{title:\"With Label\",files:o.label}),`\n`,(0,r.jsx)(e.h3,{id:\"with-value\",children:\"With Value\"}),`\n`,(0,r.jsx)(n,{title:\"With Value\",files:o.value}),`\n`,(0,r.jsx)(e.h3,{id:\"value-formatting\",children:\"Value Formatting\"}),`\n`,(0,r.jsxs)(e.p,{children:[`Values are formatted as a percentage by default, but this can be modified by using the\n`,(0,r.jsx)(e.code,{children:\"formatOptions\"}),\" prop to specify a different format. \",(0,r.jsx)(e.code,{children:\"formatOptions\"}),` is compatible with the\noption parameter of `,(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\",children:\"Intl.NumberFormat\"}),\" and is applied based on the current locale.\"]}),`\n`,(0,r.jsx)(n,{title:\"Value Formatting\",files:o.valueFormatting,highlightedLines:\"10\"}),`\n`,(0,r.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"base\"}),\": The base slot of the circular progress, it is the main container.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"svgWrapper\"}),\": The wrapper of the svg circles and the value label.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"svg\"}),\": The svg element of the circles.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"track\"}),\": The track is the background circle of the circular progress.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"indicator\"}),\": The indicator is the one that is filled according to the \",(0,r.jsx)(e.code,{children:\"value\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"value\"}),\": The value content.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"label\"}),\": The label content.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"You can customize the \",(0,r.jsx)(e.code,{children:\"CircularProgress\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,r.jsx)(n,{title:\"Custom Styles\",files:o.customStyles,highlightedLines:\"9-12\"}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:\"CircularProgress\"}),\" has the following attributes on the \",(0,r.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-indeterminate\"}),`:\nIndicates whether the progress is indeterminate.`]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-disabled\"}),`:\nIndicates whether the progress is disabled. Based on `,(0,r.jsx)(e.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Exposed to assistive technology as a progress bar via ARIA.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Labeling support for accessibility.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Internationalized number formatting as a percentage or value.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Determinate and indeterminate progress support.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Exposes the \",(0,r.jsx)(e.code,{children:\"aria-valuenow\"}),\", \",(0,r.jsx)(e.code,{children:\"aria-valuemin\"}),\", \",(0,r.jsx)(e.code,{children:\"aria-valuemax\"}),\" and \",(0,r.jsx)(e.code,{children:\"aria-valuetext\"}),\" attributes.\"]}),`\n`]}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,r.jsx)(e.h3,{id:\"circular-progress-props\",children:\"Circular Progress Props\"}),`\n`,(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:\"Attribute\"}),(0,r.jsx)(e.th,{children:\"Type\"}),(0,r.jsx)(e.th,{children:\"Description\"}),(0,r.jsx)(e.th,{children:\"Default\"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"label\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"The content to display as the label.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"size\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"sm\"}),\" | \",(0,r.jsx)(e.code,{children:\"md\"}),\" | \",(0,r.jsx)(e.code,{children:\"lg\"})]}),(0,r.jsx)(e.td,{children:\"The size of the indicator.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"md\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"color\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"default\"}),\" | \",(0,r.jsx)(e.code,{children:\"primary\"}),\" | \",(0,r.jsx)(e.code,{children:\"secondary\"}),\" | \",(0,r.jsx)(e.code,{children:\"success\"}),\" | \",(0,r.jsx)(e.code,{children:\"warning\"}),\" | \",(0,r.jsx)(e.code,{children:\"danger\"})]}),(0,r.jsx)(e.td,{children:\"The color of the indicator.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"primary\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"value\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:\"The current value (controlled).\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"valueLabel\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"The content to display as the value's label (e.g. 1 of 4).\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"minValue\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:\"The smallest value allowed for the input.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"0\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"maxValue\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:\"The largest value allowed for the input.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"100\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"formatOptions\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\",children:\"Intl.NumberFormat\"})}),(0,r.jsx)(e.td,{children:\"The options to format the value.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"{style: 'percent'}\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isIndeterminate\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the progress is indeterminate.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"true\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"showValueLabel\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether to show the value label.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"true\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"strokeWidth\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:\"The width of the progress stroke.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"2\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isDisabled\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the progress is disabled.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"disableAnimation\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether to disable the animation.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"classNames\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:'Record<\"base\"\\uFF5C\"svgWrapper\"\\uFF5C\"svg\"\\uFF5C\"track\"\\uFF5C\"indicator\"\\uFF5C\"value\"\\uFF5C\"label\", string>'})}),(0,r.jsx)(e.td,{children:\"Allows to set custom class names for the circular progress slots.\"}),(0,r.jsx)(e.td,{children:\"-\"})]})]})]})]})}function P(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(w,{...t})}):w(t)}function d(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return N(H);})();\n;return Component;"
  },
  "_id": "docs/components/circular-progress.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/circular-progress.mdx",
    "sourceFileName": "circular-progress.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/circular-progress"
  },
  "type": "Doc",
  "slug": "/docs/components/circular-progress",
  "slugAsParams": "components/circular-progress",
  "url": "/docs/components/circular-progress"
}