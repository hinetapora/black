{
  "title": "Radio",
  "description": "Radio Group allow users to select a single option from a list of mutually exclusive options",
  "body": {
    "raw": "\nimport {radioGroupContent} from \"@/content/components/radio-group\";\n\n# Radio group\n\nRadio Group allow users to select a single option from a list of mutually exclusive options.\n\n<ComponentLinks component=\"radiogroup\" reactAriaHook=\"useRadioGroup\" npm=\"radio\" styles=\"radio\" source=\"radio\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add radio\",\n    npm: \"npm install @nextui-org/radio\",\n    yarn: \"yarn add @nextui-org/radio\",\n    pnpm: \"pnpm add @nextui-org/radio\",\n    bun: \"bun add @nextui-org/radio\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {RadioGroup, Radio} from \"@nextui-org/react\";',\n    individual: 'import {RadioGroup, Radio} from \"@nextui-org/radio\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={radioGroupContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={radioGroupContent.disabled} />\n\n### Default Value\n\n<CodeDemo title=\"Default Value\" files={radioGroupContent.defaultValue} />\n\n### With Description\n\n<CodeDemo title=\"With Description\" files={radioGroupContent.withDescription} />\n\n### Horizontal\n\n<CodeDemo title=\"Horizontal\" files={radioGroupContent.horizontal} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the radio input value.\n\n<CodeDemo title=\"Controlled\" files={radioGroupContent.controlled} />\n\n> **Note**: NextUI `Radio` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n### Invalid\n\n<CodeDemo title=\"Invalid\" files={radioGroupContent.invalid} />\n\n## Slots\n\n- RadioGroup Slots\n\n  - **base**: Radio group root wrapper, it wraps the label and the wrapper.\n  - **wrapper**: Radio group wrapper, it wraps all Radios.\n  - **label**: Radio group label, it is placed before the wrapper.\n  - **description**: Description slot for the radio group.\n  - **errorMessage**: Error message slot for the radio group.\n\n- Radio Slots\n  - **base**: Radio root wrapper, it wraps all elements.\n  - **wrapper**: Radio wrapper, it wraps the control element.\n  - **labelWrapper**: Label and description wrapper.\n  - **label**: Label slot for the radio.\n  - **control**: Control element, it is the circle element.\n  - **description**: Description slot for the radio.\n\n### Custom Styles\n\nYou can customize the `RadioGroup` and `Radio` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={radioGroupContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the radio group even further, you can use the `useRadio` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={radioGroupContent.customImpl} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n- RadioGroup has the following attributes on the `base` element:\n\n  - **data-orientation**:\n    The orientation of the radio group. Based on `orientation` prop.\n\n- Radio has the following attributes on the `base` element:\n\n  - **data-selected**:\n    When the radio is checked. Based on `isSelected` prop.\n  - **data-pressed**:\n    When the radio is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).\n  - **data-invalid**:\n    When the radio is invalid. Based on `validationState` prop.\n  - **data-readonly**:\n    When the radio is readonly. Based on `isReadOnly` prop.\n  - **data-hover-unselected**:\n    When the radio is being hovered and unchecked. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n  - **data-hover**:\n    When the radio is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n  - **data-focus**:\n    When the radio is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n  - **data-focus-visible**:\n    When the radio is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n  - **data-disabled**:\n    When the radio is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Radio groups are exposed to assistive technology via ARIA.\n- Each radio is built with a native HTML `<input>` element, which can be optionally visually hidden to allow custom styling.\n- Full support for browser features like form autofill.\n- Keyboard event support for arrows keys.\n- Keyboard focus management and cross browser normalization.\n- Group and radio labeling support for assistive technology.\n\n<Spacer y={4} />\n\n## API\n\n### RadioGroup Props\n\n| Attribute          | Type                                                                        | Description                                                                                                                                                                                                             | Default    |\n| ------------------ | --------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| children           | `ReactNode` \\| `ReactNode[]`                                                | The list of radio elements.                                                                                                                                                                                             | -          |\n| label              | `ReactNode`                                                                 | The label of the radio group.                                                                                                                                                                                           | -          |\n| size               | `sm` \\| `md` \\| `lg`                                                        | The size of the radios.                                                                                                                                                                                                 | `md`       |\n| color              | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the radios.                                                                                                                                                                                                | `primary`  |\n| orientation        | `horizontal` \\| `vertical`                                                  | The orientation of the radio group.                                                                                                                                                                                     | `vertical` |\n| name               | `string`                                                                    | The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).                                                       | -          |\n| value              | `string[]`                                                                  | The current selected value. (controlled).                                                                                                                                                                               | -          |\n| defaultValue       | `string[]`                                                                  | The default selected value. (uncontrolled).                                                                                                                                                                             | -          |\n| description        | `ReactNode`                                                                 | Radio group description .                                                                                                                                                                                               | -          |\n| errorMessage       | `ReactNode` \\| `((v: ValidationResult) => ReactNode)`                       | Radio group error message.                                                                                                                                                                                              | -          |\n| validate           | `(value: string) => ValidationError ｜ true ｜ null ｜ undefined`            | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -          |\n| validationBehavior | `native` \\| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |\n| isDisabled         | `boolean`                                                                   | Whether the radio group is disabled.                                                                                                                                                                                    | `false`    |\n| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                                                                               | `false`    |\n| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                                                                                     | -          |\n| isInvalid          | `boolean`                                                                   | Whether the radio group is invalid.                                                                                                                                                                                     | `false`    |\n| validationState    | `valid` \\| `invalid`                                                        | Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead.                                                                                                  | `false`    |\n| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                                                                               | `false`    |\n| classNames         | `Record<\"base\"｜ \"wrapper\"｜ \"label\", string>`                              | Allows to set custom class names for the radio group slots.                                                                                                                                                             | -          |\n\n### RadioGroup Events\n\n| Attribute     | Type                                  | Description                                                                                                                         |\n| ------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |\n| onValueChange | `((value: string) => void)`           | Handler that is called when the value changes.                                                                                      |\n\n### Radio Props\n\n| Attribute        | Type                                                                                           | Description                                                                                    | Default   |\n| ---------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | --------- |\n| children         | `ReactNode`                                                                                    | The label of the radio.                                                                        | -         |\n| label            | `ReactNode`                                                                                    | The label of the radio.                                                                        | -         |\n| size             | `sm` \\| `md` \\| `lg`                                                                           | The size of the radio.                                                                         | `md`      |\n| color            | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                    | The color of the radio.                                                                        | `primary` |\n| description      | `ReactNode`                                                                                    | A description for the field. Provides a hint such as specific requirements for what to choose. | -         |\n| isDisabled       | `boolean`                                                                                      | Whether the radio is disabled.                                                                 | `false`   |\n| isRequired       | `boolean`                                                                                      | Whether user checkboxes are required on the input before form submission.                      | `false`   |\n| isReadOnly       | `boolean`                                                                                      | Whether the checkboxes can be selected but not changed by the user.                            | -         |\n| isInvalid        | `boolean`                                                                                      | Whether the radio is invalid. This is based on the radio group `validationState` prop.        | `false`   |\n| disableAnimation | `boolean`                                                                                      | Whether the animation should be disabled.                                                      | `false`   |\n| classNames       | `Record<\"base\"｜ \"wrapper\"｜ \"labelWrapper\" ｜ \"label\" ｜ \"control\" ｜ \"description\", string>` | Allows to set custom class names for the radio slots.                                          | -         |\n",
    "code": "var Component=(()=>{var G=Object.create;var c=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var I=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),D=(i,e)=>{for(var d in e)c(i,d,{get:e[d],enumerable:!0})},p=(i,e,d,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of k(e))!W.call(i,t)&&t!==d&&c(i,t,{get:()=>e[t],enumerable:!(o=P(e,t))||o.enumerable});return i};var L=(i,e,d)=>(d=i!=null?G(T(i)):{},p(e||!i||!i.__esModule?c(d,\"default\",{value:i,enumerable:!0}):d,i)),B=i=>p(c({},\"__esModule\",{value:!0}),i);var m=I((de,u)=>{u.exports=_jsx_runtime});var ie={};D(ie,{default:()=>S,frontmatter:()=>re});var r=L(m());var N=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup\n      label=\"Select your favorite city\"\n    >\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}`,H={\"/App.jsx\":N},f={...H};var V=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup\n      label=\"Select your favorite city\"\n      isDisabled\n    >\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}`,F={\"/App.jsx\":V},R={...F};var j=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup\n      label=\"Select your favorite city\"\n      orientation=\"horizontal\"\n    >\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}`,z={\"/App.jsx\":j},g={...z};var M=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState(\"london\");\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <RadioGroup\n        label=\"Select your favorite city\"\n        value={selected}\n        onValueChange={setSelected}\n      >\n        <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n        <Radio value=\"sydney\">Sydney</Radio>\n        <Radio value=\"san-francisco\">San Francisco</Radio>\n        <Radio value=\"london\">London</Radio>\n        <Radio value=\"tokyo\">Tokyo</Radio>\n      </RadioGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected}</p>\n    </div>\n  );\n}`,E={\"/App.jsx\":M},b={...E};var _=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup\n      label=\"Select your favorite city\"\n      color=\"secondary\"\n      defaultValue=\"london\"\n    >\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}`,U={\"/App.jsx\":_},v={...U};var q=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup\n      label=\"Select your favorite city\"\n      color=\"warning\"\n    >\n      <Radio value=\"buenos-aires\" description=\"The capital of Argentina\">\n        Buenos Aires\n      </Radio>\n      <Radio value=\"canberra\" description=\"The capital of Australia\">\n        Canberra\n      </Radio>\n      <Radio value=\"london\" description=\"The capital of England\">\n        London\n      </Radio>\n      <Radio value=\"tokyo\" description=\"The capital of Japan\">\n        Tokyo\n      </Radio>\n    </RadioGroup>\n  );\n}`,O={\"/App.jsx\":q},y={...O};var Y=`import {RadioGroup, Radio, cn} from \"@nextui-org/react\";\n\nexport const CustomRadio = (props) => {\n  const {children, ...otherProps} = props;\n\n  return (\n    <Radio\n      {...otherProps}\n      classNames={{\n        base: cn(\n          \"inline-flex m-0 bg-content1 hover:bg-content2 items-center justify-between\",\n          \"flex-row-reverse max-w-[300px] cursor-pointer rounded-lg gap-4 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\"\n        ),\n      }}\n    >\n      {children}\n    </Radio>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Plans\" description=\"Selected plan can be changed at any time.\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio\n        description=\"24/7 support. Contact us for pricing.\"\n        value=\"enterprise\"\n      >\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}`,$={\"/App.jsx\":Y},x={...$};var K=`import {RadioGroup, Radio, useRadio, VisuallyHidden, cn} from \"@nextui-org/react\";\n\nexport const CustomRadio = (props) => {\n  const {\n    Component,\n    children,\n    isSelected,\n    description,\n    getBaseProps,\n    getWrapperProps,\n    getInputProps,\n    getLabelProps,\n    getLabelWrapperProps,\n    getControlProps,\n  } = useRadio(props);\n\n  return (\n    <Component\n      {...getBaseProps()}\n      className={cn(\n        \"group inline-flex items-center hover:opacity-70 active:opacity-50 justify-between flex-row-reverse tap-highlight-transparent\",\n        \"max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4\",\n        \"data-[selected=true]:border-primary\",\n      )}\n    >\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <span {...getWrapperProps()}>\n        <span {...getControlProps()} />\n      </span>\n      <div {...getLabelWrapperProps()}>\n        {children && <span {...getLabelProps()}>{children}</span>}\n        {description && (\n          <span className=\"text-small text-foreground opacity-70\">{description}</span>\n        )}\n      </div>\n    </Component>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Plans\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio\n        description=\"24/7 support. Contact us for pricing.\"\n        value=\"enterprise\"\n      >\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}`,X=`import {RadioGroup, Radio, useRadio, VisuallyHidden, RadioProps, cn} from \"@nextui-org/react\";\n\nexport const CustomRadio = (props: RadioProps) => {\n  const {\n    Component,\n    children,\n    isSelected,\n    description,\n    getBaseProps,\n    getWrapperProps,\n    getInputProps,\n    getLabelProps,\n    getLabelWrapperProps,\n    getControlProps,\n  } = useRadio(props);\n\n  return (\n    <Component\n      {...getBaseProps()}\n      className={cn(\n        \"group inline-flex items-center justify-between hover:bg-content2 flex-row-reverse\",\n        \"max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4\",\n        \"data-[selected=true]:border-primary\",\n      )}\n    >\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <span {...getWrapperProps()}>\n        <span {...getControlProps()} />\n      </span>\n      <div {...getLabelWrapperProps()}>\n        {children && <span {...getLabelProps()}>{children}</span>}\n        {description && (\n          <span className=\"text-small text-foreground opacity-70\">{description}</span>\n        )}\n      </div>\n    </Component>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Plans\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio\n        description=\"24/7 support. Contact us for pricing.\"\n        value=\"enterprise\"\n      >\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}`,J={\"/App.jsx\":K},Q={\"/App.tsx\":X},C={...J,...Q};var Z=`import {RadioGroup, Radio} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState(\"london\");\n\n  const validOptions = [\"buenos-aires\", \"san-francisco\", \"tokyo\"];\n\n  const isInvalid = !validOptions.includes(selected);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <RadioGroup\n        label=\"Select your favorite city\"\n        value={selected}\n        isInvalid={isInvalid}\n        onValueChange={setSelected}\n      >\n        <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n        <Radio value=\"sydney\">Sydney</Radio>\n        <Radio value=\"san-francisco\">San Francisco</Radio>\n        <Radio value=\"london\">London</Radio>\n        <Radio value=\"tokyo\">Tokyo</Radio>\n      </RadioGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected}</p>\n    </div>\n  );\n}`,ee={\"/App.jsx\":Z},A={...ee};var n={usage:f,disabled:R,horizontal:g,controlled:b,invalid:A,defaultValue:v,withDescription:y,customStyles:x,customImpl:C};var re={title:\"Radio\",description:\"Radio Group allow users to select a single option from a list of mutually exclusive options\"};function w(i){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...i.components},{CarbonAd:d,CodeDemo:o,ComponentLinks:t,ImportTabs:s,PackageManagers:h,Spacer:a}=e;return d||l(\"CarbonAd\",!0),o||l(\"CodeDemo\",!0),t||l(\"ComponentLinks\",!0),s||l(\"ImportTabs\",!0),h||l(\"PackageManagers\",!0),a||l(\"Spacer\",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:\"radio-group\",children:\"Radio group\"}),`\n`,(0,r.jsx)(e.p,{children:\"Radio Group allow users to select a single option from a list of mutually exclusive options.\"}),`\n`,(0,r.jsx)(t,{component:\"radiogroup\",reactAriaHook:\"useRadioGroup\",npm:\"radio\",styles:\"radio\",source:\"radio\"}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(d,{}),`\n`,(0,r.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,r.jsx)(h,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add radio\",npm:\"npm install @nextui-org/radio\",yarn:\"yarn add @nextui-org/radio\",pnpm:\"pnpm add @nextui-org/radio\",bun:\"bun add @nextui-org/radio\"}}),`\n`,(0,r.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,r.jsx)(s,{commands:{main:'import {RadioGroup, Radio} from \"@nextui-org/react\";',individual:'import {RadioGroup, Radio} from \"@nextui-org/radio\";'}}),`\n`,(0,r.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,r.jsx)(o,{title:\"Usage\",files:n.usage}),`\n`,(0,r.jsx)(e.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,r.jsx)(o,{title:\"Disabled\",files:n.disabled}),`\n`,(0,r.jsx)(e.h3,{id:\"default-value\",children:\"Default Value\"}),`\n`,(0,r.jsx)(o,{title:\"Default Value\",files:n.defaultValue}),`\n`,(0,r.jsx)(e.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,r.jsx)(o,{title:\"With Description\",files:n.withDescription}),`\n`,(0,r.jsx)(e.h3,{id:\"horizontal\",children:\"Horizontal\"}),`\n`,(0,r.jsx)(o,{title:\"Horizontal\",files:n.horizontal}),`\n`,(0,r.jsx)(e.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"You can use the \",(0,r.jsx)(e.code,{children:\"value\"}),\" and \",(0,r.jsx)(e.code,{children:\"onValueChange\"}),\" properties to control the radio input value.\"]}),`\n`,(0,r.jsx)(o,{title:\"Controlled\",files:n.controlled}),`\n`,(0,r.jsxs)(e.blockquote,{children:[`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:\"Note\"}),\": NextUI \",(0,r.jsx)(e.code,{children:\"Radio\"}),\" also supports native events like \",(0,r.jsx)(e.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,r.jsx)(e.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,r.jsx)(e.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"invalid\",children:\"Invalid\"}),`\n`,(0,r.jsx)(o,{title:\"Invalid\",files:n.invalid}),`\n`,(0,r.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[`\n`,(0,r.jsx)(e.p,{children:\"RadioGroup Slots\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"base\"}),\": Radio group root wrapper, it wraps the label and the wrapper.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"wrapper\"}),\": Radio group wrapper, it wraps all Radios.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"label\"}),\": Radio group label, it is placed before the wrapper.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"description\"}),\": Description slot for the radio group.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"errorMessage\"}),\": Error message slot for the radio group.\"]}),`\n`]}),`\n`]}),`\n`,(0,r.jsxs)(e.li,{children:[`\n`,(0,r.jsx)(e.p,{children:\"Radio Slots\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"base\"}),\": Radio root wrapper, it wraps all elements.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"wrapper\"}),\": Radio wrapper, it wraps the control element.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"labelWrapper\"}),\": Label and description wrapper.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"label\"}),\": Label slot for the radio.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"control\"}),\": Control element, it is the circle element.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"description\"}),\": Description slot for the radio.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"You can customize the \",(0,r.jsx)(e.code,{children:\"RadioGroup\"}),\" and \",(0,r.jsx)(e.code,{children:\"Radio\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,r.jsx)(o,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,r.jsx)(e.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"In case you need to customize the radio group even further, you can use the \",(0,r.jsx)(e.code,{children:\"useRadio\"}),\" hook to create your own implementation.\"]}),`\n`,(0,r.jsx)(o,{title:\"Custom Implementation\",files:n.customImpl}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[`\n`,(0,r.jsxs)(e.p,{children:[\"RadioGroup has the following attributes on the \",(0,r.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-orientation\"}),`:\nThe orientation of the radio group. Based on `,(0,r.jsx)(e.code,{children:\"orientation\"}),\" prop.\"]}),`\n`]}),`\n`]}),`\n`,(0,r.jsxs)(e.li,{children:[`\n`,(0,r.jsxs)(e.p,{children:[\"Radio has the following attributes on the \",(0,r.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-selected\"}),`:\nWhen the radio is checked. Based on `,(0,r.jsx)(e.code,{children:\"isSelected\"}),\" prop.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-pressed\"}),`:\nWhen the radio is pressed. Based on `,(0,r.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-invalid\"}),`:\nWhen the radio is invalid. Based on `,(0,r.jsx)(e.code,{children:\"validationState\"}),\" prop.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-readonly\"}),`:\nWhen the radio is readonly. Based on `,(0,r.jsx)(e.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-hover-unselected\"}),`:\nWhen the radio is being hovered and unchecked. Based on `,(0,r.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-hover\"}),`:\nWhen the radio is being hovered. Based on `,(0,r.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-focus\"}),`:\nWhen the radio is being focused. Based on `,(0,r.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-focus-visible\"}),`:\nWhen the radio is being focused with the keyboard. Based on `,(0,r.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-disabled\"}),`:\nWhen the radio is disabled. Based on `,(0,r.jsx)(e.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Radio groups are exposed to assistive technology via ARIA.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Each radio is built with a native HTML \",(0,r.jsx)(e.code,{children:\"<input>\"}),\" element, which can be optionally visually hidden to allow custom styling.\"]}),`\n`,(0,r.jsx)(e.li,{children:\"Full support for browser features like form autofill.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Keyboard event support for arrows keys.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Group and radio labeling support for assistive technology.\"}),`\n`]}),`\n`,(0,r.jsx)(a,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,r.jsx)(e.h3,{id:\"radiogroup-props\",children:\"RadioGroup Props\"}),`\n`,(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:\"Attribute\"}),(0,r.jsx)(e.th,{children:\"Type\"}),(0,r.jsx)(e.th,{children:\"Description\"}),(0,r.jsx)(e.th,{children:\"Default\"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"children\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"ReactNode\"}),\" | \",(0,r.jsx)(e.code,{children:\"ReactNode[]\"})]}),(0,r.jsx)(e.td,{children:\"The list of radio elements.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"label\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"The label of the radio group.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"size\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"sm\"}),\" | \",(0,r.jsx)(e.code,{children:\"md\"}),\" | \",(0,r.jsx)(e.code,{children:\"lg\"})]}),(0,r.jsx)(e.td,{children:\"The size of the radios.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"md\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"color\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"default\"}),\" | \",(0,r.jsx)(e.code,{children:\"primary\"}),\" | \",(0,r.jsx)(e.code,{children:\"secondary\"}),\" | \",(0,r.jsx)(e.code,{children:\"success\"}),\" | \",(0,r.jsx)(e.code,{children:\"warning\"}),\" | \",(0,r.jsx)(e.code,{children:\"danger\"})]}),(0,r.jsx)(e.td,{children:\"The color of the radios.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"primary\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"orientation\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"horizontal\"}),\" | \",(0,r.jsx)(e.code,{children:\"vertical\"})]}),(0,r.jsx)(e.td,{children:\"The orientation of the radio group.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"vertical\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"name\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"string\"})}),(0,r.jsxs)(e.td,{children:[\"The name of the RadioGroup, used when submitting an HTML form. See \",(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons\",children:\"MDN\"}),\".\"]}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"value\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"string[]\"})}),(0,r.jsx)(e.td,{children:\"The current selected value. (controlled).\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"defaultValue\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"string[]\"})}),(0,r.jsx)(e.td,{children:\"The default selected value. (uncontrolled).\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"description\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"Radio group description .\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"errorMessage\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"ReactNode\"}),\" | \",(0,r.jsx)(e.code,{children:\"((v: ValidationResult) => ReactNode)\"})]}),(0,r.jsx)(e.td,{children:\"Radio group error message.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"validate\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"(value: string) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,r.jsxs)(e.td,{children:[\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if \",(0,r.jsx)(e.code,{children:\"validationBehavior\"}),\" is set to \",(0,r.jsx)(e.code,{children:\"native\"}),\". For real-time validation, use the \",(0,r.jsx)(e.code,{children:\"isInvalid\"}),\" prop.\"]}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"validationBehavior\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"native\"}),\" | \",(0,r.jsx)(e.code,{children:\"aria\"})]}),(0,r.jsx)(e.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"aria\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isDisabled\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the radio group is disabled.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isRequired\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether user checkboxes are required on the input before form submission.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isReadOnly\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the checkboxes can be selected but not changed by the user.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isInvalid\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the radio group is invalid.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"validationState\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"valid\"}),\" | \",(0,r.jsx)(e.code,{children:\"invalid\"})]}),(0,r.jsxs)(e.td,{children:['Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (',(0,r.jsx)(e.strong,{children:\"Deprecated\"}),\") use \",(0,r.jsx)(e.strong,{children:\"isInvalid\"}),\" instead.\"]}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"disableAnimation\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the animation should be disabled.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"classNames\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:'Record<\"base\"\\uFF5C \"wrapper\"\\uFF5C \"label\", string>'})}),(0,r.jsx)(e.td,{children:\"Allows to set custom class names for the radio group slots.\"}),(0,r.jsx)(e.td,{children:\"-\"})]})]})]}),`\n`,(0,r.jsx)(e.h3,{id:\"radiogroup-events\",children:\"RadioGroup Events\"}),`\n`,(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:\"Attribute\"}),(0,r.jsx)(e.th,{children:\"Type\"}),(0,r.jsx)(e.th,{children:\"Description\"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"onChange\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"React.ChangeEvent<HTMLInputElement>\"})}),(0,r.jsxs)(e.td,{children:[\"Handler that is called when the element's value changes. You can pull out the new value by accessing \",(0,r.jsx)(e.code,{children:\"event.target.value\"}),\" (string).\"]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"onValueChange\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"((value: string) => void)\"})}),(0,r.jsx)(e.td,{children:\"Handler that is called when the value changes.\"})]})]})]}),`\n`,(0,r.jsx)(e.h3,{id:\"radio-props\",children:\"Radio Props\"}),`\n`,(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:\"Attribute\"}),(0,r.jsx)(e.th,{children:\"Type\"}),(0,r.jsx)(e.th,{children:\"Description\"}),(0,r.jsx)(e.th,{children:\"Default\"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"children\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"The label of the radio.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"label\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"The label of the radio.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"size\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"sm\"}),\" | \",(0,r.jsx)(e.code,{children:\"md\"}),\" | \",(0,r.jsx)(e.code,{children:\"lg\"})]}),(0,r.jsx)(e.td,{children:\"The size of the radio.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"md\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"color\"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:\"default\"}),\" | \",(0,r.jsx)(e.code,{children:\"primary\"}),\" | \",(0,r.jsx)(e.code,{children:\"secondary\"}),\" | \",(0,r.jsx)(e.code,{children:\"success\"}),\" | \",(0,r.jsx)(e.code,{children:\"warning\"}),\" | \",(0,r.jsx)(e.code,{children:\"danger\"})]}),(0,r.jsx)(e.td,{children:\"The color of the radio.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"primary\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"description\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"ReactNode\"})}),(0,r.jsx)(e.td,{children:\"A description for the field. Provides a hint such as specific requirements for what to choose.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isDisabled\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the radio is disabled.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isRequired\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether user checkboxes are required on the input before form submission.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isReadOnly\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the checkboxes can be selected but not changed by the user.\"}),(0,r.jsx)(e.td,{children:\"-\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"isInvalid\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsxs)(e.td,{children:[\"Whether the radio is invalid. This is based on the radio group \",(0,r.jsx)(e.code,{children:\"validationState\"}),\" prop.\"]}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"disableAnimation\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:\"Whether the animation should be disabled.\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"false\"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:\"classNames\"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:'Record<\"base\"\\uFF5C \"wrapper\"\\uFF5C \"labelWrapper\" \\uFF5C \"label\" \\uFF5C \"control\" \\uFF5C \"description\", string>'})}),(0,r.jsx)(e.td,{children:\"Allows to set custom class names for the radio slots.\"}),(0,r.jsx)(e.td,{children:\"-\"})]})]})]})]})}function S(i={}){let{wrapper:e}=i.components||{};return e?(0,r.jsx)(e,{...i,children:(0,r.jsx)(w,{...i})}):w(i)}function l(i,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return B(ie);})();\n;return Component;"
  },
  "_id": "docs/components/radio-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/radio-group.mdx",
    "sourceFileName": "radio-group.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/radio-group"
  },
  "type": "Doc",
  "slug": "/docs/components/radio-group",
  "slugAsParams": "components/radio-group",
  "url": "/docs/components/radio-group"
}