{
  "title": "Checkbox",
  "description": "Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.",
  "body": {
    "raw": "\nimport {checkboxContent} from \"@/content/components/checkbox\";\n\n# Checkbox\n\nCheckboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\n\n<ComponentLinks component=\"checkbox\" reactAriaHook=\"useCheckbox\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add checkbox\",\n    npm: \"npm install @nextui-org/checkbox\",\n    yarn: \"yarn add @nextui-org/checkbox\",\n    pnpm: \"pnpm add @nextui-org/checkbox\",\n    bun: \"bun add @nextui-org/checkbox\"\n  }}\n/>\n\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Checkbox} from \"@nextui-org/react\";',\n    individual: 'import {Checkbox} from \"@nextui-org/checkbox\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={checkboxContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={checkboxContent.disabled} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={checkboxContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={checkboxContent.colors} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={checkboxContent.radius} />\n\n### Indeterminate\n\nThe `isIndeterminate` prop sets a `Checkbox` to an indeterminate state, overriding its appearance and maintaining it until set to `false`, regardless of user interaction.\n\n<CodeDemo title=\"Indeterminate\" files={checkboxContent.indeterminate} />\n\n### Line Through\n\n<CodeDemo title=\"Line Through\" files={checkboxContent.lineThrough} />\n\n### Custom Check Icon\n\n> By default, `IconProps` will be passed to your icon component.  Please make sure that `isSelected`, `isIndeterminate`, and `disableAnimation` are not passed to a DOM element.\n\n<CodeDemo title=\"Custom Check Icon\" files={checkboxContent.customCheckIcon} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled Checkbox\" files={checkboxContent.controlled} />\n\n> **Note**: NextUI `Checkbox` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## Slots\n\n- **base**: Checkbox wrapper, it handles alignment, placement, and general appearance.\n- **wrapper**: An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.\n- **icon**: Icon within the checkbox, controlling size, visibility, and changes when checked.\n- **label**: The text associated with the checkbox.\n\n### Custom Styles\n\nYou can customize the `Checkbox` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={checkboxContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the checkbox even further, you can use the `useCheckbox` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={checkboxContent.customImplementation} />\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Checkbox` has the following attributes on the `base` element:\n\n- **data-selected**:\n  When the checkbox is checked. Based on `isSelected` prop.\n- **data-pressed**:\n  When the checkbox is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n- **data-invalid**:\n  When the checkbox is invalid. Based on `validationState` prop.\n- **data-readonly**:\n  When the checkbox is readonly. Based on `isReadOnly` prop.\n- **data-indeterminate**:\n  When the checkbox is indeterminate. Based on `isIndeterminate` prop.\n- **data-hover**:\n  When the checkbox is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus**:\n  When the checkbox is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the checkbox is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-disabled**:\n  When the checkbox is disabled. Based on `isDisabled` prop.\n- **data-loading**:\n  When the checkbox is loading. Based on `isLoading` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native HTML `<input>` element.\n- Full support for browser features like form autofill.\n- Keyboard focus management and cross browser normalization.\n- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.\n- Labeling support for assistive technology.\n- Indeterminate state support.\n\n<Spacer y={4} />\n\n## API\n\n### Checkbox Props\n\n| Attribute        | Type                                                                        | Description                                                                                                           | Default   |\n| ---------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |\n| children         | `ReactNode`                                                                 | The label of the checkbox.                                                                                            | -         |\n| icon             | [CheckboxIconProps](#checkbox-icon-props)                                   | The icon to be displayed when the checkbox is checked.                                                                | -         |\n| value            | `string`                                                                    | The value of the checkbox element, used when submitting an HTML form.                                                    |           |\n| name             | `string`                                                                    | The name of the checkbox element, used when submitting an HTML form.                                                     |           |\n| size             | `sm` \\| `md` \\| `lg`                                                        | The size of the checkbox.                                                                                             | `md`      |\n| color            | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The color of the checkbox.                                                                                            | `primary` |\n| radius           | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                    | The radius of the checkbox.                                                                                           | -         |\n| lineThrough      | `boolean`                                                                   | Whether the label should be crossed out.                                                                              | `false`   |\n| isSelected       | `boolean`                                                                   | Whether the element should be selected (controlled).                                                                  |           |\n| defaultSelected  | `boolean`                                                                   | Whether the element should be selected (uncontrolled).                                                                |           |\n| isRequired       | `boolean`                                                                   | Whether user checkbox is required on the checkbox before form submission.                                                   | `false`   |\n| isReadOnly       | `boolean`                                                                   | Whether the checkbox can be selected but not changed by the user.                                                        |           |\n| isDisabled       | `boolean`                                                                   | Whether the checkbox is disabled.                                                                                     | `false`   |\n| isIndeterminate  | `boolean`                                                                   | Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction. |           |\n| isInvalid        | `boolean`                                                                   | Whether the checkbox is invalid.                                                                                         | `false`   |\n| validationState  | `valid` \\| `invalid`                                                        | Whether the checkbox should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead. | -         |\n| disableAnimation | `boolean`                                                                   | Whether the animation should be disabled.                                                                             | `false`   |\n| classNames       | `Record<\"base\"｜ \"wrapper\"｜ \"icon\"｜ \"label\", string>`                     | Allows to set custom class names for the checkbox slots.                                                              | -         |\n\n### Checkbox Events\n\n| Attribute     | Type                                  | Description                                                                                                                                              |\n| ------------- | ------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing `event.target.checked` (boolean). |\n| onValueChange | `(isSelected: boolean) => void`       | Handler that is called when the element's selection state changes.                                                                                       |\n\n### Types\n\n#### Checkbox Icon Props\n\n```ts\ntype IconProps = {\n  \"data-checked\": string;\n  isSelected: boolean;\n  isIndeterminate: boolean;\n  disableAnimation: boolean;\n  className: string;\n};\n\ntype CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);\n```\n",
    "code": "var Component=(()=>{var T=Object.create;var s=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var H=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),L=(n,t)=>{for(var i in t)s(n,i,{get:t[i],enumerable:!0})},u=(n,t,i,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let c of N(t))!D.call(n,c)&&c!==i&&s(n,c,{get:()=>t[c],enumerable:!(r=z(t,c))||r.enumerable});return n};var M=(n,t,i)=>(i=n!=null?T(W(n)):{},u(t||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),R=n=>u(s({},\"__esModule\",{value:!0}),n);var b=H((pe,m)=>{m.exports=_jsx_runtime});var he={};L(he,{default:()=>P,frontmatter:()=>se});var e=M(b());var B=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Checkbox defaultSelected>Option</Checkbox>\n  );\n}`,F={\"/App.jsx\":B},x={...F};var O=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected size=\"sm\">Small</Checkbox>\n      <Checkbox defaultSelected size=\"md\">Medium</Checkbox>\n      <Checkbox defaultSelected size=\"lg\">Large</Checkbox>\n    </div>  \n  );\n}`,V={\"/App.jsx\":O},f={...V};var _=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected color=\"default\">Default</Checkbox>\n      <Checkbox defaultSelected color=\"primary\">Primary</Checkbox>\n      <Checkbox defaultSelected color=\"secondary\">Secondary</Checkbox>\n      <Checkbox defaultSelected color=\"success\">Success</Checkbox>\n      <Checkbox defaultSelected color=\"warning\">Warning</Checkbox>\n      <Checkbox defaultSelected color=\"danger\">Danger</Checkbox>\n    </div> \n  );\n}`,q={\"/App.jsx\":_},k={...q};var E=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox isDisabled>Option</Checkbox>\n      <Checkbox isDisabled defaultSelected>Option</Checkbox>\n    </div>  \n  );\n}`,U={\"/App.jsx\":E},g={...U};var K=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected radius=\"full\">Full</Checkbox>\n      <Checkbox defaultSelected radius=\"lg\">Large</Checkbox>\n      <Checkbox defaultSelected radius=\"md\">Medium</Checkbox>\n      <Checkbox defaultSelected radius=\"sm\">Small</Checkbox>\n      <Checkbox defaultSelected radius=\"none\">None</Checkbox>\n    </div>  \n  );\n}`,G={\"/App.jsx\":K},C={...G};var X=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Checkbox isIndeterminate>Option</Checkbox>\n  );\n}`,Y={\"/App.jsx\":X},v={...Y};var J=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Checkbox defaultSelected lineThrough>Option</Checkbox>\n  );\n}`,Z={\"/App.jsx\":J},y={...Z};var Q=`export const HeartIcon = ({ size, height, width, ...props }) => {\n  // avoid passing non-DOM attributes to svg\n  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;\n\n  return (\n    <svg\n      width={size || width || 24}\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      fill='fill'\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...otherProps}\n    >\n      <path\n        d=\"M12.62 20.81c-.34.12-.9.12-1.24 0C8.48 19.82 2 15.69 2 8.69 2 5.6 4.49 3.1 7.56 3.1c1.82 0 3.43.88 4.44 2.24a5.53 5.53 0 0 1 4.44-2.24C19.51 3.1 22 5.6 22 8.69c0 7-6.48 11.13-9.38 12.12Z\"\n        fill='currentColor'\n      />\n    </svg>\n  );\n};\n`,$=`export const PlusIcon = ({ size, height, width, ...props }) => {\n  // avoid passing non-DOM attributes to svg\n  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;\n\n  return (\n    <svg\n      width={size || width || 24}\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...otherProps}\n    >\n      <path\n        d=\"M6 12H18\"\n        stroke=\"currentColor\"\n        stroke-width=\"3\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <path\n        d=\"M12 18V6\"\n        stroke=\"currentColor\"\n        stroke-width=\"3\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </svg>\n  );\n};`,ee=`import {Checkbox} from \"@nextui-org/react\";\nimport {HeartIcon} from './HeartIcon.jsx';  \nimport {PlusIcon} from './PlusIcon.jsx';\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected icon={<HeartIcon/>}>Option</Checkbox>\n      <Checkbox defaultSelected icon={<PlusIcon/>} color=\"warning\">Option</Checkbox>\n    </div>  \n  );\n}`,te={\"/App.jsx\":ee,\"/HeartIcon.jsx\":Q,\"/PlusIcon.jsx\":$},S={...te};var ne=`import {Checkbox} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [isSelected, setIsSelected] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Checkbox isSelected={isSelected} onValueChange={setIsSelected}>\n        Subscribe (controlled)\n      </Checkbox>\n      <p className=\"text-default-500\">\n        Selected: {isSelected ? \"true\" : \"false\"}\n      </p>\n    </div>\n  );\n}`,re={\"/App.jsx\":ne},w={...re};var oe=`import {Checkbox, Link, User, Chip, cn} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [isSelected, setIsSelected] = React.useState(false);\n\n  const user = {\n    name: \"Junior Garcia\",\n    avatar: \"https://avatars.githubusercontent.com/u/30373425?v=4\",\n    username: \"jrgarciadev\",\n    url: \"https://x.com/jrgarciadev\",\n    role: \"Software Developer\",\n    status: \"Active\",\n  }\n\n  return (\n    <Checkbox\n      aria-label={user.name}\n      classNames={{\n        base: cn(\n          \"inline-flex w-full max-w-md bg-content1\",\n          \"hover:bg-content2 items-center justify-start\",\n          \"cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\",\n        ),\n        label: \"w-full\",\n      }}\n      isSelected={isSelected}\n      onValueChange={setIsSelected}\n    >\n      <div className=\"w-full flex justify-between gap-2\">\n        <User\n          avatarProps={{size: \"md\", src: user.avatar}}\n          description={\n            <Link isExternal href={user.url} size=\"sm\">\n              @{user.username}\n            </Link>\n          }\n          name={user.name}\n        />\n        <div className=\"flex flex-col items-end gap-1\">\n          <span className=\"text-tiny text-default-500\">{user.role}</span>\n          <Chip color=\"success\" size=\"sm\" variant=\"flat\">\n            {user.status}\n          </Chip>\n        </div>\n      </div>\n    </Checkbox>\n  );\n}`,ie={\"/App.jsx\":oe},I={...ie};var ce=`export const CheckIcon = (props) =>\n  (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <polyline points=\"20 6 9 17 4 12\" />\n    </svg>\n  );`,de=`import {useCheckbox, Chip, VisuallyHidden, tv} from \"@nextui-org/react\";\nimport {CheckIcon} from './CheckIcon.jsx'\n\nconst checkbox = tv({\n  slots: {\n    base: \"border-default hover:bg-default-200\",\n    content: \"text-default-500\"\n  },\n  variants: {\n    isSelected: {\n      true: {\n        base: \"border-primary bg-primary hover:bg-primary-500 hover:border-primary-500\",\n        content: \"text-primary-foreground pl-1\"\n      }\n    },\n    isFocusVisible: {\n      true: { \n        base: \"outline-none ring-2 ring-focus ring-offset-2 ring-offset-background\",\n      }\n    }\n  }\n})\n\nexport default function App() {\n  const {\n    children,\n    isSelected,\n    isFocusVisible,\n    getBaseProps,\n    getLabelProps,\n    getInputProps,\n  } = useCheckbox({\n    defaultSelected: true,\n  })\n\n  const styles = checkbox({ isSelected, isFocusVisible })\n\n  return (\n    <label {...getBaseProps()}>\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <Chip\n        classNames={{\n          base: styles.base(),\n          content: styles.content(),\n        }}\n        color=\"primary\"\n        startContent={isSelected ? <CheckIcon className=\"ml-1\" /> : null}\n        variant=\"faded\"\n        {...getLabelProps()}\n      >\n        {children ? children : isSelected ? \"Enabled\" : \"Disabled\"}\n      </Chip>\n    </label>\n  );\n}`,le={\"/App.jsx\":de,\"./CheckIcon.jsx\":ce},A={...le};var o={usage:x,sizes:f,colors:k,disabled:g,radius:C,indeterminate:v,lineThrough:y,customCheckIcon:S,controlled:w,customStyles:I,customImplementation:A};var se={title:\"Checkbox\",description:\"Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\"};function j(n){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...n.components},{CarbonAd:i,CodeDemo:r,ComponentLinks:c,ImportTabs:a,Kbd:h,PackageManagers:p,Spacer:l}=t;return i||d(\"CarbonAd\",!0),r||d(\"CodeDemo\",!0),c||d(\"ComponentLinks\",!0),a||d(\"ImportTabs\",!0),h||d(\"Kbd\",!0),p||d(\"PackageManagers\",!0),l||d(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"checkbox\",children:\"Checkbox\"}),`\n`,(0,e.jsx)(t.p,{children:\"Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\"}),`\n`,(0,e.jsx)(c,{component:\"checkbox\",reactAriaHook:\"useCheckbox\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(p,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add checkbox\",npm:\"npm install @nextui-org/checkbox\",yarn:\"yarn add @nextui-org/checkbox\",pnpm:\"pnpm add @nextui-org/checkbox\",bun:\"bun add @nextui-org/checkbox\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(a,{commands:{main:'import {Checkbox} from \"@nextui-org/react\";',individual:'import {Checkbox} from \"@nextui-org/checkbox\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:o.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(r,{title:\"Disabled\",files:o.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(r,{title:\"Sizes\",files:o.sizes}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(r,{title:\"Colors\",files:o.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsx)(r,{title:\"Radius\",files:o.radius}),`\n`,(0,e.jsx)(t.h3,{id:\"indeterminate\",children:\"Indeterminate\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\" prop sets a \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" to an indeterminate state, overriding its appearance and maintaining it until set to \",(0,e.jsx)(t.code,{children:\"false\"}),\", regardless of user interaction.\"]}),`\n`,(0,e.jsx)(r,{title:\"Indeterminate\",files:o.indeterminate}),`\n`,(0,e.jsx)(t.h3,{id:\"line-through\",children:\"Line Through\"}),`\n`,(0,e.jsx)(r,{title:\"Line Through\",files:o.lineThrough}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-check-icon\",children:\"Custom Check Icon\"}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"IconProps\"}),\" will be passed to your icon component.  Please make sure that \",(0,e.jsx)(t.code,{children:\"isSelected\"}),\", \",(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\", and \",(0,e.jsx)(t.code,{children:\"disableAnimation\"}),\" are not passed to a DOM element.\"]}),`\n`]}),`\n`,(0,e.jsx)(r,{title:\"Custom Check Icon\",files:o.customCheckIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(r,{title:\"Controlled Checkbox\",files:o.controlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": NextUI \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" also supports native events like \",(0,e.jsx)(t.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Checkbox wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"wrapper\"}),\": An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"icon\"}),\": Icon within the checkbox, controlling size, visibility, and changes when checked.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": The text associated with the checkbox.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Styles\",files:o.customStyles}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In case you need to customize the checkbox even further, you can use the \",(0,e.jsx)(t.code,{children:\"useCheckbox\"}),\" hook to create your own implementation.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Implementation\",files:o.customImplementation}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": We used \",(0,e.jsx)(t.a,{href:\"https://www.tailwind-variants.org/\",children:\"Tailwind Variants\"}),\" to implement the styles above, you can use any other library such as \",(0,e.jsx)(t.a,{href:\"https://www.npmjs.com/package/clsx\",children:\"clsx\"}),\" to achieve the same result.\"]}),`\n`]}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-selected\"}),`:\nWhen the checkbox is checked. Based on `,(0,e.jsx)(t.code,{children:\"isSelected\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-pressed\"}),`:\nWhen the checkbox is pressed. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the checkbox is invalid. Based on `,(0,e.jsx)(t.code,{children:\"validationState\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the checkbox is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-indeterminate\"}),`:\nWhen the checkbox is indeterminate. Based on `,(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the checkbox is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the checkbox is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the checkbox is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the checkbox is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-loading\"}),`:\nWhen the checkbox is loading. Based on `,(0,e.jsx)(t.code,{children:\"isLoading\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native HTML \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Full support for browser features like form autofill.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"Keyboard event support for \",(0,e.jsx)(h,{children:\"Tab\"}),\" and \",(0,e.jsx)(h,{children:\"Space\"}),\" keys.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Labeling support for assistive technology.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Indeterminate state support.\"}),`\n`]}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"checkbox-props\",children:\"Checkbox Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The label of the checkbox.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"icon\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"#checkbox-icon-props\",children:\"CheckboxIconProps\"})}),(0,e.jsx)(t.td,{children:\"The icon to be displayed when the checkbox is checked.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"value\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The value of the checkbox element, used when submitting an HTML form.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"name\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The name of the checkbox element, used when submitting an HTML form.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The size of the checkbox.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The color of the checkbox.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"primary\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The radius of the checkbox.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"lineThrough\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the label should be crossed out.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isSelected\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the element should be selected (controlled).\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultSelected\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the element should be selected (uncontrolled).\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isRequired\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether user checkbox is required on the checkbox before form submission.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isReadOnly\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the checkbox can be selected but not changed by the user.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the checkbox is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isIndeterminate\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isInvalid\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the checkbox is invalid.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationState\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"valid\"}),\" | \",(0,e.jsx)(t.code,{children:\"invalid\"})]}),(0,e.jsxs)(t.td,{children:['Whether the checkbox should display its \"valid\" or \"invalid\" visual styling. (',(0,e.jsx)(t.strong,{children:\"Deprecated\"}),\") use \",(0,e.jsx)(t.strong,{children:\"isInvalid\"}),\" instead.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the animation should be disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C \"wrapper\"\\uFF5C \"icon\"\\uFF5C \"label\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the checkbox slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"checkbox-events\",children:\"Checkbox Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"React.ChangeEvent<HTMLInputElement>\"})}),(0,e.jsxs)(t.td,{children:[\"Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing \",(0,e.jsx)(t.code,{children:\"event.target.checked\"}),\" (boolean).\"]})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onValueChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isSelected: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element's selection state changes.\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,e.jsx)(t.h4,{id:\"checkbox-icon-props\",children:\"Checkbox Icon Props\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`type IconProps = {\n  \"data-checked\": string;\n  isSelected: boolean;\n  isIndeterminate: boolean;\n  disableAnimation: boolean;\n  className: string;\n};\n\ntype CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);\n`})})]})}function P(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(j,{...n})}):j(n)}function d(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return R(he);})();\n;return Component;"
  },
  "_id": "docs/components/checkbox.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/checkbox.mdx",
    "sourceFileName": "checkbox.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/checkbox"
  },
  "type": "Doc",
  "slug": "/docs/components/checkbox",
  "slugAsParams": "components/checkbox",
  "url": "/docs/components/checkbox"
}