{
  "title": "Textarea",
  "description": "Textarea component is a multi-line Input which allows you to write large texts.",
  "body": {
    "raw": "\nimport {textareaContent} from \"@/content/components/textarea\";\n\n# Textarea\n\nTextarea component is a multi-line Input which allows you to write large texts.\n\n<ComponentLinks component=\"input\" storybook=\"textarea\" reactAriaHook=\"useTextField\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add input\",\n    npm: \"npm install @nextui-org/input\",\n    yarn: \"yarn add @nextui-org/input\",\n    pnpm: \"pnpm add @nextui-org/input\",\n    bun: \"bun add @nextui-org/input\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Textarea} from \"@nextui-org/react\";',\n    individual: 'import {Textarea} from \"@nextui-org/input\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={textareaContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={textareaContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Readonly\" files={textareaContent.readonly} />\n\n### Required\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at\nthe end of the label and the textarea will be required.\n\n<CodeDemo title=\"Required\" files={textareaContent.required} />\n\n### Autosize\n\nTextarea grows automatically based on the content, but you can also set a min and max height to\nit using the `minRows` and `maxRows` properties. It is based on [react-textarea-autosize](https://github.com/Andarist/react-textarea-autosize).\n\n<CodeDemo title=\"Autosize\" files={textareaContent.autosize} />\n\n### Without Autosize\n\nIn case you want to disable the autosize feature, you can use the `disableAutosize` property.\n\n<CodeDemo title=\"Without Autosize\" files={textareaContent.disableAutosize} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={textareaContent.variants} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid textarea.\n\n<CodeDemo title=\"With Error Message\" files={textareaContent.errorMessage} />\n\n### Description\n\n<CodeDemo title=\"Description\" files={textareaContent.description} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={textareaContent.controlled} />\n\n> **Note**: NextUI `Textarea` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **label**: Label of the textarea, it is the one that is displayed above, inside or left of the textarea.\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **input**: The textarea input element.\n- **description**: The description of the textarea.\n- **errorMessage**: The error message of the textarea.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Textarea` has the following attributes on the `base` element:\n\n- **data-invalid**:\n  When the textarea is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the textarea is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the textarea is readonly. Based on `isReadOnly` prop.\n- **data-hover**:\n  When the textarea is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus**:\n  When the textarea is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the textarea is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-disabled**:\n  When the textarea is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native `<input>` element.\n- Visual and ARIA labeling support.\n- Change, clipboard, composition, selection, and input event support.\n- Required and invalid states exposed to assistive technology via ARIA.\n- Support for description and error message help text linked to the input via ARIA.\n\n<Spacer y={4} />\n\n## API\n\n### Textarea Props\n\n| Attribute          | Type                                                                                                               | Description                                                                                                                                                                                                                                             | Default   |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| children           | `ReactNode`                                                                                                        | The content of the textarea.                                                                                                                                                                                                                            | -         |\n| minRows            | `number`                                                                                                           | The minimum number of rows to display.                                                                                                                                                                                                                  | `3`       |\n| maxRows            | `number`                                                                                                           | Maximum number of rows up to which the textarea can grow.                                                                                                                                                                                               | `8`       |\n| cacheMeasurements  | `boolean`                                                                                                          | Reuse previously computed measurements when computing height of textarea.                                                                                                                                                                               | `false`   |\n| variant            | `flat` \\| `bordered` \\| `faded` \\| `underlined`                                                                    | The variant of the textarea.                                                                                                                                                                                                                            | `flat`    |\n| color              | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger`                                        | The color of the textarea.                                                                                                                                                                                                                              | `default` |\n| size               | `sm`\\|`md`\\|`lg`                                                                                                   | The size of the textarea.                                                                                                                                                                                                                               | `md`      |\n| radius             | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                                                           | The radius of the textarea.                                                                                                                                                                                                                             | -         |\n| label              | `ReactNode`                                                                                                        | The content to display as the label.                                                                                                                                                                                                                    | -         |\n| value              | `string`                                                                                                           | The current value of the textarea (controlled).                                                                                                                                                                                                         | -         |\n| defaultValue       | `string`                                                                                                           | The default value of the textarea (uncontrolled).                                                                                                                                                                                                       | -         |\n| placeholder        | `string`                                                                                                           | The placeholder of the textarea.                                                                                                                                                                                                                        | -         |\n| startContent       | `ReactNode`                                                                                                        | Element to be rendered in the left side of the input.                                                                                                                                                                                                   | -         |\n| endContent         | `ReactNode`                                                                                                        | Element to be rendered in the right side of the input.                                                                                                                                                                                                  | -         |\n| description        | `ReactNode`                                                                                                        | A description for the textarea. Provides a hint such as specific requirements for what to choose.                                                                                                                                                       | -         |\n| errorMessage       | `ReactNode` \\| `((v: ValidationResult) => ReactNode)`                                                              | An error message for the textarea.                                                                                                                                                                                                                      | -         |\n| validate           | `(value: string) => ValidationError ｜ true ｜ null ｜ undefined`                                                  | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop. | -         |\n| validationBehavior | `native` \\| `aria`                                                                                                 | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.                                                                                          | `aria`    |\n| labelPlacement     | `inside` \\| `outside` \\| `outside-left`                                                                            | The position of the label.                                                                                                                                                                                                                              | `inside`  |\n| fullWidth          | `boolean`                                                                                                          | Whether the textarea should take up the width of its parent.                                                                                                                                                                                            | `true`    |\n| isRequired         | `boolean`                                                                                                          | Whether user input is required on the textarea before form submission.                                                                                                                                                                                  | `false`   |\n| isReadOnly         | `boolean`                                                                                                          | Whether the textarea can be selected but not changed by the user.                                                                                                                                                                                       |           |\n| isDisabled         | `boolean`                                                                                                          | Whether the textarea is disabled.                                                                                                                                                                                                                       | `false`   |\n| isInvalid          | `boolean`                                                                                                          | Whether the textarea is invalid.                                                                                                                                                                                                                        | `false`   |\n| validationState    | `valid` \\| `invalid`                                                                                               | Whether the textarea should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead.                                                                                                                                | -         |\n| disableAutosize    | `boolean`                                                                                                          | Whether the textarea auto vertically resize should be disabled.                                                                                                                                                                                         | `false`   |\n| disableAnimation   | `boolean`                                                                                                          | Whether the textarea should be animated.                                                                                                                                                                                                                | `false`   |\n| classNames         | `Record<\"base\"｜ \"label\"｜ \"inputWrapper\"｜ \"innerWrapper\" ｜ \"input\" ｜ \"description\" ｜ \"errorMessage\", string>` | Allows to set custom class names for the checkbox slots.                                                                                                                                                                                                | -         |\n\n### Input Events\n\n| Attribute      | Type                                                    | Description                                                                                                                         |\n| -------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| onChange       | `React.ChangeEvent <HTMLInputElement>`                  | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |\n| onValueChange  | `(value: string) => void`                               | Handler that is called when the element's value changes.                                                                            |\n| onClear        | `() => void`                                            | Handler that is called when the clear button is clicked.                                                                            |\n| onHeightChange | `(height: number, meta: { rowHeight: number }) => void` | Handler that is called when the height of the textarea changes.                                                                     |\n",
    "code": "var Component=(()=>{var W=Object.create;var o=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var z=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),M=(r,t)=>{for(var i in t)o(r,i,{get:t[i],enumerable:!0})},u=(r,t,i,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let l of k(t))!E.call(r,l)&&l!==i&&o(r,l,{get:()=>t[l],enumerable:!(n=N(t,l))||n.enumerable});return r};var q=(r,t,i)=>(i=r!=null?W(C(r)):{},u(t||!r||!r.__esModule?o(i,\"default\",{value:r,enumerable:!0}):i,r)),j=r=>u(o({},\"__esModule\",{value:!0}),r);var m=z((de,p)=>{p.exports=_jsx_runtime});var ne={};M(ne,{default:()=>D,frontmatter:()=>re});var e=q(m());var V=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,H={\"/App.jsx\":V},x={...H};var P=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isDisabled\n      label=\"Description\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n      defaultValue=\"NextUI is a React UI library that provides a set of accessible, reusable, and beautiful components.\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,B={\"/App.jsx\":P},f={...B};var F=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isRequired\n      label=\"Description\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,U={\"/App.jsx\":F},b={...U};var _=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isReadOnly\n      label=\"Description\"\n      variant=\"bordered\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n      defaultValue=\"NextUI is a React UI library that provides a set of accessible, reusable, and beautiful components.\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,L={\"/App.jsx\":_},g={...L};var S=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n      <Textarea\n        label=\"Description\"\n        placeholder=\"Enter your description (Default autosize)\"\n      />\n      <Textarea\n        minRows={2}\n        label=\"Description\"\n        placeholder=\"Enter your description (Min rows 2)\"\n      />\n      <Textarea\n        maxRows={3}\n        label=\"Description\"\n        placeholder=\"Enter your description (Max rows 3)\"\n      />\n    </div>\n  );\n}`,O={\"/App.jsx\":S},v={...O};var Y=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"faded\", \"bordered\", \"underlined\"];\n\n  return (\n    <div className=\"w-full grid grid-cols-12 gap-4\">\n      {variants.map((variant) => (\n        <Textarea\n          key={variant}\n          variant={variant}\n          label=\"Description\"\n          labelPlacement=\"outside\"\n          placeholder=\"Enter your description\"\n          className=\"col-span-12 md:col-span-6 mb-6 md:mb-0\"\n        />\n      ))}\n    </div>\n  );\n}`,X={\"/App.jsx\":Y},y={...X};var G=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isInvalid={true}\n      variant=\"bordered\"\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      defaultValue=\"NextUI is a React UI library with...\"\n      errorMessage=\"The description should be at least 255 characters long.\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,J={\"/App.jsx\":G},w={...J};var K=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      variant=\"faded\"\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      description=\"Enter a concise description of your project.\"\n      className=\"max-w-xs\"\n    />\n  );\n}`,Q={\"/App.jsx\":K},A={...Q};var Z=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <div className=\"w-full flex flex-col gap-2 max-w-[240px]\">\n      <Textarea\n        variant=\"underlined\"\n        label=\"Description\"\n        labelPlacement=\"outside\"\n        placeholder=\"Enter your description\"\n        value={value}\n        onValueChange={setValue}\n      />\n      <p className=\"text-default-500 text-small\">Textarea value: {value}</p>\n    </div>\n  );\n}`,$={\"/App.jsx\":Z},T={...$};var ee=`import {Textarea} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      label=\"Description\"\n      variant=\"bordered\"\n      placeholder=\"Enter your description\"\n      disableAnimation\n      disableAutosize\n      classNames={{\n        base: \"max-w-xs\",\n        input: \"resize-y min-h-[40px]\",\n      }}\n    />\n  );\n}`,te={\"/App.jsx\":ee},R={...te};var d={usage:x,disabled:f,required:b,readonly:g,autosize:v,variants:y,errorMessage:w,description:A,controlled:T,disableAutosize:R};var re={title:\"Textarea\",description:\"Textarea component is a multi-line Input which allows you to write large texts.\"};function I(r){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...r.components},{CarbonAd:i,CodeDemo:n,ComponentLinks:l,ImportTabs:h,PackageManagers:s,Spacer:c}=t;return i||a(\"CarbonAd\",!0),n||a(\"CodeDemo\",!0),l||a(\"ComponentLinks\",!0),h||a(\"ImportTabs\",!0),s||a(\"PackageManagers\",!0),c||a(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"textarea\",children:\"Textarea\"}),`\n`,(0,e.jsx)(t.p,{children:\"Textarea component is a multi-line Input which allows you to write large texts.\"}),`\n`,(0,e.jsx)(l,{component:\"input\",storybook:\"textarea\",reactAriaHook:\"useTextField\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(i,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(s,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add input\",npm:\"npm install @nextui-org/input\",yarn:\"yarn add @nextui-org/input\",pnpm:\"pnpm add @nextui-org/input\",bun:\"bun add @nextui-org/input\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(h,{commands:{main:'import {Textarea} from \"@nextui-org/react\";',individual:'import {Textarea} from \"@nextui-org/input\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n,{title:\"Usage\",files:d.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(n,{title:\"Disabled\",files:d.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(n,{title:\"Readonly\",files:d.readonly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" property to the input, it will have a \",(0,e.jsx)(t.code,{children:\"danger\"}),` asterisk at\nthe end of the label and the textarea will be required.`]}),`\n`,(0,e.jsx)(n,{title:\"Required\",files:d.required}),`\n`,(0,e.jsx)(t.h3,{id:\"autosize\",children:\"Autosize\"}),`\n`,(0,e.jsxs)(t.p,{children:[`Textarea grows automatically based on the content, but you can also set a min and max height to\nit using the `,(0,e.jsx)(t.code,{children:\"minRows\"}),\" and \",(0,e.jsx)(t.code,{children:\"maxRows\"}),\" properties. It is based on \",(0,e.jsx)(t.a,{href:\"https://github.com/Andarist/react-textarea-autosize\",children:\"react-textarea-autosize\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Autosize\",files:d.autosize}),`\n`,(0,e.jsx)(t.h3,{id:\"without-autosize\",children:\"Without Autosize\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In case you want to disable the autosize feature, you can use the \",(0,e.jsx)(t.code,{children:\"disableAutosize\"}),\" property.\"]}),`\n`,(0,e.jsx)(n,{title:\"Without Autosize\",files:d.disableAutosize}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(n,{title:\"Variants\",files:d.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid textarea.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Error Message\",files:d.errorMessage}),`\n`,(0,e.jsx)(t.h3,{id:\"description\",children:\"Description\"}),`\n`,(0,e.jsx)(n,{title:\"Description\",files:d.description}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onValueChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(n,{title:\"Controlled\",files:d.controlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": NextUI \",(0,e.jsx)(t.code,{children:\"Textarea\"}),\" also supports native events like \",(0,e.jsx)(t.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the textarea, it is the one that is displayed above, inside or left of the textarea.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The textarea input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the textarea.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the textarea.\"]}),`\n`]}),`\n`,(0,e.jsx)(c,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Textarea\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the textarea is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the textarea is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the textarea is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the textarea is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the textarea is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the textarea is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the textarea is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(c,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Visual and ARIA labeling support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Change, clipboard, composition, selection, and input event support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description and error message help text linked to the input via ARIA.\"}),`\n`]}),`\n`,(0,e.jsx)(c,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"textarea-props\",children:\"Textarea Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content of the textarea.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"minRows\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The minimum number of rows to display.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"3\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"maxRows\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"Maximum number of rows up to which the textarea can grow.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"8\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"cacheMeasurements\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Reuse previously computed measurements when computing height of textarea.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"variant\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"flat\"}),\" | \",(0,e.jsx)(t.code,{children:\"bordered\"}),\" | \",(0,e.jsx)(t.code,{children:\"faded\"}),\" | \",(0,e.jsx)(t.code,{children:\"underlined\"})]}),(0,e.jsx)(t.td,{children:\"The variant of the textarea.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"flat\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The color of the textarea.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\"|\",(0,e.jsx)(t.code,{children:\"md\"}),\"|\",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The size of the textarea.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The radius of the textarea.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"label\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content to display as the label.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"value\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The current value of the textarea (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultValue\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The default value of the textarea (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placeholder\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"string\"})}),(0,e.jsx)(t.td,{children:\"The placeholder of the textarea.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"startContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the left side of the input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"endContent\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"Element to be rendered in the right side of the input.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"description\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"A description for the textarea. Provides a hint such as specific requirements for what to choose.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"errorMessage\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"ReactNode\"}),\" | \",(0,e.jsx)(t.code,{children:\"((v: ValidationResult) => ReactNode)\"})]}),(0,e.jsx)(t.td,{children:\"An error message for the textarea.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validate\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: string) => ValidationError \\uFF5C true \\uFF5C null \\uFF5C undefined\"})}),(0,e.jsxs)(t.td,{children:[\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if \",(0,e.jsx)(t.code,{children:\"validationBehavior\"}),\" is set to \",(0,e.jsx)(t.code,{children:\"native\"}),\". For real-time validation, use the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationBehavior\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"native\"}),\" | \",(0,e.jsx)(t.code,{children:\"aria\"})]}),(0,e.jsx)(t.td,{children:\"Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"aria\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"labelPlacement\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"inside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside\"}),\" | \",(0,e.jsx)(t.code,{children:\"outside-left\"})]}),(0,e.jsx)(t.td,{children:\"The position of the label.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"inside\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"fullWidth\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea should take up the width of its parent.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isRequired\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether user input is required on the textarea before form submission.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isReadOnly\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea can be selected but not changed by the user.\"}),(0,e.jsx)(t.td,{})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isInvalid\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea is invalid.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"validationState\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"valid\"}),\" | \",(0,e.jsx)(t.code,{children:\"invalid\"})]}),(0,e.jsxs)(t.td,{children:['Whether the textarea should display its \"valid\" or \"invalid\" visual styling. (',(0,e.jsx)(t.strong,{children:\"Deprecated\"}),\") use \",(0,e.jsx)(t.strong,{children:\"isInvalid\"}),\" instead.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAutosize\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea auto vertically resize should be disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the textarea should be animated.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C \"label\"\\uFF5C \"inputWrapper\"\\uFF5C \"innerWrapper\" \\uFF5C \"input\" \\uFF5C \"description\" \\uFF5C \"errorMessage\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the checkbox slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(t.h3,{id:\"input-events\",children:\"Input Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"React.ChangeEvent <HTMLInputElement>\"})}),(0,e.jsxs)(t.td,{children:[\"Handler that is called when the element's value changes. You can pull out the new value by accessing \",(0,e.jsx)(t.code,{children:\"event.target.value\"}),\" (string).\"]})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onValueChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(value: string) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the element's value changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onClear\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"() => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the clear button is clicked.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onHeightChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(height: number, meta: { rowHeight: number }) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the height of the textarea changes.\"})]})]})]})]})}function D(r={}){let{wrapper:t}=r.components||{};return t?(0,e.jsx)(t,{...r,children:(0,e.jsx)(I,{...r})}):I(r)}function a(r,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j(ne);})();\n;return Component;"
  },
  "_id": "docs/components/textarea.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/textarea.mdx",
    "sourceFileName": "textarea.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/textarea"
  },
  "type": "Doc",
  "slug": "/docs/components/textarea",
  "slugAsParams": "components/textarea",
  "url": "/docs/components/textarea"
}