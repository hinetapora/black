{
  "title": "Dark mode",
  "description": "NextUI comes with two palette modes light (the default) and dark.",
  "body": {
    "raw": "\n# Dark mode\n\nAs we mentioned before in the [Theme](/docs/customization/theme) section NextUI comes with two default\nthemes `light`and `dark`. So using the `dark` theme is as simple as adding it to the `className` of the\n`html` / `body` or `main` element.\n\n```jsx {11}\n// main.tsx or main.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <NextUIProvider>\n      <main className=\"dark text-foreground bg-background\">\n        <App />\n      </main>\n    </NextUIProvider>\n  </React.StrictMode>,\n);\n```\n\nThis will enable the dark mode for the whole application. However, many applications require \nthe capability to switch between different themes. For this purpose, we recommend using a \ntheme switch library or creating your own implementation.\n\n<CarbonAd/>\n\n## Using next-themes\n\nFor applications using [Next.js](/docs/frameworks/nextjs), the [next-themes](https://github.com/pacocoursey/next-themes)\nlibrary is an excellent choice. It comes packed with features that enhance the user experience\nwhen transitioning between themes.\n\n> For more information, refer to the [next-themes](https://github.com/pacocoursey/next-themes) documentation.\n\n### Next.js App Directory Setup\n\n<Steps>\n\n### Install next-themes\n\nInstall `next-themes` in your project.\n\n<PackageManagers\n  commands={{\n    npm: 'npm install next-themes',\n    yarn: 'yarn add next-themes',\n    pnpm: 'pnpm add next-themes',\n  }}\n/>\n\n\n### Add next-themes provider\n\nWrap your app with the `ThemeProvider` component from `next-themes`.\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the \nComponent with the `NextUIProvider` and the `next-themes` provider components.\n\n\n```jsx\n// app/providers.tsx\n\"use client\";\n\nimport {NextUIProvider} from '@nextui-org/react'\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  return (\n    <NextUIProvider>\n      <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\">\n        {children}\n      </NextThemesProvider>\n    </NextUIProvider>\n  )\n}\n```\n\n> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.\n\n### Add the theme switcher\n\nAdd the theme switcher to your app.\n\n```jsx\n// app/components/ThemeSwitcher.tsx\n\"use client\";\n\nimport {useTheme} from \"next-themes\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeSwitcher() {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme } = useTheme()\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if(!mounted) return null\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n```\n\n> **Note**: You can use any theme name you want, but make sure it exists in your \n`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.\n\n</Steps>\n\n### Next.js Pages Directory Setup\n\n<Steps>\n\n### Install next-themes\n\nInstall `next-themes` in your project.\n\n<PackageManagers\n  commands={{\n    npm: 'npm install next-themes',\n    yarn: 'yarn add next-themes',\n    pnpm: 'pnpm add next-themes',\n  }}\n/>\n\n### Add next-themes provider\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and  wrap the\nComponent with the `NextUIProvider` and the `next-themes` provider components.\n\n```jsx\n// pages/_app.js\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <NextUIProvider>\n      <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\">\n        <Component {...pageProps} />\n      </NextThemesProvider>\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n```\n\n> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.\n\n### Add the theme switcher\n\nAdd the theme switcher to your app.\n\n```jsx\n// components/ThemeSwitcher.tsx\nimport {useTheme} from \"next-themes\";\n\nexport const ThemeSwitcher = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n```\n\n> **Note**: You can use any theme name you want, but make sure it exists in your\n`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.\n\n</Steps>\n\n\n## Using use-theme hook\n\nIn case you're using plain React with [Vite](/docs/frameworks/vite) or [Create React App](https://create-react-app.dev/) \nyou can use the [@nextui-org/use-theme](https://github.com/nextui-org/nextui/tree/canary/packages/hooks/use-theme) hook to switch between themes.\n\n<Steps> \n\n### Install @nextui-org/use-theme\n\nInstall `@nextui-org/use-theme` in your project.\n\n<PackageManagers\n  commands={{\n    npm: 'npm install @nextui-org/use-theme',\n    yarn: 'yarn add @nextui-org/use-theme',\n    pnpm: 'pnpm add @nextui-org/use-theme',\n  }}\n/> \n\n### Add the current theme to the main element\n\n```jsx\n// App.tsx or App.jsx\nimport React from \"react\";\nimport {useTheme} from \"@nextui-org/use-theme\";\n\nexport default function App() {\n  const {theme} = useTheme();\n\n  return (\n    <main className={`${theme} text-foreground bg-background`}>\n      <App />\n    </main>\n  )\n}\n```\n\n### Add the theme switcher\n\nAdd the theme switcher to your app.\n\n```jsx\n// 'use client'; // uncomment this line if you're using Next.js App Directory Setup\n\n// components/ThemeSwitcher.tsx\nimport {useTheme} from \"@nextui-org/use-theme\";\n\nexport const ThemeSwitcher = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n```\n\n> **Note**: You can use any theme name you want, but make sure it exists in your\n`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.\n\n\n</Steps>\n",
    "code": "var Component=(()=>{var p=Object.create;var h=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)h(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(n,o)&&o!==r&&h(n,o,{get:()=>e[o],enumerable:!(i=u(e,o))||i.enumerable});return n};var k=(n,e,r)=>(r=n!=null?p(g(n)):{},d(e||!n||!n.__esModule?h(r,\"default\",{value:n,enumerable:!0}):r,n)),y=n=>d(h({},\"__esModule\",{value:!0}),n);var a=w((j,s)=>{s.exports=_jsx_runtime});var T={};b(T,{default:()=>l,frontmatter:()=>N});var t=k(a()),N={title:\"Dark mode\",description:\"NextUI comes with two palette modes light (the default) and dark.\"};function m(n){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",strong:\"strong\",...n.components},{CarbonAd:r,PackageManagers:i,Steps:o}=e;return r||c(\"CarbonAd\",!0),i||c(\"PackageManagers\",!0),o||c(\"Steps\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"dark-mode\",children:\"Dark mode\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"As we mentioned before in the \",(0,t.jsx)(e.a,{href:\"/docs/customization/theme\",children:\"Theme\"}),` section NextUI comes with two default\nthemes `,(0,t.jsx)(e.code,{children:\"light\"}),\"and \",(0,t.jsx)(e.code,{children:\"dark\"}),\". So using the \",(0,t.jsx)(e.code,{children:\"dark\"}),\" theme is as simple as adding it to the \",(0,t.jsx)(e.code,{children:\"className\"}),` of the\n`,(0,t.jsx)(e.code,{children:\"html\"}),\" / \",(0,t.jsx)(e.code,{children:\"body\"}),\" or \",(0,t.jsx)(e.code,{children:\"main\"}),\" element.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",meta:\"{11}\",children:`// main.tsx or main.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <NextUIProvider>\n      <main className=\"dark text-foreground bg-background\">\n        <App />\n      </main>\n    </NextUIProvider>\n  </React.StrictMode>,\n);\n`})}),`\n`,(0,t.jsx)(e.p,{children:`This will enable the dark mode for the whole application. However, many applications require\nthe capability to switch between different themes. For this purpose, we recommend using a\ntheme switch library or creating your own implementation.`}),`\n`,(0,t.jsx)(r,{}),`\n`,(0,t.jsx)(e.h2,{id:\"using-next-themes\",children:\"Using next-themes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For applications using \",(0,t.jsx)(e.a,{href:\"/docs/frameworks/nextjs\",children:\"Next.js\"}),\", the \",(0,t.jsx)(e.a,{href:\"https://github.com/pacocoursey/next-themes\",children:\"next-themes\"}),`\nlibrary is an excellent choice. It comes packed with features that enhance the user experience\nwhen transitioning between themes.`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"For more information, refer to the \",(0,t.jsx)(e.a,{href:\"https://github.com/pacocoursey/next-themes\",children:\"next-themes\"}),\" documentation.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"nextjs-app-directory-setup\",children:\"Next.js App Directory Setup\"}),`\n`,(0,t.jsxs)(o,{children:[(0,t.jsx)(e.h3,{id:\"install-next-themes\",children:\"Install next-themes\"}),(0,t.jsxs)(e.p,{children:[\"Install \",(0,t.jsx)(e.code,{children:\"next-themes\"}),\" in your project.\"]}),(0,t.jsx)(i,{commands:{npm:\"npm install next-themes\",yarn:\"yarn add next-themes\",pnpm:\"pnpm add next-themes\"}}),(0,t.jsx)(e.h3,{id:\"add-next-themes-provider\",children:\"Add next-themes provider\"}),(0,t.jsxs)(e.p,{children:[\"Wrap your app with the \",(0,t.jsx)(e.code,{children:\"ThemeProvider\"}),\" component from \",(0,t.jsx)(e.code,{children:\"next-themes\"}),\".\"]}),(0,t.jsxs)(e.p,{children:[\"Go to your \",(0,t.jsx)(e.code,{children:\"app/providers.tsx\"}),\" or \",(0,t.jsx)(e.code,{children:\"app/providers.jsx\"}),` (create it if it doesn't exist) and wrap the\nComponent with the `,(0,t.jsx)(e.code,{children:\"NextUIProvider\"}),\" and the \",(0,t.jsx)(e.code,{children:\"next-themes\"}),\" provider components.\"]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// app/providers.tsx\n\"use client\";\n\nimport {NextUIProvider} from '@nextui-org/react'\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nexport function Providers({children}: { children: React.ReactNode }) {\n  return (\n    <NextUIProvider>\n      <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\">\n        {children}\n      </NextThemesProvider>\n    </NextUIProvider>\n  )\n}\n`})}),(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Note: We're using the \",(0,t.jsx)(e.code,{children:\"class\"}),\" attribute to switch between themes, this is because NextUI uses the \",(0,t.jsx)(e.code,{children:\"className\"}),\" attribute.\"]}),`\n`]}),(0,t.jsx)(e.h3,{id:\"add-the-theme-switcher\",children:\"Add the theme switcher\"}),(0,t.jsx)(e.p,{children:\"Add the theme switcher to your app.\"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// app/components/ThemeSwitcher.tsx\n\"use client\";\n\nimport {useTheme} from \"next-themes\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeSwitcher() {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme } = useTheme()\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if(!mounted) return null\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n`})}),(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),`: You can use any theme name you want, but make sure it exists in your\n`,(0,t.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file. See \",(0,t.jsx)(e.a,{href:\"/docs/customization/create-theme\",children:\"Create Theme\"}),\" for more details.\"]}),`\n`]})]}),`\n`,(0,t.jsx)(e.h3,{id:\"nextjs-pages-directory-setup\",children:\"Next.js Pages Directory Setup\"}),`\n`,(0,t.jsxs)(o,{children:[(0,t.jsx)(e.h3,{id:\"install-next-themes-1\",children:\"Install next-themes\"}),(0,t.jsxs)(e.p,{children:[\"Install \",(0,t.jsx)(e.code,{children:\"next-themes\"}),\" in your project.\"]}),(0,t.jsx)(i,{commands:{npm:\"npm install next-themes\",yarn:\"yarn add next-themes\",pnpm:\"pnpm add next-themes\"}}),(0,t.jsx)(e.h3,{id:\"add-next-themes-provider-1\",children:\"Add next-themes provider\"}),(0,t.jsxs)(e.p,{children:[\"Go to pages\",(0,t.jsx)(e.code,{children:\"/_app.js\"}),\" or \",(0,t.jsx)(e.code,{children:\"pages/_app.tsx\"}),` (create it if it doesn't exist) and  wrap the\nComponent with the `,(0,t.jsx)(e.code,{children:\"NextUIProvider\"}),\" and the \",(0,t.jsx)(e.code,{children:\"next-themes\"}),\" provider components.\"]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// pages/_app.js\nimport {NextUIProvider} from \"@nextui-org/react\";\nimport {ThemeProvider as NextThemesProvider} from \"next-themes\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <NextUIProvider>\n      <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\">\n        <Component {...pageProps} />\n      </NextThemesProvider>\n    </NextUIProvider>\n  )\n}\n\nexport default MyApp;\n`})}),(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Note: We're using the \",(0,t.jsx)(e.code,{children:\"class\"}),\" attribute to switch between themes, this is because NextUI uses the \",(0,t.jsx)(e.code,{children:\"className\"}),\" attribute.\"]}),`\n`]}),(0,t.jsx)(e.h3,{id:\"add-the-theme-switcher-1\",children:\"Add the theme switcher\"}),(0,t.jsx)(e.p,{children:\"Add the theme switcher to your app.\"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// components/ThemeSwitcher.tsx\nimport {useTheme} from \"next-themes\";\n\nexport const ThemeSwitcher = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n`})}),(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),`: You can use any theme name you want, but make sure it exists in your\n`,(0,t.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file. See \",(0,t.jsx)(e.a,{href:\"/docs/customization/create-theme\",children:\"Create Theme\"}),\" for more details.\"]}),`\n`]})]}),`\n`,(0,t.jsx)(e.h2,{id:\"using-use-theme-hook\",children:\"Using use-theme hook\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In case you're using plain React with \",(0,t.jsx)(e.a,{href:\"/docs/frameworks/vite\",children:\"Vite\"}),\" or \",(0,t.jsx)(e.a,{href:\"https://create-react-app.dev/\",children:\"Create React App\"}),`\nyou can use the `,(0,t.jsx)(e.a,{href:\"https://github.com/nextui-org/nextui/tree/canary/packages/hooks/use-theme\",children:\"@nextui-org/use-theme\"}),\" hook to switch between themes.\"]}),`\n`,(0,t.jsxs)(o,{children:[(0,t.jsx)(e.h3,{id:\"install-nextui-orguse-theme\",children:\"Install @nextui-org/use-theme\"}),(0,t.jsxs)(e.p,{children:[\"Install \",(0,t.jsx)(e.code,{children:\"@nextui-org/use-theme\"}),\" in your project.\"]}),(0,t.jsx)(i,{commands:{npm:\"npm install @nextui-org/use-theme\",yarn:\"yarn add @nextui-org/use-theme\",pnpm:\"pnpm add @nextui-org/use-theme\"}}),(0,t.jsx)(e.h3,{id:\"add-the-current-theme-to-the-main-element\",children:\"Add the current theme to the main element\"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// App.tsx or App.jsx\nimport React from \"react\";\nimport {useTheme} from \"@nextui-org/use-theme\";\n\nexport default function App() {\n  const {theme} = useTheme();\n\n  return (\n    <main className={\\`\\${theme} text-foreground bg-background\\`}>\n      <App />\n    </main>\n  )\n}\n`})}),(0,t.jsx)(e.h3,{id:\"add-the-theme-switcher-2\",children:\"Add the theme switcher\"}),(0,t.jsx)(e.p,{children:\"Add the theme switcher to your app.\"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`// 'use client'; // uncomment this line if you're using Next.js App Directory Setup\n\n// components/ThemeSwitcher.tsx\nimport {useTheme} from \"@nextui-org/use-theme\";\n\nexport const ThemeSwitcher = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n};\n`})}),(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),`: You can use any theme name you want, but make sure it exists in your\n`,(0,t.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file. See \",(0,t.jsx)(e.a,{href:\"/docs/customization/create-theme\",children:\"Create Theme\"}),\" for more details.\"]}),`\n`]})]})]})}function l(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}function c(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(T);})();\n;return Component;"
  },
  "_id": "docs/customization/dark-mode.mdx",
  "_raw": {
    "sourceFilePath": "docs/customization/dark-mode.mdx",
    "sourceFileName": "dark-mode.mdx",
    "sourceFileDir": "docs/customization",
    "contentType": "mdx",
    "flattenedPath": "docs/customization/dark-mode"
  },
  "type": "Doc",
  "slug": "/docs/customization/dark-mode",
  "slugAsParams": "customization/dark-mode",
  "url": "/docs/customization/dark-mode"
}