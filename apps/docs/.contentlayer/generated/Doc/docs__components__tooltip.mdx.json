{
  "title": "Tooltip",
  "description": "Tooltips display a brief, informative message that appears when a user interacts with an element.",
  "body": {
    "raw": "\nimport {tooltipContent} from \"@/content/components/tooltip\";\n\n# Tooltip\n\nTooltips display a brief, informative message that appears when a user interacts with an element.\n\n<ComponentLinks component=\"tooltip\" styles=\"popover\" reactAriaHook=\"useTooltipTrigger\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add tooltip\",\n    npm: \"npm install @nextui-org/tooltip\",\n    yarn: \"yarn add @nextui-org/tooltip\",\n    pnpm: \"pnpm add @nextui-org/tooltip\",\n    bun: \"bun add @nextui-org/tooltip\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Tooltip} from \"@nextui-org/react\";',\n    individual: 'import {Tooltip} from \"@nextui-org/tooltip\";',\n  }}\n/>\n\n> For individual installation, please note that you should add `./node_modules/@nextui-org/theme/dist/components/popover.js` to your `tailwind.config.js` file instead since tooltip reuses popover styles.\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={tooltipContent.usage} />\n\n### With Arrow\n\n<CodeDemo title=\"With Arrow\" files={tooltipContent.arrow} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={tooltipContent.colors} />\n\n### Placements\n\n<CodeDemo title=\"Placements\" files={tooltipContent.placements} />\n\n### Offset\n\n<CodeDemo title=\"Offset\" files={tooltipContent.offset} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled\" files={tooltipContent.controlled} />\n\n### With Delay\n\nYou can control the `open` and `close` delay of the tooltip with `delay` and `closeDelay` props.\n\n<CodeDemo title=\"With Delay\" files={tooltipContent.delay} />\n\nHovering over the second button shows the tooltip immediately. If you wait for a delay before hovering\nanother element, the delay restarts.\n\n<CodeDemo title=\"With Delay Multiple\" files={tooltipContent.delayMultiple} />\n\n### Custom Content\n\n<CodeDemo title=\"Custom Content\" files={tooltipContent.customContent} />\n\n### Custom Motion\n\nTooltip offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n<CodeDemo title=\"Custom Motion\" files={tooltipContent.customMotion} />\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n## Slots\n\n- **base**: The main tooltip slot, it wraps the tooltip content.\n- **arrow**: The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. `data-[placement=top]:...`.\n\n### Custom Styles\n\nYou can customize the `Tooltip` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={tooltipContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Tooltip` has the following attributes on the `base` element:\n\n- **data-open**:\n  When the tooltip is open. Based on tooltip state.\n- **data-placement**:\n  The placement of the tooltip. Based on `placement` prop. The arrow element is positioned based on this attribute.\n- **data-disabled**:\n  When the tooltip is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Keyboard focus management and cross browser normalization.\n- Hover management and cross browser normalization.\n- Labeling support for screen readers (aria-describedby).\n- Exposed as a tooltip to assistive technology via ARIA.\n- Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.\n\n<Spacer y={4} />\n\n## API\n\n### Tooltip Props\n\n| Attribute                 | Type                                                                        | Description                                                                                                  | Default         |\n| ------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ | --------------- |\n| children\\*                | `ReactNode[]`                                                               | The children to render. Usually a trigger element.                                                           | -               |\n| content                   | `ReactNode`                                                                 | The content to render inside the tooltip.                                                                    | -               |\n| size                      | `sm` \\| `md` \\| `lg`                                                        | The tooltip size. This change the `content` font size.                                                       | `md`            |\n| color                     | `default` \\| `primary` \\| `secondary` \\| `success` \\| `warning` \\| `danger` | The tooltip color theme.                                                                                     | `default`       |\n| radius                    | `none` \\| `sm` \\| `md` \\| `lg` \\| `full`                                    | The tooltip border radius.                                                                                   | `md`            |\n| shadow                    | `none` \\| `sm` \\| `md` \\| `lg`                                              | The tooltip shadow.                                                                                          | `sm`            |\n| placement                 | [TooltipPlacement](#tooltip-placement)                                      | The placement of the tooltip relative to its trigger reference.                                              | `top`           |\n| delay                     | `number`                                                                    | The delay in milliseconds before the tooltip opens.                                                          | `0`           |\n| closeDelay                | `number`                                                                    | The delay in milliseconds before the tooltip closes.                                                         | `500`             |\n| isOpen                    | `boolean`                                                                   | Whether the tooltip is open by default (controlled).                                                         | -               |\n| defaultOpen               | `boolean`                                                                   | Whether the tooltip is open by default (uncontrolled).                                                       | -               |\n| offset(px)                | `number`                                                                    | The distance or margin between the reference and popper. It is used internally to create an offset modifier. | `7`             |\n| containerPadding(px)      | `number`                                                                    | The placement padding that should be applied between the element and its surrounding container.              | `12`            |\n| crossOffset(px)           | `number`                                                                    | The additional offset applied along the cross axis between the element and its anchor element.               | `0`             |\n| showArrow                 | `boolean`                                                                   | Whether the tooltip should have an arrow.                                                                    | `false`         |\n| shouldFlip                | `boolean`                                                                   | Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.      | `true`          |\n| triggerScaleOnOpen        | `boolean`                                                                   | Whether the trigger should scale down when the tooltip is open.                                              | `true`          |\n| shouldBlockScroll         | `boolean`                                                                   | Whether to block scrolling outside the tooltip.                                                              | `true`          |\n| isKeyboardDismissDisabled | `boolean`                                                                   | Whether pressing the escape key to close the tooltip should be disabled.                                     | `false`         |\n| isDismissable             | `boolean`                                                                   | Whether to close the overlay when the user interacts outside it.                                             | `false`         |\n| shouldCloseOnBlur         | `boolean`                                                                   | Whether the tooltip should close when focus is lost or moves outside it.                                     | `true`          |\n| motionProps               | [MotionProps](#motion-props)                                                | The props to modify the framer motion animation. Use the `variants` API to create your own animation.        | -               |\n| portalContainer           | `HTMLElement`                                                               | The container element in which the overlay portal will be placed.                                            | `document.body` |\n| updatePositionDeps        | `any[]`                                                                     | The dependencies to force the tooltip position update.                                                       | `[]`            |\n| isDisabled                | `boolean`                                                                   | Whether the tooltip is disabled.                                                                             | `false`         |\n| disableAnimation          | `boolean`                                                                   | Whether the tooltip is animated.                                                                             | `false`         |\n| classNames                | `Record<\"base\"｜\"content\", string>`                                           | Allows to set custom class names for the tooltip slots.                                                      | -               |\n\n<Spacer y={1} />\n\n### Tooltip Events\n\n| Attribute                    | Type                        | Description                                                                                                                                                                                                                                                                                               |\n| ---------------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the tooltip's open state changes.                                                                                                                                                                                                                                             |\n| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref. |\n| onClose                      | `() => void`                | Handler that is called when the tooltip should close.                                                                                                                                                                                                                                                     |\n\n<Spacer y={2} />\n\n### Tooltip types\n\n<Spacer y={1} />\n\n#### Tooltip Placement\n\n```ts\ntype TooltipPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n```\n\n#### Motion Props\n\n```ts\nexport type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n```\n",
    "code": "var Component=(()=>{var M=Object.create;var a=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var P=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports),k=(o,t)=>{for(var r in t)a(o,r,{get:t[r],enumerable:!0})},p=(o,t,r,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let l of j(t))!N.call(o,l)&&l!==r&&a(o,l,{get:()=>t[l],enumerable:!(n=W(t,l))||n.enumerable});return o};var H=(o,t,r)=>(r=o!=null?M(I(o)):{},p(t||!o||!o.__esModule?a(r,\"default\",{value:o,enumerable:!0}):r,o)),S=o=>p(a({},\"__esModule\",{value:!0}),o);var u=P((ce,m)=>{m.exports=_jsx_runtime});var le={};k(le,{default:()=>O,frontmatter:()=>re});var e=H(u());var z=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Tooltip content=\"I am a tooltip\">\n      <Button>Hover me</Button>\n    </Tooltip>\n  );\n}`,_={\"/App.jsx\":z},f={..._};var L=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Tooltip showArrow={true} content=\"I am a tooltip\">\n      <Button>Hover me</Button>\n    </Tooltip>\n  );\n}`,E={\"/App.jsx\":L},g={...E};var R=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const colors = [\n    \"default\",\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"foreground\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {colors.map((color) => {\n        return (\n          <Tooltip key={color} color={color} content={color} className=\"capitalize\">\n            <Button variant=\"flat\" color={color} className=\"capitalize\">\n              {color}\n            </Button>\n          </Tooltip>\n        )\n      })}\n    </div>\n  );\n}`,q={\"/App.jsx\":R},b={...q};var F=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip content=\"Tooltip 1\" color=\"success\">\n        <Button color=\"success\" variant=\"faded\">\n          Default offset (7)\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"Tooltip 2\" color=\"success\" offset={15}>\n        <Button color=\"success\" variant=\"faded\">\n          15 offset\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"Tooltip 3\" color=\"success\" offset={-7}>\n        <Button color=\"success\" variant=\"faded\">\n          -7 offset\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}`,U={\"/App.jsx\":F},y={...U};var K=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const placements = [\n    \"top-start\",\n    \"top\",\n    \"top-end\",\n    \"bottom-start\",\n    \"bottom\",\n    \"bottom-end\",\n    \"left-start\",\n    \"left\",\n    \"left-end\",\n    \"right-start\",\n    \"right\",\n    \"right-end\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap md:inline-grid md:grid-cols-3 gap-4\">\n      {placements.map((placement) => (\n        <Tooltip\n          key={placement}\n          placement={placement}\n          content={placement}\n          color=\"secondary\"\n        >\n          <Button variant=\"flat\" color=\"secondary\" className=\"capitalize\">\n            {placement}\n          </Button>\n        </Tooltip>\n      ))}\n    </div>\n  );\n}`,X={\"/App.jsx\":K},T={...X};var Y=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Tooltip\n        isOpen={isOpen}\n        onOpenChange={(open) => setIsOpen(open)}\n        content=\"I am a tooltip\"\n      >\n        <Button>Hover me</Button>\n      </Tooltip>\n      <p className=\"text-small text-default-500\">\n        Open: {isOpen ? \"true\" : \"false\"}\n      </p>\n    </div>\n  );\n}`,G={\"/App.jsx\":Y},x={...G};var J=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip color=\"warning\" content=\"Tooltip 1\" delay={1000}>\n        <Button color=\"warning\" variant=\"flat\">\n          Delay Open (1000ms)\n        </Button>\n      </Tooltip>\n      <Tooltip color=\"warning\" closeDelay={2000} content=\"Tooltip 2\">\n        <Button color=\"warning\" variant=\"flat\">\n          Delay Close (2000ms)\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}`,Q={\"/App.jsx\":J},w={...Q};var V=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip color=\"primary\" content=\"Tooltip 1\" delay={1000}>\n        <Button color=\"primary\" variant=\"flat\">\n          Hover me (delay 1000ms)\n        </Button>\n      </Tooltip>\n      <Tooltip color=\"primary\" content=\"Tooltip 2\">\n        <Button color=\"primary\" variant=\"flat\">\n          Then hover me\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}`,Z={\"/App.jsx\":V},v={...Z};var $=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Tooltip\n      content={\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Custom Content</div>\n          <div className=\"text-tiny\">This is a custom tooltip content</div>\n        </div>\n      }\n    >\n      <Button variant=\"bordered\">\n        Hover me\n      </Button>\n    </Tooltip>\n  );\n}`,ee={\"/App.jsx\":$},A={...ee};var te=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Tooltip \n      content=\"I am a tooltip\"\n      delay={0}\n      closeDelay={0}\n      motionProps={{\n        variants: {\n          exit: {\n            opacity: 0,\n            transition: {\n              duration: 0.1,\n              ease: \"easeIn\",\n            }\n          },\n          enter: {\n            opacity: 1,\n            transition: {\n              duration: 0.15,\n              ease: \"easeOut\",\n            }\n          },\n        },\n      }}\n    >\n      <Button variant=\"flat\">Hover me</Button>\n    </Tooltip>\n  );\n}`,oe={\"/App.jsx\":te},B={...oe};var ne=`import {Tooltip, Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Tooltip \n      showArrow\n      placement=\"right\"\n      content=\"I am a tooltip\"\n      classNames={{\n        base: [\n          // arrow color\n          \"before:bg-neutral-400 dark:before:bg-white\",\n        ],\n        content: [\n          \"py-2 px-4 shadow-xl\",\n          \"text-black bg-gradient-to-br from-white to-neutral-400\",\n        ],\n      }}\n    >\n      <Button variant=\"flat\">Hover me</Button>\n    </Tooltip>\n  );\n}`,ie={\"/App.jsx\":ne},C={...ie};var i={usage:f,arrow:g,colors:b,offset:y,placements:T,controlled:x,delay:w,delayMultiple:v,customContent:A,customMotion:B,customStyles:C};var re={title:\"Tooltip\",description:\"Tooltips display a brief, informative message that appears when a user interacts with an element.\"};function D(o){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...o.components},{CarbonAd:r,CodeDemo:n,ComponentLinks:l,ImportTabs:h,PackageManagers:s,Spacer:d}=t;return r||c(\"CarbonAd\",!0),n||c(\"CodeDemo\",!0),l||c(\"ComponentLinks\",!0),h||c(\"ImportTabs\",!0),s||c(\"PackageManagers\",!0),d||c(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"tooltip\",children:\"Tooltip\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tooltips display a brief, informative message that appears when a user interacts with an element.\"}),`\n`,(0,e.jsx)(l,{component:\"tooltip\",styles:\"popover\",reactAriaHook:\"useTooltipTrigger\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(r,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(s,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add tooltip\",npm:\"npm install @nextui-org/tooltip\",yarn:\"yarn add @nextui-org/tooltip\",pnpm:\"pnpm add @nextui-org/tooltip\",bun:\"bun add @nextui-org/tooltip\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(h,{commands:{main:'import {Tooltip} from \"@nextui-org/react\";',individual:'import {Tooltip} from \"@nextui-org/tooltip\";'}}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"For individual installation, please note that you should add \",(0,e.jsx)(t.code,{children:\"./node_modules/@nextui-org/theme/dist/components/popover.js\"}),\" to your \",(0,e.jsx)(t.code,{children:\"tailwind.config.js\"}),\" file instead since tooltip reuses popover styles.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n,{title:\"Usage\",files:i.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"with-arrow\",children:\"With Arrow\"}),`\n`,(0,e.jsx)(n,{title:\"With Arrow\",files:i.arrow}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(n,{title:\"Colors\",files:i.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"placements\",children:\"Placements\"}),`\n`,(0,e.jsx)(n,{title:\"Placements\",files:i.placements}),`\n`,(0,e.jsx)(t.h3,{id:\"offset\",children:\"Offset\"}),`\n`,(0,e.jsx)(n,{title:\"Offset\",files:i.offset}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(n,{title:\"Controlled\",files:i.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"with-delay\",children:\"With Delay\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can control the \",(0,e.jsx)(t.code,{children:\"open\"}),\" and \",(0,e.jsx)(t.code,{children:\"close\"}),\" delay of the tooltip with \",(0,e.jsx)(t.code,{children:\"delay\"}),\" and \",(0,e.jsx)(t.code,{children:\"closeDelay\"}),\" props.\"]}),`\n`,(0,e.jsx)(n,{title:\"With Delay\",files:i.delay}),`\n`,(0,e.jsx)(t.p,{children:`Hovering over the second button shows the tooltip immediately. If you wait for a delay before hovering\nanother element, the delay restarts.`}),`\n`,(0,e.jsx)(n,{title:\"With Delay Multiple\",files:i.delayMultiple}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-content\",children:\"Custom Content\"}),`\n`,(0,e.jsx)(n,{title:\"Custom Content\",files:i.customContent}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-motion\",children:\"Custom Motion\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Tooltip offers a \",(0,e.jsx)(t.code,{children:\"motionProps\"}),\" property to customize the \",(0,e.jsx)(t.code,{children:\"enter\"}),\" / \",(0,e.jsx)(t.code,{children:\"exit\"}),\" animation.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Motion\",files:i.customMotion}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"Learn more about Framer motion variants \",(0,e.jsx)(t.a,{href:\"https://www.framer.com/motion/animation/#variants\",children:\"here\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": The main tooltip slot, it wraps the tooltip content.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"arrow\"}),\": The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. \",(0,e.jsx)(t.code,{children:\"data-[placement=top]:...\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"Tooltip\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Styles\",files:i.customStyles}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Tooltip\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nWhen the tooltip is open. Based on tooltip state.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-placement\"}),`:\nThe placement of the tooltip. Based on `,(0,e.jsx)(t.code,{children:\"placement\"}),\" prop. The arrow element is positioned based on this attribute.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the tooltip is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Hover management and cross browser normalization.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Labeling support for screen readers (aria-describedby).\"}),`\n`,(0,e.jsx)(t.li,{children:\"Exposed as a tooltip to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.\"}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"tooltip-props\",children:\"Tooltip Props\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"}),(0,e.jsx)(t.th,{children:\"Default\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"children*\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode[]\"})}),(0,e.jsx)(t.td,{children:\"The children to render. Usually a trigger element.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"content\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"ReactNode\"})}),(0,e.jsx)(t.td,{children:\"The content to render inside the tooltip.\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"size\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsxs)(t.td,{children:[\"The tooltip size. This change the \",(0,e.jsx)(t.code,{children:\"content\"}),\" font size.\"]}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"color\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"default\"}),\" | \",(0,e.jsx)(t.code,{children:\"primary\"}),\" | \",(0,e.jsx)(t.code,{children:\"secondary\"}),\" | \",(0,e.jsx)(t.code,{children:\"success\"}),\" | \",(0,e.jsx)(t.code,{children:\"warning\"}),\" | \",(0,e.jsx)(t.code,{children:\"danger\"})]}),(0,e.jsx)(t.td,{children:\"The tooltip color theme.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"default\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"radius\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"}),\" | \",(0,e.jsx)(t.code,{children:\"full\"})]}),(0,e.jsx)(t.td,{children:\"The tooltip border radius.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"md\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shadow\"}),(0,e.jsxs)(t.td,{children:[(0,e.jsx)(t.code,{children:\"none\"}),\" | \",(0,e.jsx)(t.code,{children:\"sm\"}),\" | \",(0,e.jsx)(t.code,{children:\"md\"}),\" | \",(0,e.jsx)(t.code,{children:\"lg\"})]}),(0,e.jsx)(t.td,{children:\"The tooltip shadow.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"sm\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"placement\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"#tooltip-placement\",children:\"TooltipPlacement\"})}),(0,e.jsx)(t.td,{children:\"The placement of the tooltip relative to its trigger reference.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"top\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"delay\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The delay in milliseconds before the tooltip opens.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"0\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"closeDelay\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The delay in milliseconds before the tooltip closes.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"500\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip is open by default (controlled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"defaultOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip is open by default (uncontrolled).\"}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"offset(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The distance or margin between the reference and popper. It is used internally to create an offset modifier.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"7\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"containerPadding(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The placement padding that should be applied between the element and its surrounding container.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"12\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"crossOffset(px)\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"number\"})}),(0,e.jsx)(t.td,{children:\"The additional offset applied along the cross axis between the element and its anchor element.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"0\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"showArrow\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip should have an arrow.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldFlip\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"triggerScaleOnOpen\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the trigger should scale down when the tooltip is open.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldBlockScroll\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to block scrolling outside the tooltip.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isKeyboardDismissDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether pressing the escape key to close the tooltip should be disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDismissable\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether to close the overlay when the user interacts outside it.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnBlur\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip should close when focus is lost or moves outside it.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"true\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"motionProps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.a,{href:\"#motion-props\",children:\"MotionProps\"})}),(0,e.jsxs)(t.td,{children:[\"The props to modify the framer motion animation. Use the \",(0,e.jsx)(t.code,{children:\"variants\"}),\" API to create your own animation.\"]}),(0,e.jsx)(t.td,{children:\"-\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"portalContainer\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"HTMLElement\"})}),(0,e.jsx)(t.td,{children:\"The container element in which the overlay portal will be placed.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"document.body\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"updatePositionDeps\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"any[]\"})}),(0,e.jsx)(t.td,{children:\"The dependencies to force the tooltip position update.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"[]\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"isDisabled\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip is disabled.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"disableAnimation\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"boolean\"})}),(0,e.jsx)(t.td,{children:\"Whether the tooltip is animated.\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"false\"})})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"classNames\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:'Record<\"base\"\\uFF5C\"content\", string>'})}),(0,e.jsx)(t.td,{children:\"Allows to set custom class names for the tooltip slots.\"}),(0,e.jsx)(t.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(d,{y:1}),`\n`,(0,e.jsx)(t.h3,{id:\"tooltip-events\",children:\"Tooltip Events\"}),`\n`,(0,e.jsxs)(t.table,{children:[(0,e.jsx)(t.thead,{children:(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.th,{children:\"Attribute\"}),(0,e.jsx)(t.th,{children:\"Type\"}),(0,e.jsx)(t.th,{children:\"Description\"})]})}),(0,e.jsxs)(t.tbody,{children:[(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onOpenChange\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(isOpen: boolean) => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the tooltip's open state changes.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"shouldCloseOnInteractOutside\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"(e: HTMLElement) => void\"})}),(0,e.jsx)(t.td,{children:\"When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref.\"})]}),(0,e.jsxs)(t.tr,{children:[(0,e.jsx)(t.td,{children:\"onClose\"}),(0,e.jsx)(t.td,{children:(0,e.jsx)(t.code,{children:\"() => void\"})}),(0,e.jsx)(t.td,{children:\"Handler that is called when the tooltip should close.\"})]})]})]}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(t.h3,{id:\"tooltip-types\",children:\"Tooltip types\"}),`\n`,(0,e.jsx)(d,{y:1}),`\n`,(0,e.jsx)(t.h4,{id:\"tooltip-placement\",children:\"Tooltip Placement\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`type TooltipPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n`})}),`\n`,(0,e.jsx)(t.h4,{id:\"motion-props\",children:\"Motion Props\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`export type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n`})})]})}function O(o={}){let{wrapper:t}=o.components||{};return t?(0,e.jsx)(t,{...o,children:(0,e.jsx)(D,{...o})}):D(o)}function c(o,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return S(le);})();\n;return Component;"
  },
  "_id": "docs/components/tooltip.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/tooltip.mdx",
    "sourceFileName": "tooltip.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/tooltip"
  },
  "type": "Doc",
  "slug": "/docs/components/tooltip",
  "slugAsParams": "components/tooltip",
  "url": "/docs/components/tooltip"
}