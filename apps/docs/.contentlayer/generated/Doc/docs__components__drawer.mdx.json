{
  "title": "Drawer",
  "description": "Display a panel that slides in from the edge of the screen, containing supplementary content.",
  "body": {
    "raw": "\nimport {drawerContent} from \"@/content/components/drawer\";\n\n# Drawer\n\nDisplays a panel that slides in from the edge of the screen, containing supplementary content.\n\n<ComponentLinks component=\"drawer\" reactAriaHook=\"useModal\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx nextui-cli@latest add drawer\",\n    npm: \"npm install @nextui-org/drawer\",\n    yarn: \"yarn add @nextui-org/drawer\",\n    pnpm: \"pnpm add @nextui-org/drawer\",\n    bun: \"bun add @nextui-org/drawer\"\n  }}\n/>\n\n## Import\n\nNextUI exports 5 drawer-related components:\n\n- **Drawer**: The main component to display a drawer.\n- **DrawerContent**: The wrapper of the other drawer components.\n- **DrawerHeader**: The header of the drawer.\n- **DrawerBody**: The body of the drawer.\n- **DrawerFooter**: The footer of the drawer.\n\n<ImportTabs\n  commands={{\n    main: `import {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter\n} from \"@nextui-org/react\";`,\n    individual:\n      `import {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter\n} from \"@nextui-org/drawer\";`,\n  }}\n/>\n\n## Usage\n\nWhen the drawer opens:\n\n- Focus is bounded within the drawer and set to the first tabbable element.\n- Content behind a drawer is inert, meaning that users cannot interact with it.\n\n<CodeDemo title=\"Usage\" files={drawerContent.usage} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={drawerContent.sizes} />\n\n### Non-dismissible\n\nBy default, the drawer can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.\nYou can disable this behavior by setting the following properties:\n\n- Set the `isDismissable` property to `false` to prevent the drawer from closing when clicking on the overlay.\n- Set the `isKeyboardDismissDisabled` property to `true` to prevent the drawer from closing when pressing the Esc key.\n\n<CodeDemo title=\"Non-dissmissible\" files={drawerContent.nonDismissable} />\n\n### Drawer placement\n\nThe drawer can be placed on any edge of the screen using the `placement` prop:\n- `left` (default)\n- `right`\n- `top`\n- `bottom`\n\n<CodeDemo title=\"Placement\" files={drawerContent.placement} />\n\n### With Form\n\nThe `Drawer` handles the focus within the drawer content. It means that you can use the drawer with\nform elements without any problem. The focus returns to the trigger when the drawer closes.\n\n<CodeDemo title=\"With Form\" files={drawerContent.form} />\n\n> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the drawer opens.\n\n### Backdrop\n\nThe `Drawer` component has a `backdrop` prop to show a backdrop behind the drawer. The backdrop can be\neither `transparent`, `opaque` or `blur`. The default value is `opaque`.\n\n<CodeDemo title=\"Backdrop\" files={drawerContent.backdrop} />\n\n### Custom Motion\n\nDrawer offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n<CodeDemo title=\"Custom Motion\" files={drawerContent.customMotion} />\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n## Slots\n\n- **wrapper**: The wrapper slot of the drawer. It wraps the `base` and the `backdrop` slots.\n- **base**: The main slot of the drawer content.\n- **backdrop**: The backdrop slot, it is displayed behind the drawer.\n- **header**: The header of the drawer, it is displayed at the top of the drawer.\n- **body**: The body of the drawer, it is displayed in the middle of the drawer.\n- **footer**: The footer of the drawer, it is displayed at the bottom of the drawer.\n- **closeButton**: The close button of the drawer.\n\n## Data Attributes\n\n`Drawer` has the following attributes on the `base` element:\n\n- **data-open**:\n  When the drawer is open. Based on drawer state.\n- **data-dismissable**:\n  When the drawer is dismissable. Based on `isDismissable` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Content outside the drawer is hidden from assistive technologies while it is open.\n- The drawer optionally closes when interacting outside, or pressing the <Kbd>Esc</Kbd> key.\n- Focus is moved into the drawer on mount, and restored to the trigger element on unmount.\n- While open, focus is contained within the drawer, preventing the user from tabbing outside.\n- Scrolling the page behind the drawer is prevented while it is open, including in mobile browsers.\n\n<Spacer y={4} />\n\n## API\n\n### Drawer Props\n\n| Attribute                 | Type                                                                                                | Description                                                                                           | Default         |\n| ------------------------- | --------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | --------------- |\n| children\\*                | `ReactNode`                                                                                         | The content of the drawer. It's usually the `DrawerContent`.                                          | -               |\n| size                      | `xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `2xl` \\| `3xl` \\| `4xl` \\| `5xl` \\| `full`                  | The drawer size.                                                                                       | `md`            |\n| radius                    | `none` \\| `sm` \\| `md` \\| `lg`                                                                      | The drawer border radius.                                                                              | `lg`            |\n| placement                 | `left` \\| `right` \\| `top` \\| `bottom`                                                              | The drawer position.                                                                                   | `right`         |\n| isOpen                    | `boolean`                                                                                           | Whether the drawer is open by default (controlled).                                                    | -               |\n| defaultOpen               | `boolean`                                                                                           | Whether the drawer is open by default (uncontrolled).                                                  | -               |\n| isDismissable             | `boolean`                                                                                           | Whether the drawer can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.        | `true`          |\n| isKeyboardDismissDisabled | `boolean`                                                                                           | Whether pressing the <Kbd>Esc</Kbd> key to close the drawer should be disabled.                        | `false`         |\n| shouldBlockScroll         | `boolean`                                                                                           | Whether the drawer should block the scroll of the page on open.                                        | `true`          |\n| hideCloseButton           | `boolean`                                                                                           | Whether to hide the drawer close button.                                                               | `false`         |\n| closeButton               | `ReactNode`                                                                                         | Custom close button to display on top right corner.                                                   | -               |\n| motionProps               | [MotionProps](#motion-props)                                                                        | The props to modify the framer motion animation. Use the `variants` API to create your own animation. |                 |\n| portalContainer           | `HTMLElement`                                                                                       | The container element in which the overlay portal will be placed.                                     | `document.body` |\n| disableAnimation          | `boolean`                                                                                           | Whether the drawer should not have animations.                                                         | `false`         |\n| classNames                | `Record<\"wrapper\"｜ \"base\"｜ \"backdrop\"｜ \"header\" ｜ \"body\" ｜ \"footer\" ｜ \"closeButton\", string>` | Allows to set custom class names for the drawer slots.                                                 | -               |\n\n### Drawer Events\n\n| Attribute    | Type                        | Description                                                 |\n| ------------ | --------------------------- | ----------------------------------------------------------- |\n| onOpenChange | `(isOpen: boolean) => void` | Handler that is called when the drawer's open state changes. |\n| onClose      | `() => void`                | Handler that is called when the drawer is closed.            |\n\n<Spacer y={4} />\n\n### Drawer types\n\n#### Motion Props\n\n```ts\nexport type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n```\n",
    "code": "var Component=(()=>{var v=Object.create;var c=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var I=(n,r)=>()=>(r||n((r={exports:{}}).exports,r),r.exports),A=(n,r)=>{for(var t in r)c(n,t,{get:r[t],enumerable:!0})},u=(n,r,t,o)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let i of M(r))!P.call(n,i)&&i!==t&&c(n,i,{get:()=>r[i],enumerable:!(o=O(r,i))||o.enumerable});return n};var H=(n,r,t)=>(t=n!=null?v(L(n)):{},u(r||!n||!n.__esModule?c(t,\"default\",{value:n,enumerable:!0}):t,n)),F=n=>u(c({},\"__esModule\",{value:!0}),n);var w=I((re,m)=>{m.exports=_jsx_runtime});var $={};A($,{default:()=>k,frontmatter:()=>Q});var e=H(w());var N=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure} from \"@nextui-org/react\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n\n  return (\n    <>\n      <Button onPress={onOpen}>Open Drawer</Button>\n      <Drawer isOpen={isOpen} onOpenChange={onOpenChange}>\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Drawer Title</DrawerHeader>\n              <DrawerBody>\n                <p> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n                <p>\n                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit\n                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. \n                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. \n                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur \n                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.\n                </p>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Action\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,T={\"/App.jsx\":N},f={...T};var q=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure} from \"@nextui-org/react\";\n\nexport default function App() {\n  const {isOpen, onOpen, onClose} = useDisclosure();\n  const [size, setSize] = React.useState('md')\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\", \"4xl\", \"5xl\", \"full\"];\n\n  const handleOpen = (size) => {\n    setSize(size)\n    onOpen();\n  }\n\n  return (\n    <>\n      <div className=\"flex flex-wrap gap-3\">\n        {sizes.map((size) => (\n          <Button key={size} onPress={() => handleOpen(size)}>Open {size}</Button>\n        ))}  \n      </div>\n      <Drawer \n        size={size} \n        isOpen={isOpen} \n        onClose={onClose}\n      >\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Drawer Title</DrawerHeader>\n              <DrawerBody>\n                <p> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n                <p>\n                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit\n                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. \n                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. \n                </p>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Action\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,z={\"/App.jsx\":q},D={...z};var V=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure} from \"@nextui-org/react\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n\n  return (\n    <>\n      <Button onPress={onOpen}>Open Drawer</Button>\n      <Drawer \n        isOpen={isOpen} \n        onOpenChange={onOpenChange}\n        isDismissable={false}\n        isKeyboardDismissDisabled={true}\n      >\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Non Dismissable Drawer</DrawerHeader>\n              <DrawerBody>\n                <p>\n                  Click the close button or action button to close the drawer.\n                  Clicking outside or pressing the escape key won't close it.\n                </p>\n                <p> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Action\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,j={\"/App.jsx\":V},C={...j};var E=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure} from \"@nextui-org/react\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n  const [placement, setPlacement] = React.useState(\"left\")\n\n  const handleOpen = (placement) => {\n    setPlacement(placement)\n    onOpen();\n  }\n\n  return (\n    <>\n      <div className=\"flex flex-wrap gap-3\">\n        {[\"left\", \"right\", \"top\", \"bottom\"].map((placement) => (\n          <Button \n            key={placement} \n            onPress={() => handleOpen(placement)}\n            className=\"capitalize\"\n          >\n            Open {placement}\n          </Button>\n        ))}\n      </div>\n      <Drawer \n        placement={placement}\n        isOpen={isOpen} \n        onOpenChange={onOpenChange}\n      >\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Drawer Title</DrawerHeader>\n              <DrawerBody>\n                <p> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n                <p>\n                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit\n                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. \n                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. \n                </p>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Action\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,S={\"/App.jsx\":E},g={...S};var W=`export const MailIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M17 3.5H7C4 3.5 2 5 2 8.5V15.5C2 19 4 20.5 7 20.5H17C20 20.5 22 19 22 15.5V8.5C22 5 20 3.5 17 3.5ZM17.47 9.59L14.34 12.09C13.68 12.62 12.84 12.88 12 12.88C11.16 12.88 10.31 12.62 9.66 12.09L6.53 9.59C6.21 9.33 6.16 8.85 6.41 8.53C6.67 8.21 7.14 8.15 7.46 8.41L10.59 10.91C11.35 11.52 12.64 11.52 13.4 10.91L16.53 8.41C16.85 8.15 17.33 8.2 17.58 8.53C17.84 8.85 17.79 9.33 17.47 9.59Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n`,Z=`export const LockIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M12.0011 17.3498C12.9013 17.3498 13.6311 16.6201 13.6311 15.7198C13.6311 14.8196 12.9013 14.0898 12.0011 14.0898C11.1009 14.0898 10.3711 14.8196 10.3711 15.7198C10.3711 16.6201 11.1009 17.3498 12.0011 17.3498Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M18.28 9.53V8.28C18.28 5.58 17.63 2 12 2C6.37 2 5.72 5.58 5.72 8.28V9.53C2.92 9.88 2 11.3 2 14.79V16.65C2 20.75 3.25 22 7.35 22H16.65C20.75 22 22 20.75 22 16.65V14.79C22 11.3 21.08 9.88 18.28 9.53ZM12 18.74C10.33 18.74 8.98 17.38 8.98 15.72C8.98 14.05 10.34 12.7 12 12.7C13.66 12.7 15.02 14.06 15.02 15.72C15.02 17.39 13.67 18.74 12 18.74ZM7.35 9.44C7.27 9.44 7.2 9.44 7.12 9.44V8.28C7.12 5.35 7.95 3.4 12 3.4C16.05 3.4 16.88 5.35 16.88 8.28V9.45C16.8 9.45 16.73 9.45 16.65 9.45H7.35V9.44Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);`,R=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure, Input, Checkbox, Link} from \"@nextui-org/react\";\nimport {MailIcon} from \"./MailIcon\";\nimport {LockIcon} from \"./LockIcon\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n\n  return (\n    <>\n      <Button onPress={onOpen} color=\"warning\" variant=\"flat\">\n        Open Drawer\n      </Button>\n      <Drawer isOpen={isOpen} onOpenChange={onOpenChange}>\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Log in</DrawerHeader>\n              <DrawerBody>\n                <Input\n                  autoFocus\n                  endContent={\n                    <MailIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n                  }\n                  label=\"Email\"\n                  placeholder=\"Enter your email\"\n                  variant=\"bordered\"\n                />\n                <Input\n                  endContent={\n                    <LockIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n                  }\n                  label=\"Password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  variant=\"bordered\"\n                />\n                <div className=\"flex py-2 px-1 justify-between\">\n                  <Checkbox\n                    classNames={{\n                      label: \"text-small\",\n                    }}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <Link color=\"primary\" href=\"#\" size=\"sm\">\n                    Forgot password?\n                  </Link>\n                </div>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"flat\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Sign in\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,_={\"/App.jsx\":R,\"/MailIcon.jsx\":W,\"/LockIcon.jsx\":Z},b={..._};var K=`export const MailIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M17 3.5H7C4 3.5 2 5 2 8.5V15.5C2 19 4 20.5 7 20.5H17C20 20.5 22 19 22 15.5V8.5C22 5 20 3.5 17 3.5ZM17.47 9.59L14.34 12.09C13.68 12.62 12.84 12.88 12 12.88C11.16 12.88 10.31 12.62 9.66 12.09L6.53 9.59C6.21 9.33 6.16 8.85 6.41 8.53C6.67 8.21 7.14 8.15 7.46 8.41L10.59 10.91C11.35 11.52 12.64 11.52 13.4 10.91L16.53 8.41C16.85 8.15 17.33 8.2 17.58 8.53C17.84 8.85 17.79 9.33 17.47 9.59Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);`,U=`export const LockIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M12.0011 17.3498C12.9013 17.3498 13.6311 16.6201 13.6311 15.7198C13.6311 14.8196 12.9013 14.0898 12.0011 14.0898C11.1009 14.0898 10.3711 14.8196 10.3711 15.7198C10.3711 16.6201 11.1009 17.3498 12.0011 17.3498Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M18.28 9.53V8.28C18.28 5.58 17.63 2 12 2C6.37 2 5.72 5.58 5.72 8.28V9.53C2.92 9.88 2 11.3 2 14.79V16.65C2 20.75 3.25 22 7.35 22H16.65C20.75 22 22 20.75 22 16.65V14.79C22 11.3 21.08 9.88 18.28 9.53ZM12 18.74C10.33 18.74 8.98 17.38 8.98 15.72C8.98 14.05 10.34 12.7 12 12.7C13.66 12.7 15.02 14.06 15.02 15.72C15.02 17.39 13.67 18.74 12 18.74ZM7.35 9.44C7.27 9.44 7.2 9.44 7.12 9.44V8.28C7.12 5.35 7.95 3.4 12 3.4C16.05 3.4 16.88 5.35 16.88 8.28V9.45C16.8 9.45 16.73 9.45 16.65 9.45H7.35V9.44Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);`,X=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure, Input, Checkbox, Link} from \"@nextui-org/react\";\nimport {MailIcon} from \"./MailIcon\";\nimport {LockIcon} from \"./LockIcon\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n  const [backdrop, setBackdrop] = React.useState(\"opaque\");\n\n  const backdrops = [\"opaque\", \"blur\", \"transparent\"];\n\n  const handleBackdropChange = (backdrop) => {\n    setBackdrop(backdrop);\n    onOpen();\n  };\n\n  return (\n    <>\n      <div className=\"flex gap-2\">\n        {backdrops.map((backdrop) => (\n          <Button\n            key={backdrop}\n            className=\"capitalize\"\n            variant=\"flat\"\n            color=\"primary\"\n            onPress={() => handleBackdropChange(backdrop)}\n          >\n            {backdrop}\n          </Button>\n        ))}\n      </div>\n      <Drawer backdrop={backdrop} isOpen={isOpen} onOpenChange={onOpenChange}>\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Log in</DrawerHeader>\n              <DrawerBody>\n                <Input\n                  autoFocus\n                  endContent={\n                    <MailIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n                  }\n                  label=\"Email\"\n                  placeholder=\"Enter your email\"\n                  variant=\"bordered\"\n                />\n                <Input\n                  endContent={\n                    <LockIcon className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n                  }\n                  label=\"Password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  variant=\"bordered\"\n                />\n                <div className=\"flex py-2 px-1 justify-between\">\n                  <Checkbox\n                    classNames={{\n                      label: \"text-small\",\n                    }}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <Link color=\"primary\" href=\"#\" size=\"sm\">\n                    Forgot password?\n                  </Link>\n                </div>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"flat\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Sign in\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,Y={\"/App.jsx\":X,\"/MailIcon.jsx\":K,\"/LockIcon.jsx\":U},x={...Y};var G=`import {Drawer, DrawerContent, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure} from \"@nextui-org/react\";\n\nexport default function App() {\n  const {isOpen, onOpen, onOpenChange} = useDisclosure();\n\n  return (\n    <>\n      <Button onPress={onOpen}>Open Drawer</Button>\n      <Drawer \n        isOpen={isOpen} \n        onOpenChange={onOpenChange}\n        motionProps={{\n          variants: {\n            enter: {\n              opacity: 1,\n              x: 0,\n              duration: 0.3,\n            },\n            exit: {\n              x: 100,\n              opacity: 0,\n              duration: 0.3,\n            },\n          },\n        }}\n      >\n        <DrawerContent>\n          {(onClose) => (\n            <>\n              <DrawerHeader className=\"flex flex-col gap-1\">Custom Motion Drawer</DrawerHeader>\n              <DrawerBody>\n                <p>\n                  This drawer has custom enter/exit animations.\n                </p>\n                <p> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Nullam pulvinar risus non risus hendrerit venenatis.\n                  Pellentesque sit amet hendrerit risus, sed porttitor quam.\n                </p>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\n                  Close\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Action\n                </Button>\n              </DrawerFooter>\n            </>\n          )}\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}`,J={\"/App.jsx\":G},y={...J};var a={usage:f,sizes:D,nonDismissable:C,placement:g,form:b,backdrop:x,customMotion:y};var Q={title:\"Drawer\",description:\"Display a panel that slides in from the edge of the screen, containing supplementary content.\"};function B(n){let r={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...n.components},{CarbonAd:t,CodeDemo:o,ComponentLinks:i,ImportTabs:h,Kbd:l,PackageManagers:p,Spacer:s}=r;return t||d(\"CarbonAd\",!0),o||d(\"CodeDemo\",!0),i||d(\"ComponentLinks\",!0),h||d(\"ImportTabs\",!0),l||d(\"Kbd\",!0),p||d(\"PackageManagers\",!0),s||d(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.h1,{id:\"drawer\",children:\"Drawer\"}),`\n`,(0,e.jsx)(r.p,{children:\"Displays a panel that slides in from the edge of the screen, containing supplementary content.\"}),`\n`,(0,e.jsx)(i,{component:\"drawer\",reactAriaHook:\"useModal\"}),`\n`,(0,e.jsx)(r.hr,{}),`\n`,(0,e.jsx)(t,{}),`\n`,(0,e.jsx)(r.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(p,{showGlobalInstallWarning:!0,commands:{cli:\"npx nextui-cli@latest add drawer\",npm:\"npm install @nextui-org/drawer\",yarn:\"yarn add @nextui-org/drawer\",pnpm:\"pnpm add @nextui-org/drawer\",bun:\"bun add @nextui-org/drawer\"}}),`\n`,(0,e.jsx)(r.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(r.p,{children:\"NextUI exports 5 drawer-related components:\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Drawer\"}),\": The main component to display a drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"DrawerContent\"}),\": The wrapper of the other drawer components.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"DrawerHeader\"}),\": The header of the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"DrawerBody\"}),\": The body of the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"DrawerFooter\"}),\": The footer of the drawer.\"]}),`\n`]}),`\n`,(0,e.jsx)(h,{commands:{main:`import {\nDrawer,\nDrawerContent,\nDrawerHeader,\nDrawerBody,\nDrawerFooter\n} from \"@nextui-org/react\";`,individual:`import {\nDrawer,\nDrawerContent,\nDrawerHeader,\nDrawerBody,\nDrawerFooter\n} from \"@nextui-org/drawer\";`}}),`\n`,(0,e.jsx)(r.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r.p,{children:\"When the drawer opens:\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsx)(r.li,{children:\"Focus is bounded within the drawer and set to the first tabbable element.\"}),`\n`,(0,e.jsx)(r.li,{children:\"Content behind a drawer is inert, meaning that users cannot interact with it.\"}),`\n`]}),`\n`,(0,e.jsx)(o,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(r.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(o,{title:\"Sizes\",files:a.sizes}),`\n`,(0,e.jsx)(r.h3,{id:\"non-dismissible\",children:\"Non-dismissible\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"By default, the drawer can be closed by clicking on the overlay or pressing the \",(0,e.jsx)(l,{children:\"Esc\"}),` key.\nYou can disable this behavior by setting the following properties:`]}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[\"Set the \",(0,e.jsx)(r.code,{children:\"isDismissable\"}),\" property to \",(0,e.jsx)(r.code,{children:\"false\"}),\" to prevent the drawer from closing when clicking on the overlay.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[\"Set the \",(0,e.jsx)(r.code,{children:\"isKeyboardDismissDisabled\"}),\" property to \",(0,e.jsx)(r.code,{children:\"true\"}),\" to prevent the drawer from closing when pressing the Esc key.\"]}),`\n`]}),`\n`,(0,e.jsx)(o,{title:\"Non-dissmissible\",files:a.nonDismissable}),`\n`,(0,e.jsx)(r.h3,{id:\"drawer-placement\",children:\"Drawer placement\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"The drawer can be placed on any edge of the screen using the \",(0,e.jsx)(r.code,{children:\"placement\"}),\" prop:\"]}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.code,{children:\"left\"}),\" (default)\"]}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.code,{children:\"right\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.code,{children:\"top\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.code,{children:\"bottom\"})}),`\n`]}),`\n`,(0,e.jsx)(o,{title:\"Placement\",files:a.placement}),`\n`,(0,e.jsx)(r.h3,{id:\"with-form\",children:\"With Form\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"The \",(0,e.jsx)(r.code,{children:\"Drawer\"}),` handles the focus within the drawer content. It means that you can use the drawer with\nform elements without any problem. The focus returns to the trigger when the drawer closes.`]}),`\n`,(0,e.jsx)(o,{title:\"With Form\",files:a.form}),`\n`,(0,e.jsxs)(r.blockquote,{children:[`\n`,(0,e.jsxs)(r.p,{children:[(0,e.jsx)(r.strong,{children:\"Note\"}),\": You can add the \",(0,e.jsx)(r.code,{children:\"autoFocus\"}),\" prop to the first \",(0,e.jsx)(r.code,{children:\"Input\"}),\" component to focus it when the drawer opens.\"]}),`\n`]}),`\n`,(0,e.jsx)(r.h3,{id:\"backdrop\",children:\"Backdrop\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"The \",(0,e.jsx)(r.code,{children:\"Drawer\"}),\" component has a \",(0,e.jsx)(r.code,{children:\"backdrop\"}),` prop to show a backdrop behind the drawer. The backdrop can be\neither `,(0,e.jsx)(r.code,{children:\"transparent\"}),\", \",(0,e.jsx)(r.code,{children:\"opaque\"}),\" or \",(0,e.jsx)(r.code,{children:\"blur\"}),\". The default value is \",(0,e.jsx)(r.code,{children:\"opaque\"}),\".\"]}),`\n`,(0,e.jsx)(o,{title:\"Backdrop\",files:a.backdrop}),`\n`,(0,e.jsx)(r.h3,{id:\"custom-motion\",children:\"Custom Motion\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"Drawer offers a \",(0,e.jsx)(r.code,{children:\"motionProps\"}),\" property to customize the \",(0,e.jsx)(r.code,{children:\"enter\"}),\" / \",(0,e.jsx)(r.code,{children:\"exit\"}),\" animation.\"]}),`\n`,(0,e.jsx)(o,{title:\"Custom Motion\",files:a.customMotion}),`\n`,(0,e.jsxs)(r.blockquote,{children:[`\n`,(0,e.jsxs)(r.p,{children:[\"Learn more about Framer motion variants \",(0,e.jsx)(r.a,{href:\"https://www.framer.com/motion/animation/#variants\",children:\"here\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(r.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"wrapper\"}),\": The wrapper slot of the drawer. It wraps the \",(0,e.jsx)(r.code,{children:\"base\"}),\" and the \",(0,e.jsx)(r.code,{children:\"backdrop\"}),\" slots.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"base\"}),\": The main slot of the drawer content.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"backdrop\"}),\": The backdrop slot, it is displayed behind the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"header\"}),\": The header of the drawer, it is displayed at the top of the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"body\"}),\": The body of the drawer, it is displayed in the middle of the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"footer\"}),\": The footer of the drawer, it is displayed at the bottom of the drawer.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"closeButton\"}),\": The close button of the drawer.\"]}),`\n`]}),`\n`,(0,e.jsx)(r.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(r.p,{children:[(0,e.jsx)(r.code,{children:\"Drawer\"}),\" has the following attributes on the \",(0,e.jsx)(r.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"data-open\"}),`:\nWhen the drawer is open. Based on drawer state.`]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"data-dismissable\"}),`:\nWhen the drawer is dismissable. Based on `,(0,e.jsx)(r.code,{children:\"isDismissable\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(r.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsx)(r.li,{children:\"Content outside the drawer is hidden from assistive technologies while it is open.\"}),`\n`,(0,e.jsxs)(r.li,{children:[\"The drawer optionally closes when interacting outside, or pressing the \",(0,e.jsx)(l,{children:\"Esc\"}),\" key.\"]}),`\n`,(0,e.jsx)(r.li,{children:\"Focus is moved into the drawer on mount, and restored to the trigger element on unmount.\"}),`\n`,(0,e.jsx)(r.li,{children:\"While open, focus is contained within the drawer, preventing the user from tabbing outside.\"}),`\n`,(0,e.jsx)(r.li,{children:\"Scrolling the page behind the drawer is prevented while it is open, including in mobile browsers.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(r.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(r.h3,{id:\"drawer-props\",children:\"Drawer Props\"}),`\n`,(0,e.jsxs)(r.table,{children:[(0,e.jsx)(r.thead,{children:(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.th,{children:\"Attribute\"}),(0,e.jsx)(r.th,{children:\"Type\"}),(0,e.jsx)(r.th,{children:\"Description\"}),(0,e.jsx)(r.th,{children:\"Default\"})]})}),(0,e.jsxs)(r.tbody,{children:[(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"children*\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"ReactNode\"})}),(0,e.jsxs)(r.td,{children:[\"The content of the drawer. It's usually the \",(0,e.jsx)(r.code,{children:\"DrawerContent\"}),\".\"]}),(0,e.jsx)(r.td,{children:\"-\"})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"size\"}),(0,e.jsxs)(r.td,{children:[(0,e.jsx)(r.code,{children:\"xs\"}),\" | \",(0,e.jsx)(r.code,{children:\"sm\"}),\" | \",(0,e.jsx)(r.code,{children:\"md\"}),\" | \",(0,e.jsx)(r.code,{children:\"lg\"}),\" | \",(0,e.jsx)(r.code,{children:\"xl\"}),\" | \",(0,e.jsx)(r.code,{children:\"2xl\"}),\" | \",(0,e.jsx)(r.code,{children:\"3xl\"}),\" | \",(0,e.jsx)(r.code,{children:\"4xl\"}),\" | \",(0,e.jsx)(r.code,{children:\"5xl\"}),\" | \",(0,e.jsx)(r.code,{children:\"full\"})]}),(0,e.jsx)(r.td,{children:\"The drawer size.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"md\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"radius\"}),(0,e.jsxs)(r.td,{children:[(0,e.jsx)(r.code,{children:\"none\"}),\" | \",(0,e.jsx)(r.code,{children:\"sm\"}),\" | \",(0,e.jsx)(r.code,{children:\"md\"}),\" | \",(0,e.jsx)(r.code,{children:\"lg\"})]}),(0,e.jsx)(r.td,{children:\"The drawer border radius.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"lg\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"placement\"}),(0,e.jsxs)(r.td,{children:[(0,e.jsx)(r.code,{children:\"left\"}),\" | \",(0,e.jsx)(r.code,{children:\"right\"}),\" | \",(0,e.jsx)(r.code,{children:\"top\"}),\" | \",(0,e.jsx)(r.code,{children:\"bottom\"})]}),(0,e.jsx)(r.td,{children:\"The drawer position.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"right\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"isOpen\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsx)(r.td,{children:\"Whether the drawer is open by default (controlled).\"}),(0,e.jsx)(r.td,{children:\"-\"})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"defaultOpen\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsx)(r.td,{children:\"Whether the drawer is open by default (uncontrolled).\"}),(0,e.jsx)(r.td,{children:\"-\"})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"isDismissable\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsxs)(r.td,{children:[\"Whether the drawer can be closed by clicking on the overlay or pressing the \",(0,e.jsx)(l,{children:\"Esc\"}),\" key.\"]}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"true\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"isKeyboardDismissDisabled\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsxs)(r.td,{children:[\"Whether pressing the \",(0,e.jsx)(l,{children:\"Esc\"}),\" key to close the drawer should be disabled.\"]}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"false\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"shouldBlockScroll\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsx)(r.td,{children:\"Whether the drawer should block the scroll of the page on open.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"true\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"hideCloseButton\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsx)(r.td,{children:\"Whether to hide the drawer close button.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"false\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"closeButton\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"ReactNode\"})}),(0,e.jsx)(r.td,{children:\"Custom close button to display on top right corner.\"}),(0,e.jsx)(r.td,{children:\"-\"})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"motionProps\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.a,{href:\"#motion-props\",children:\"MotionProps\"})}),(0,e.jsxs)(r.td,{children:[\"The props to modify the framer motion animation. Use the \",(0,e.jsx)(r.code,{children:\"variants\"}),\" API to create your own animation.\"]}),(0,e.jsx)(r.td,{})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"portalContainer\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"HTMLElement\"})}),(0,e.jsx)(r.td,{children:\"The container element in which the overlay portal will be placed.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"document.body\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"disableAnimation\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"boolean\"})}),(0,e.jsx)(r.td,{children:\"Whether the drawer should not have animations.\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"false\"})})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"classNames\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:'Record<\"wrapper\"\\uFF5C \"base\"\\uFF5C \"backdrop\"\\uFF5C \"header\" \\uFF5C \"body\" \\uFF5C \"footer\" \\uFF5C \"closeButton\", string>'})}),(0,e.jsx)(r.td,{children:\"Allows to set custom class names for the drawer slots.\"}),(0,e.jsx)(r.td,{children:\"-\"})]})]})]}),`\n`,(0,e.jsx)(r.h3,{id:\"drawer-events\",children:\"Drawer Events\"}),`\n`,(0,e.jsxs)(r.table,{children:[(0,e.jsx)(r.thead,{children:(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.th,{children:\"Attribute\"}),(0,e.jsx)(r.th,{children:\"Type\"}),(0,e.jsx)(r.th,{children:\"Description\"})]})}),(0,e.jsxs)(r.tbody,{children:[(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"onOpenChange\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"(isOpen: boolean) => void\"})}),(0,e.jsx)(r.td,{children:\"Handler that is called when the drawer's open state changes.\"})]}),(0,e.jsxs)(r.tr,{children:[(0,e.jsx)(r.td,{children:\"onClose\"}),(0,e.jsx)(r.td,{children:(0,e.jsx)(r.code,{children:\"() => void\"})}),(0,e.jsx)(r.td,{children:\"Handler that is called when the drawer is closed.\"})]})]})]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(r.h3,{id:\"drawer-types\",children:\"Drawer types\"}),`\n`,(0,e.jsx)(r.h4,{id:\"motion-props\",children:\"Motion Props\"}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-ts\",children:`export type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n`})})]})}function k(n={}){let{wrapper:r}=n.components||{};return r?(0,e.jsx)(r,{...n,children:(0,e.jsx)(B,{...n})}):B(n)}function d(n,r){throw new Error(\"Expected \"+(r?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return F($);})();\n;return Component;"
  },
  "_id": "docs/components/drawer.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/drawer.mdx",
    "sourceFileName": "drawer.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/drawer"
  },
  "type": "Doc",
  "slug": "/docs/components/drawer",
  "slugAsParams": "components/drawer",
  "url": "/docs/components/drawer"
}