{
  "title": "Override styles",
  "description": "NextUI allows you to override the default styles of the components in several ways.",
  "body": {
    "raw": "\n# Override styles\n\nOverriding default component styles is as simple as passing your own class names to the `className`\nor to the `classNames` prop for components with slots.\n\n<CarbonAd/>\n\n### What is a Slot?\n\nA slot is a part of a component that can be styled separately. For example, the [CircularProgress](/docs/components/circular-progress) component\nhas multiple slots/parts that can be styled separately, such as the `track`, `indicator`, `value`, etc.\n\nComponents with slots have a `classNames` prop that allows you to style each slot separately.\n\n### Overriding a component\n\nLet's override the default styles of the [Button](/docs/components/button) component, which is a component that has no slots.\n\n```jsx {7}\nimport {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Button\n      disableRipple\n      className=\"relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0\"\n      size=\"lg\"\n    >\n      Press me\n    </Button>\n  );\n}\n```\n\n<Spacer y={4}/>\n\nimport buttonOverrideExample from \"@/content/customization/override-styles/button-example\";\n\n<CodeDemo\n  isCentered\n  title=\"Override Button styles\"\n  files={buttonOverrideExample}\n  showEditor={false}\n  isPreviewCentered={true}\n  gradientColor=\"orange\"\n  isGradientBox={true}\n  previewHeight={160}\n  className=\"py-5\"\n/>\n\n### Components with slots\n\nSome NextUI components have slots, which means that you can style all the parts inside the component\nusing the `classNames` prop. For example, the [CircularProgress](/docs/components/circular-progress) \ncomponent has the following slots:\n\n- **base**: The base slot of the circular progress, it is the main container.\n- **svgWrapper**: The wrapper of the svg circles and the value label.\n- **svg**: The svg element of the circles.\n- **track**: The track is the background circle of the circular progress.\n- **indicator**: The indicator is the one that is filled according to the `value`.\n- **value**: The value content.\n- **label**: The label content.\n\nEach slot can be styled using the `classNames` prop, the example below shows how\nto change the styles of some slots to create a circular progress with a different\nstyle.\n\nimport slotsOverrideExample from \"@/content/customization/override-styles/slots-example\";\n\n```jsx {9-12}\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500\">\n      <CardBody className=\"justify-center items-center py-0\">\n        <CircularProgress\n          classNames={{\n            svg: \"w-36 h-36 drop-shadow-md\",\n            indicator: \"stroke-white\",\n            track: \"stroke-white/10\",\n            value: \"text-3xl font-semibold text-white\",\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n    </Card>\n  );\n}\n```\n\n<Spacer y={4}/>\n\n<CodeDemo\n  title=\"Override CircularProgress styles\"\n  files={slotsOverrideExample}\n  showEditor={false}\n/>\n\n> **Note**: You will find a `Slots` section in the documentation of each component that has slots.\n\n\n### CSS Modules\n\nCSS Modules allow for the creation of local scope classes and variables. Here's how \nyou can use it to override styles:\n\n```jsx\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\nimport styles from './App.module.css';\n\nexport default function App() {\n  return (\n    <Card className={styles.card}>\n      <CardBody className={styles.cardBody}>\n        <CircularProgress\n          classNames={{\n            svg: styles.svg,\n            indicator: styles.indicator,\n            track: styles.track,\n            value: styles.value,\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n    </Card>\n  );\n}\n```\n\nWith the corresponding CSS module:\n\n```css\n/* App.module.css */\n.card {\n  width: 240px;\n  height: 240px;\n  background: linear-gradient(to bottom right, violet, fuchsia);\n}\n\n.cardBody {\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 0;\n}\n\n.svg {\n  width: 36px;\n  height: 36px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n}\n\n.indicator {\n  stroke: white;\n}\n\n.track {\n  stroke: rgba(255, 255, 255, 0.1);\n}\n\n.value {\n  font-size: 24px;\n  font-weight: 600;\n  color: white;\n}\n```\n\n### CSS-in-JS\n\nIf you are using a CSS-in-JS library such as [styled-components](https://styled-components.com/) or [emotion](https://emotion.sh/), you can use the following\nexample to override the styles of a component:\n\n\n```jsx\nimport {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\nimport styled from 'styled-components';\n\nconst StyledCard = styled(Card)`\n  width: 240px;\n  height: 240px;\n  background: linear-gradient(to bottom right, violet, fuchsia);\n`;\n\nconst StyledCardBody = styled(CardBody)`\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 0;\n`;\n\nconst StyledCircularProgress = styled(CircularProgress).attrs({\n  classNames: {\n    svg: 'w-36 h-36 drop-shadow-md',\n    indicator: 'stroke-white',\n    track: 'stroke-white/10',\n    value: 'text-3xl font-semibold text-white',\n  }\n})``;\n\nexport default function App() {\n  return (\n    <StyledCard>\n      <StyledCardBody>\n        <StyledCircularProgress\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </StyledCardBody>\n    </StyledCard>\n  );\n}\n```\n\nIn this example, the `StyledCard`, `StyledCardBody`, and `StyledCircularProgress` components have \nthe combined styles of the original components and the custom styles defined in the template \nstrings. The `.attrs` method is used to add the classNames prop to the StyledCircularProgress \ncomponent.\n",
    "code": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var C=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of y(e))!v.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(s=g(e,o))||s.enumerable});return n};var b=(n,e,r)=>(r=n!=null?f(x(n)):{},i(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),k=n=>i(a({},\"__esModule\",{value:!0}),n);var d=C((T,c)=>{c.exports=_jsx_runtime});var A={};w(A,{default:()=>m,frontmatter:()=>j});var t=b(d());var S=`import {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Button\n      disableRipple\n      className=\"relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0\"\n      size=\"lg\"\n    >\n      Press me\n    </Button>\n  );\n}`,N={\"/App.jsx\":S},h={...N};var B=`import {CircularProgress, Card, CardBody, CardFooter, Chip} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500\">\n      <CardBody className=\"justify-center items-center py-0\">\n        <CircularProgress\n          classNames={{\n            svg: \"w-36 h-36 drop-shadow-md\",\n            indicator: \"stroke-white\",\n            track: \"stroke-white/10\",\n            value: \"text-3xl font-semibold text-white\",\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n    </Card>\n  );\n}`,P={\"/App.jsx\":B},p={...P};var j={title:\"Override styles\",description:\"NextUI allows you to override the default styles of the components in several ways.\"};function u(n){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components},{CarbonAd:r,CodeDemo:s,Spacer:o}=e;return r||l(\"CarbonAd\",!0),s||l(\"CodeDemo\",!0),o||l(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"override-styles\",children:\"Override styles\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Overriding default component styles is as simple as passing your own class names to the \",(0,t.jsx)(e.code,{children:\"className\"}),`\nor to the `,(0,t.jsx)(e.code,{children:\"classNames\"}),\" prop for components with slots.\"]}),`\n`,(0,t.jsx)(r,{}),`\n`,(0,t.jsx)(e.h3,{id:\"what-is-a-slot\",children:\"What is a Slot?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A slot is a part of a component that can be styled separately. For example, the \",(0,t.jsx)(e.a,{href:\"/docs/components/circular-progress\",children:\"CircularProgress\"}),` component\nhas multiple slots/parts that can be styled separately, such as the `,(0,t.jsx)(e.code,{children:\"track\"}),\", \",(0,t.jsx)(e.code,{children:\"indicator\"}),\", \",(0,t.jsx)(e.code,{children:\"value\"}),\", etc.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Components with slots have a \",(0,t.jsx)(e.code,{children:\"classNames\"}),\" prop that allows you to style each slot separately.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"overriding-a-component\",children:\"Overriding a component\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Let's override the default styles of the \",(0,t.jsx)(e.a,{href:\"/docs/components/button\",children:\"Button\"}),\" component, which is a component that has no slots.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",meta:\"{7}\",children:`import {Button} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Button\n      disableRipple\n      className=\"relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0\"\n      size=\"lg\"\n    >\n      Press me\n    </Button>\n  );\n}\n`})}),`\n`,(0,t.jsx)(o,{y:4}),`\n`,`\n`,(0,t.jsx)(s,{isCentered:!0,title:\"Override Button styles\",files:h,showEditor:!1,isPreviewCentered:!0,gradientColor:\"orange\",isGradientBox:!0,previewHeight:160,className:\"py-5\"}),`\n`,(0,t.jsx)(e.h3,{id:\"components-with-slots\",children:\"Components with slots\"}),`\n`,(0,t.jsxs)(e.p,{children:[`Some NextUI components have slots, which means that you can style all the parts inside the component\nusing the `,(0,t.jsx)(e.code,{children:\"classNames\"}),\" prop. For example, the \",(0,t.jsx)(e.a,{href:\"/docs/components/circular-progress\",children:\"CircularProgress\"}),`\ncomponent has the following slots:`]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"base\"}),\": The base slot of the circular progress, it is the main container.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"svgWrapper\"}),\": The wrapper of the svg circles and the value label.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"svg\"}),\": The svg element of the circles.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"track\"}),\": The track is the background circle of the circular progress.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"indicator\"}),\": The indicator is the one that is filled according to the \",(0,t.jsx)(e.code,{children:\"value\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"value\"}),\": The value content.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"label\"}),\": The label content.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Each slot can be styled using the \",(0,t.jsx)(e.code,{children:\"classNames\"}),` prop, the example below shows how\nto change the styles of some slots to create a circular progress with a different\nstyle.`]}),`\n`,`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",meta:\"{9-12}\",children:`import {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500\">\n      <CardBody className=\"justify-center items-center py-0\">\n        <CircularProgress\n          classNames={{\n            svg: \"w-36 h-36 drop-shadow-md\",\n            indicator: \"stroke-white\",\n            track: \"stroke-white/10\",\n            value: \"text-3xl font-semibold text-white\",\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n    </Card>\n  );\n}\n`})}),`\n`,(0,t.jsx)(o,{y:4}),`\n`,(0,t.jsx)(s,{title:\"Override CircularProgress styles\",files:p,showEditor:!1}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": You will find a \",(0,t.jsx)(e.code,{children:\"Slots\"}),\" section in the documentation of each component that has slots.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"css-modules\",children:\"CSS Modules\"}),`\n`,(0,t.jsx)(e.p,{children:`CSS Modules allow for the creation of local scope classes and variables. Here's how\nyou can use it to override styles:`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`import {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\nimport styles from './App.module.css';\n\nexport default function App() {\n  return (\n    <Card className={styles.card}>\n      <CardBody className={styles.cardBody}>\n        <CircularProgress\n          classNames={{\n            svg: styles.svg,\n            indicator: styles.indicator,\n            track: styles.track,\n            value: styles.value,\n          }}\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </CardBody>\n    </Card>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"With the corresponding CSS module:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-css\",children:`/* App.module.css */\n.card {\n  width: 240px;\n  height: 240px;\n  background: linear-gradient(to bottom right, violet, fuchsia);\n}\n\n.cardBody {\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 0;\n}\n\n.svg {\n  width: 36px;\n  height: 36px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n}\n\n.indicator {\n  stroke: white;\n}\n\n.track {\n  stroke: rgba(255, 255, 255, 0.1);\n}\n\n.value {\n  font-size: 24px;\n  font-weight: 600;\n  color: white;\n}\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"css-in-js\",children:\"CSS-in-JS\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you are using a CSS-in-JS library such as \",(0,t.jsx)(e.a,{href:\"https://styled-components.com/\",children:\"styled-components\"}),\" or \",(0,t.jsx)(e.a,{href:\"https://emotion.sh/\",children:\"emotion\"}),`, you can use the following\nexample to override the styles of a component:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`import {CircularProgress, Card, CardBody} from \"@nextui-org/react\";\nimport styled from 'styled-components';\n\nconst StyledCard = styled(Card)\\`\n  width: 240px;\n  height: 240px;\n  background: linear-gradient(to bottom right, violet, fuchsia);\n\\`;\n\nconst StyledCardBody = styled(CardBody)\\`\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 0;\n\\`;\n\nconst StyledCircularProgress = styled(CircularProgress).attrs({\n  classNames: {\n    svg: 'w-36 h-36 drop-shadow-md',\n    indicator: 'stroke-white',\n    track: 'stroke-white/10',\n    value: 'text-3xl font-semibold text-white',\n  }\n})\\`\\`;\n\nexport default function App() {\n  return (\n    <StyledCard>\n      <StyledCardBody>\n        <StyledCircularProgress\n          value={70}\n          strokeWidth={4}\n          showValueLabel={true}\n        />\n      </StyledCardBody>\n    </StyledCard>\n  );\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this example, the \",(0,t.jsx)(e.code,{children:\"StyledCard\"}),\", \",(0,t.jsx)(e.code,{children:\"StyledCardBody\"}),\", and \",(0,t.jsx)(e.code,{children:\"StyledCircularProgress\"}),` components have\nthe combined styles of the original components and the custom styles defined in the template\nstrings. The `,(0,t.jsx)(e.code,{children:\".attrs\"}),` method is used to add the classNames prop to the StyledCircularProgress\ncomponent.`]})]})}function m(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}function l(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(A);})();\n;return Component;"
  },
  "_id": "docs/customization/override-styles.mdx",
  "_raw": {
    "sourceFilePath": "docs/customization/override-styles.mdx",
    "sourceFileName": "override-styles.mdx",
    "sourceFileDir": "docs/customization",
    "contentType": "mdx",
    "flattenedPath": "docs/customization/override-styles"
  },
  "type": "Doc",
  "slug": "/docs/customization/override-styles",
  "slugAsParams": "customization/override-styles",
  "url": "/docs/customization/override-styles"
}